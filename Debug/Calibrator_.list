
Calibrator_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a0  080054a0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080054a0  080054a0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054a0  080054a0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080054a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200000fc  080055a4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080055a4  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd7  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f1  00000000  00000000  000310fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00034220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011482  00000000  00000000  00034e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f746  00000000  00000000  00046312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000661a9  00000000  00000000  00055a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bbc01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f0  00000000  00000000  000bbc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000fc 	.word	0x200000fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005280 	.word	0x08005280

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000100 	.word	0x20000100
 8000104:	08005280 	.word	0x08005280

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <app_main>:
/*----------------------------------prototypes function----------------------------*/

/*----------------------------------extern-----------------------------------------*/

void app_main()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	TMR_Init();
 8000248:	f000 fc6a 	bl	8000b20 <TMR_Init>
	TMR_Add( &ledTimer, ledTimer_Callback, TMR_RELOAD_YES );	// Обычный секундный беспонтовый светодиод
 800024c:	490d      	ldr	r1, [pc, #52]	; (8000284 <app_main+0x40>)
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <app_main+0x44>)
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fca4 	bl	8000ba0 <TMR_Add>
	TMR_Start( &ledTimer, 1000);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <app_main+0x44>)
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fcef 	bl	8000c44 <TMR_Start>

	CAMCMD_Init(camera_cmd_callback);
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <app_main+0x48>)
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fb7d 	bl	8000968 <CAMCMD_Init>
	eAPP_StartMCUReceive();
 800026e:	f000 f883 	bl	8000378 <eAPP_StartMCUReceive>
	while(1)
	{
		TMR_ExecuteCallbacks();
 8000272:	f000 fd20 	bl	8000cb6 <TMR_ExecuteCallbacks>
		CAMCMD_ProcessMessages();
 8000276:	f000 fb8b 	bl	8000990 <CAMCMD_ProcessMessages>
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		//eAPP_UART_Transmit_IT(cmdButton_1,sizeof(cmdButton_1)-1);
TIM1->ARR=60;
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <app_main+0x4c>)
 800027c:	223c      	movs	r2, #60	; 0x3c
 800027e:	62da      	str	r2, [r3, #44]	; 0x2c
		TMR_ExecuteCallbacks();
 8000280:	e7f7      	b.n	8000272 <app_main+0x2e>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	08000295 	.word	0x08000295
 8000288:	20000118 	.word	0x20000118
 800028c:	080002b1 	.word	0x080002b1
 8000290:	40012c00 	.word	0x40012c00

08000294 <ledTimer_Callback>:
		//HAL_UART_Transmit(&huart2, cmdButton_1,sizeof(cmdButton_1)-1,0xffff);
	}
}

void ledTimer_Callback(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <ledTimer_Callback+0x18>)
 800029e:	0019      	movs	r1, r3
 80002a0:	0010      	movs	r0, r2
 80002a2:	f001 fb60 	bl	8001966 <HAL_GPIO_TogglePin>
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	48000400 	.word	0x48000400

080002b0 <camera_cmd_callback>:

static void camera_cmd_callback(CMD_Type cmd, const CAMARG *args ){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	701a      	strb	r2, [r3, #0]

	switch(cmd){
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d00b      	beq.n	80002de <camera_cmd_callback+0x2e>
 80002c6:	dc46      	bgt.n	8000356 <camera_cmd_callback+0xa6>
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d002      	beq.n	80002d2 <camera_cmd_callback+0x22>
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	d034      	beq.n	800033a <camera_cmd_callback+0x8a>
        	HAL_TIM_Base_Stop_IT(&htim1);
			timer_step_counter=0;
			HAL_GPIO_WritePin(ENABLE_MOTOR_GPIO_Port, ENABLE_MOTOR_Pin, SET);
			break;
		default:
			break;
 80002d0:	e041      	b.n	8000356 <camera_cmd_callback+0xa6>
			eAPP_UART_Transmit_IT(cmdButton_1,sizeof(cmdButton_1)-1);
 80002d2:	4b24      	ldr	r3, [pc, #144]	; (8000364 <camera_cmd_callback+0xb4>)
 80002d4:	2118      	movs	r1, #24
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f876 	bl	80003c8 <eAPP_UART_Transmit_IT>
			break;
 80002dc:	e03e      	b.n	800035c <camera_cmd_callback+0xac>
			motor_step = args->parameter32.par_int32;
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	6a1a      	ldr	r2, [r3, #32]
 80002e2:	4b21      	ldr	r3, [pc, #132]	; (8000368 <camera_cmd_callback+0xb8>)
 80002e4:	601a      	str	r2, [r3, #0]
			if (motor_step>0) Stepper_motor(1, motor_step);
 80002e6:	4b20      	ldr	r3, [pc, #128]	; (8000368 <camera_cmd_callback+0xb8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	dd05      	ble.n	80002fa <camera_cmd_callback+0x4a>
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <camera_cmd_callback+0xb8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0019      	movs	r1, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 f879 	bl	80003ec <Stepper_motor>
			if (motor_step<0) Stepper_motor(-1, -motor_step);
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <camera_cmd_callback+0xb8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	da09      	bge.n	8000316 <camera_cmd_callback+0x66>
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <camera_cmd_callback+0xb8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	425b      	negs	r3, r3
 8000308:	001a      	movs	r2, r3
 800030a:	2301      	movs	r3, #1
 800030c:	425b      	negs	r3, r3
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f000 f86b 	bl	80003ec <Stepper_motor>
			if (motor_step==0)
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <camera_cmd_callback+0xb8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d11d      	bne.n	800035a <camera_cmd_callback+0xaa>
	        	HAL_TIM_Base_Stop_IT(&htim1);
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <camera_cmd_callback+0xbc>)
 8000320:	0018      	movs	r0, r3
 8000322:	f002 f845 	bl	80023b0 <HAL_TIM_Base_Stop_IT>
				timer_step_counter=0;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <camera_cmd_callback+0xc0>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(ENABLE_MOTOR_GPIO_Port, ENABLE_MOTOR_Pin, SET);
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <camera_cmd_callback+0xc4>)
 800032e:	2201      	movs	r2, #1
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fafa 	bl	800192c <HAL_GPIO_WritePin>
			break;
 8000338:	e00f      	b.n	800035a <camera_cmd_callback+0xaa>
        	HAL_TIM_Base_Stop_IT(&htim1);
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <camera_cmd_callback+0xbc>)
 800033c:	0018      	movs	r0, r3
 800033e:	f002 f837 	bl	80023b0 <HAL_TIM_Base_Stop_IT>
			timer_step_counter=0;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <camera_cmd_callback+0xc0>)
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(ENABLE_MOTOR_GPIO_Port, ENABLE_MOTOR_Pin, SET);
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <camera_cmd_callback+0xc4>)
 800034a:	2201      	movs	r2, #1
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0018      	movs	r0, r3
 8000350:	f001 faec 	bl	800192c <HAL_GPIO_WritePin>
			break;
 8000354:	e002      	b.n	800035c <camera_cmd_callback+0xac>
			break;
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	e000      	b.n	800035c <camera_cmd_callback+0xac>
			break;
 800035a:	46c0      	nop			; (mov r8, r8)
	}
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000000 	.word	0x20000000
 8000368:	2000012c 	.word	0x2000012c
 800036c:	2000015c 	.word	0x2000015c
 8000370:	20000130 	.word	0x20000130
 8000374:	48000400 	.word	0x48000400

08000378 <eAPP_StartMCUReceive>:

static uint8_t data;
void eAPP_StartMCUReceive( void ){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT( &huart2, &data, 1 );
 800037c:	4904      	ldr	r1, [pc, #16]	; (8000390 <eAPP_StartMCUReceive+0x18>)
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <eAPP_StartMCUReceive+0x1c>)
 8000380:	2201      	movs	r2, #1
 8000382:	0018      	movs	r0, r3
 8000384:	f002 ffa2 	bl	80032cc <HAL_UART_Receive_IT>
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	20000134 	.word	0x20000134
 8000394:	200001a4 	.word	0x200001a4

08000398 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	if(huart ==&huart2){
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <HAL_UART_RxCpltCallback+0x28>)
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d104      	bne.n	80003b2 <HAL_UART_RxCpltCallback+0x1a>
		MCU_HandleByte(data);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_UART_RxCpltCallback+0x2c>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 f8f3 	bl	8000598 <MCU_HandleByte>
	}
	eAPP_StartMCUReceive();
 80003b2:	f7ff ffe1 	bl	8000378 <eAPP_StartMCUReceive>
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b002      	add	sp, #8
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	200001a4 	.word	0x200001a4
 80003c4:	20000134 	.word	0x20000134

080003c8 <eAPP_UART_Transmit_IT>:

void eAPP_UART_Transmit_IT(unsigned char str[],int len){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, str,len);
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <eAPP_UART_Transmit_IT+0x20>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 fef6 	bl	80031cc <HAL_UART_Transmit_IT>
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b002      	add	sp, #8
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200001a4 	.word	0x200001a4

080003ec <Stepper_motor>:

void Stepper_motor(int8_t Direction,uint32_t Steps)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	701a      	strb	r2, [r3, #0]
	timer_step_counter = 2*Steps-1;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <Stepper_motor+0x5c>)
 8000402:	601a      	str	r2, [r3, #0]
	switch (Direction) {
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b25b      	sxtb	r3, r3
 800040a:	2b01      	cmp	r3, #1
 800040c:	d106      	bne.n	800041c <Stepper_motor+0x30>
			case 1:
				HAL_GPIO_WritePin(DIRECTION_MOTOR_GPIO_Port, DIRECTION_MOTOR_Pin, SET);
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <Stepper_motor+0x60>)
 8000410:	2201      	movs	r2, #1
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fa89 	bl	800192c <HAL_GPIO_WritePin>
				break;
 800041a:	e006      	b.n	800042a <Stepper_motor+0x3e>
			default:
				HAL_GPIO_WritePin(DIRECTION_MOTOR_GPIO_Port, DIRECTION_MOTOR_Pin, RESET);
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <Stepper_motor+0x60>)
 800041e:	2200      	movs	r2, #0
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fa82 	bl	800192c <HAL_GPIO_WritePin>
				break;
 8000428:	46c0      	nop			; (mov r8, r8)
		}
	HAL_GPIO_WritePin(ENABLE_MOTOR_GPIO_Port, ENABLE_MOTOR_Pin, RESET);
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <Stepper_motor+0x60>)
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fa7b 	bl	800192c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <Stepper_motor+0x64>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 ff6d 	bl	8002318 <HAL_TIM_Base_Start_IT>
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000130 	.word	0x20000130
 800044c:	48000400 	.word	0x48000400
 8000450:	2000015c 	.word	0x2000015c

08000454 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d123      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x5a>
        {
        	// степ мотор выполгятетс здесь
        	if(timer_step_counter>0)
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00d      	beq.n	800048a <HAL_TIM_PeriodElapsedCallback+0x36>
        	{
        		HAL_GPIO_TogglePin(STEP_MOTOR_GPIO_Port, STEP_MOTOR_Pin);
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	009a      	lsls	r2, r3, #2
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fa74 	bl	8001966 <HAL_GPIO_TogglePin>
        		timer_step_counter--;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1e5a      	subs	r2, r3, #1
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000486:	601a      	str	r2, [r3, #0]
        		return;
 8000488:	e011      	b.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x5a>
        	}
        	HAL_GPIO_WritePin(STEP_MOTOR_GPIO_Port, STEP_MOTOR_Pin, RESET);
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	0099      	lsls	r1, r3, #2
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2200      	movs	r2, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fa49 	bl	800192c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENABLE_MOTOR_GPIO_Port, ENABLE_MOTOR_Pin, RESET);
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800049c:	2200      	movs	r2, #0
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fa43 	bl	800192c <HAL_GPIO_WritePin>
        	HAL_TIM_Base_Stop_IT(&htim1);
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 ff81 	bl	80023b0 <HAL_TIM_Base_Stop_IT>
        }
}
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40012c00 	.word	0x40012c00
 80004b8:	20000130 	.word	0x20000130
 80004bc:	48000400 	.word	0x48000400
 80004c0:	2000015c 	.word	0x2000015c

080004c4 <_parse_parameter_int32>:
	if (arg->argCnt>=1){
		return 1;
	}
	return 0;
}
static int _parse_parameter_int32( unsigned char c, CAMARG *arg ){
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	0002      	movs	r2, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	701a      	strb	r2, [r3, #0]

	static int32_t val;
	int32_t res= find_int32(c,arg->buf,&arg->cnt,&val);
 80004d2:	6839      	ldr	r1, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	331e      	adds	r3, #30
 80004d8:	001a      	movs	r2, r3
 80004da:	4c13      	ldr	r4, [pc, #76]	; (8000528 <_parse_parameter_int32+0x64>)
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	7818      	ldrb	r0, [r3, #0]
 80004e0:	0023      	movs	r3, r4
 80004e2:	f000 f911 	bl	8000708 <find_int32>
 80004e6:	0003      	movs	r3, r0
 80004e8:	60fb      	str	r3, [r7, #12]
	if (res>0){
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dd0a      	ble.n	8000506 <_parse_parameter_int32+0x42>
		arg->parameter32.par_int32=val;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <_parse_parameter_int32+0x64>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	621a      	str	r2, [r3, #32]
		arg->argCnt++;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	7fdb      	ldrb	r3, [r3, #31]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	77da      	strb	r2, [r3, #31]
 8000504:	e005      	b.n	8000512 <_parse_parameter_int32+0x4e>
	}
	else if(res<0){
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2b00      	cmp	r3, #0
 800050a:	da02      	bge.n	8000512 <_parse_parameter_int32+0x4e>
		return -1;
 800050c:	2301      	movs	r3, #1
 800050e:	425b      	negs	r3, r3
 8000510:	e006      	b.n	8000520 <_parse_parameter_int32+0x5c>
	}
	if (arg->argCnt>=1){
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	7fdb      	ldrb	r3, [r3, #31]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <_parse_parameter_int32+0x5a>
		return 1;
 800051a:	2301      	movs	r3, #1
 800051c:	e000      	b.n	8000520 <_parse_parameter_int32+0x5c>
	}
	return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b005      	add	sp, #20
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	2000013c 	.word	0x2000013c

0800052c <_parse_time_led>:

static int _parse_time_led(unsigned char c, CAMARG *arg){
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
	static int val;
	int res = find_int(c,arg->buf,&arg->cnt,&val);
 800053a:	6839      	ldr	r1, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	331e      	adds	r3, #30
 8000540:	001a      	movs	r2, r3
 8000542:	4c14      	ldr	r4, [pc, #80]	; (8000594 <_parse_time_led+0x68>)
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	7818      	ldrb	r0, [r3, #0]
 8000548:	0023      	movs	r3, r4
 800054a:	f000 f877 	bl	800063c <find_int>
 800054e:	0003      	movs	r3, r0
 8000550:	60fb      	str	r3, [r7, #12]
	if (res>0){
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	dd0b      	ble.n	8000570 <_parse_time_led+0x44>
			arg->laser.Laser[0]=val;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <_parse_time_led+0x68>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	b29a      	uxth	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	841a      	strh	r2, [r3, #32]
			arg->argCnt++;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	7fdb      	ldrb	r3, [r3, #31]
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	77da      	strb	r2, [r3, #31]
 800056e:	e005      	b.n	800057c <_parse_time_led+0x50>
		}
		else if(res<0){
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	da02      	bge.n	800057c <_parse_time_led+0x50>
			return -1;
 8000576:	2301      	movs	r3, #1
 8000578:	425b      	negs	r3, r3
 800057a:	e006      	b.n	800058a <_parse_time_led+0x5e>
		}
		if (arg->argCnt>=1){
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	7fdb      	ldrb	r3, [r3, #31]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <_parse_time_led+0x5c>
			return 1;
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <_parse_time_led+0x5e>
		}
		return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b005      	add	sp, #20
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000140 	.word	0x20000140

08000598 <MCU_HandleByte>:


MCU_Status MCU_HandleByte(unsigned char data){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
	return _process_char( &comm, data );
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MCU_HandleByte+0x24>)
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 f911 	bl	80007d4 <_process_char>
 80005b2:	0003      	movs	r3, r0
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000001c 	.word	0x2000001c

080005c0 <find_cmd>:

static int find_cmd( unsigned char c, CAMCMD *cmd ){
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	0002      	movs	r2, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	701a      	strb	r2, [r3, #0]
	if ( cmd->cmd[cmd->cnt] == c ){
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	7852      	ldrb	r2, [r2, #1]
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	1dfa      	adds	r2, r7, #7
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d111      	bne.n	8000606 <find_cmd+0x46>
		cmd->cnt++;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	705a      	strb	r2, [r3, #1]
			find_cmd( c, cmd );
		}
		return 0;
	}

	if ( (cmd->cnt) >= strlen(cmd->cmd) ){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	001c      	movs	r4, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff fd85 	bl	8000108 <strlen>
 80005fe:	0003      	movs	r3, r0
 8000600:	429c      	cmp	r4, r3
 8000602:	d315      	bcc.n	8000630 <find_cmd+0x70>
 8000604:	e00f      	b.n	8000626 <find_cmd+0x66>
		if ( cmd->cnt != 0 ){
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d009      	beq.n	8000622 <find_cmd+0x62>
			cmd->cnt = 0;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	705a      	strb	r2, [r3, #1]
			find_cmd( c, cmd );
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ffcf 	bl	80005c0 <find_cmd>
		return 0;
 8000622:	2300      	movs	r3, #0
 8000624:	e005      	b.n	8000632 <find_cmd+0x72>
		cmd->cnt = 0;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	705a      	strb	r2, [r3, #1]
		return 1;
 800062c:	2301      	movs	r3, #1
 800062e:	e000      	b.n	8000632 <find_cmd+0x72>
	}

	return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	0018      	movs	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	b003      	add	sp, #12
 8000638:	bd90      	pop	{r4, r7, pc}
	...

0800063c <find_int>:

static int find_int( unsigned char c, unsigned char *buf, uint8_t *cnt, int *val ){
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b087      	sub	sp, #28
 8000640:	af00      	add	r7, sp, #0
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	230f      	movs	r3, #15
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	1c02      	adds	r2, r0, #0
 800064e:	701a      	strb	r2, [r3, #0]
	if ( *cnt >= MAX_STRING_BUF ){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b1d      	cmp	r3, #29
 8000656:	d902      	bls.n	800065e <find_int+0x22>
		*cnt = 0;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	}

	if( (( c >= '0' ) && ( c <= '9' )) || ( c == '-' ) ){
 800065e:	220f      	movs	r2, #15
 8000660:	18bb      	adds	r3, r7, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b2f      	cmp	r3, #47	; 0x2f
 8000666:	d903      	bls.n	8000670 <find_int+0x34>
 8000668:	18bb      	adds	r3, r7, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b39      	cmp	r3, #57	; 0x39
 800066e:	d904      	bls.n	800067a <find_int+0x3e>
 8000670:	230f      	movs	r3, #15
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b2d      	cmp	r3, #45	; 0x2d
 8000678:	d110      	bne.n	800069c <find_int+0x60>
		buf[*cnt] = c;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	001a      	movs	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	189b      	adds	r3, r3, r2
 8000684:	220f      	movs	r2, #15
 8000686:	18ba      	adds	r2, r7, r2
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	701a      	strb	r2, [r3, #0]
		*cnt += 1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	701a      	strb	r2, [r3, #0]
		return res;
	}else{
		return -1;
	}

	return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e02e      	b.n	80006fa <find_int+0xbe>
	}else if ((c == ',') || (c == 0) || (c == ' ') || ( c == '<')){
 800069c:	220f      	movs	r2, #15
 800069e:	18bb      	adds	r3, r7, r2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b2c      	cmp	r3, #44	; 0x2c
 80006a4:	d00b      	beq.n	80006be <find_int+0x82>
 80006a6:	18bb      	adds	r3, r7, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <find_int+0x82>
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d003      	beq.n	80006be <find_int+0x82>
 80006b6:	18bb      	adds	r3, r7, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b3c      	cmp	r3, #60	; 0x3c
 80006bc:	d11b      	bne.n	80006f6 <find_int+0xba>
		uint8_t res = 0;
 80006be:	2417      	movs	r4, #23
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		if ( sscanf(buf,"%d",val) > 0 ){
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	490e      	ldr	r1, [pc, #56]	; (8000704 <find_int+0xc8>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	0018      	movs	r0, r3
 80006ce:	f003 ffcd 	bl	800466c <siscanf>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	dd02      	ble.n	80006dc <find_int+0xa0>
			res = 1;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
		memset( buf, 0, MAX_STRING_BUF );
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	221e      	movs	r2, #30
 80006e0:	2100      	movs	r1, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 ffba 	bl	800465c <memset>
		*cnt = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
		return res;
 80006ee:	2317      	movs	r3, #23
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	e001      	b.n	80006fa <find_int+0xbe>
		return -1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	425b      	negs	r3, r3
}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b007      	add	sp, #28
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	080052d8 	.word	0x080052d8

08000708 <find_int32>:

static int find_int32( unsigned char c, unsigned char *buf, uint8_t *cnt, int32_t *val ){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	230f      	movs	r3, #15
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	1c02      	adds	r2, r0, #0
 800071a:	701a      	strb	r2, [r3, #0]
	if ( *cnt >= MAX_STRING_BUF ){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b1d      	cmp	r3, #29
 8000722:	d902      	bls.n	800072a <find_int32+0x22>
		*cnt = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	}

	if( (( c >= '0' ) && ( c <= '9' )) || ( c == '-' ) ){
 800072a:	220f      	movs	r2, #15
 800072c:	18bb      	adds	r3, r7, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b2f      	cmp	r3, #47	; 0x2f
 8000732:	d903      	bls.n	800073c <find_int32+0x34>
 8000734:	18bb      	adds	r3, r7, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b39      	cmp	r3, #57	; 0x39
 800073a:	d904      	bls.n	8000746 <find_int32+0x3e>
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b2d      	cmp	r3, #45	; 0x2d
 8000744:	d110      	bne.n	8000768 <find_int32+0x60>
		buf[*cnt] = c;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	001a      	movs	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	189b      	adds	r3, r3, r2
 8000750:	220f      	movs	r2, #15
 8000752:	18ba      	adds	r2, r7, r2
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	701a      	strb	r2, [r3, #0]
		*cnt += 1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
		return res;
	}else{
		return -1;
	}

	return 0;
 8000764:	2300      	movs	r3, #0
 8000766:	e02e      	b.n	80007c6 <find_int32+0xbe>
	}else if ((c == ',') || (c == 0) || (c == ' ') || ( c == '<')){
 8000768:	220f      	movs	r2, #15
 800076a:	18bb      	adds	r3, r7, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b2c      	cmp	r3, #44	; 0x2c
 8000770:	d00b      	beq.n	800078a <find_int32+0x82>
 8000772:	18bb      	adds	r3, r7, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d007      	beq.n	800078a <find_int32+0x82>
 800077a:	18bb      	adds	r3, r7, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b20      	cmp	r3, #32
 8000780:	d003      	beq.n	800078a <find_int32+0x82>
 8000782:	18bb      	adds	r3, r7, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b3c      	cmp	r3, #60	; 0x3c
 8000788:	d11b      	bne.n	80007c2 <find_int32+0xba>
		uint8_t res = 0;
 800078a:	2417      	movs	r4, #23
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		if ( sscanf(buf,"%d",val) > 0 ){
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	490e      	ldr	r1, [pc, #56]	; (80007d0 <find_int32+0xc8>)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	0018      	movs	r0, r3
 800079a:	f003 ff67 	bl	800466c <siscanf>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	dd02      	ble.n	80007a8 <find_int32+0xa0>
			res = 1;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
		memset( buf, 0, MAX_STRING_BUF );
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	221e      	movs	r2, #30
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 ff54 	bl	800465c <memset>
		*cnt = 0;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		return res;
 80007ba:	2317      	movs	r3, #23
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	e001      	b.n	80007c6 <find_int32+0xbe>
		return -1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	425b      	negs	r3, r3
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b007      	add	sp, #28
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	080052d8 	.word	0x080052d8

080007d4 <_process_char>:

static MCU_Status _process_char( CAM_COM *cam, unsigned char c ){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	000a      	movs	r2, r1
 80007de:	1cfb      	adds	r3, r7, #3
 80007e0:	701a      	strb	r2, [r3, #0]
	if ( find_cmd( c, &cam->cmd[CMD_END] ) ){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3334      	adds	r3, #52	; 0x34
 80007e6:	001a      	movs	r2, r3
 80007e8:	1cfb      	adds	r3, r7, #3
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fee6 	bl	80005c0 <find_cmd>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d010      	beq.n	800081a <_process_char+0x46>
		if ( ( cam->state != STATE_WAIT_EXEC ) || (handle_cmd == 0) ){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2224      	movs	r2, #36	; 0x24
 80007fc:	5c9b      	ldrb	r3, [r3, r2]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d103      	bne.n	800080a <_process_char+0x36>
 8000802:	4b58      	ldr	r3, [pc, #352]	; (8000964 <_process_char+0x190>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d107      	bne.n	800081a <_process_char+0x46>
			cam->state = STATE_NONE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2224      	movs	r2, #36	; 0x24
 800080e:	2100      	movs	r1, #0
 8000810:	5499      	strb	r1, [r3, r2]
			cam->foundCmd = CMD_NONE;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2225      	movs	r2, #37	; 0x25
 8000816:	2106      	movs	r1, #6
 8000818:	5499      	strb	r1, [r3, r2]
		}
	}

	if ( find_cmd( c, &cam->cmd[CMD_BEGIN] ) ){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3328      	adds	r3, #40	; 0x28
 800081e:	001a      	movs	r2, r3
 8000820:	1cfb      	adds	r3, r7, #3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff feca 	bl	80005c0 <find_cmd>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d013      	beq.n	8000858 <_process_char+0x84>
		cam->state = STATE_CMD_DECODE_CMD;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2224      	movs	r2, #36	; 0x24
 8000834:	2101      	movs	r1, #1
 8000836:	5499      	strb	r1, [r3, r2]
		cam->foundCmd = CMD_NONE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2225      	movs	r2, #37	; 0x25
 800083c:	2106      	movs	r1, #6
 800083e:	5499      	strb	r1, [r3, r2]
		cam->arg.argCnt = 0;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	77da      	strb	r2, [r3, #31]
		cam->arg.cnt = 0;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	779a      	strb	r2, [r3, #30]
		memset(cam->arg.buf, 0, MAX_STRING_BUF);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	221e      	movs	r2, #30
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f003 ff02 	bl	800465c <memset>
	}

	switch (cam->state){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2224      	movs	r2, #36	; 0x24
 800085c:	5c9b      	ldrb	r3, [r3, r2]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d062      	beq.n	8000928 <_process_char+0x154>
 8000862:	dd00      	ble.n	8000866 <_process_char+0x92>
 8000864:	e06a      	b.n	800093c <_process_char+0x168>
 8000866:	2b02      	cmp	r3, #2
 8000868:	d028      	beq.n	80008bc <_process_char+0xe8>
 800086a:	dc67      	bgt.n	800093c <_process_char+0x168>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <_process_char+0x9e>
 8000870:	e06d      	b.n	800094e <_process_char+0x17a>
 8000872:	2b01      	cmp	r3, #1
 8000874:	d162      	bne.n	800093c <_process_char+0x168>

		}break;

		case STATE_CMD_DECODE_CMD:{

			for ( int i = 2; i < ARRAY_SIZE(cam->cmd); i++ ){
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e01b      	b.n	80008b4 <_process_char+0xe0>
				if ( find_cmd( c, &cam->cmd[i] ) ){
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	0013      	movs	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	189b      	adds	r3, r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	3328      	adds	r3, #40	; 0x28
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	18d2      	adds	r2, r2, r3
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fe94 	bl	80005c0 <find_cmd>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d008      	beq.n	80008ae <_process_char+0xda>
					cam->state = STATE_GET_ARGS;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2224      	movs	r2, #36	; 0x24
 80008a0:	2102      	movs	r1, #2
 80008a2:	5499      	strb	r1, [r3, r2]
					cam->foundCmd = i;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	b2d9      	uxtb	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2225      	movs	r2, #37	; 0x25
 80008ac:	5499      	strb	r1, [r3, r2]
			for ( int i = 2; i < ARRAY_SIZE(cam->cmd); i++ ){
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d9e0      	bls.n	800087c <_process_char+0xa8>
				}
			}

		}break;
 80008ba:	e04d      	b.n	8000958 <_process_char+0x184>

		case STATE_GET_ARGS:{
			if ( cam->cmd[cam->foundCmd].parse_arg != 0 ){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2225      	movs	r2, #37	; 0x25
 80008c0:	5c9b      	ldrb	r3, [r3, r2]
 80008c2:	0019      	movs	r1, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	000b      	movs	r3, r1
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	185b      	adds	r3, r3, r1
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	3330      	adds	r3, #48	; 0x30
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d022      	beq.n	800091e <_process_char+0x14a>
				int res = cam->cmd[cam->foundCmd].parse_arg( c, &cam->arg );
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2225      	movs	r2, #37	; 0x25
 80008dc:	5c9b      	ldrb	r3, [r3, r2]
 80008de:	0019      	movs	r1, r3
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	000b      	movs	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	185b      	adds	r3, r3, r1
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	3330      	adds	r3, #48	; 0x30
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	1cfa      	adds	r2, r7, #3
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0010      	movs	r0, r2
 80008f8:	4798      	blx	r3
 80008fa:	0003      	movs	r3, r0
 80008fc:	60bb      	str	r3, [r7, #8]
				if ( res > 0 ){
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	dd04      	ble.n	800090e <_process_char+0x13a>
					cam->state = STATE_WAIT_EXEC;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2224      	movs	r2, #36	; 0x24
 8000908:	2103      	movs	r1, #3
 800090a:	5499      	strb	r1, [r3, r2]
				}
			}else{

				cam->state = STATE_WAIT_EXEC;
			}
		}break;
 800090c:	e021      	b.n	8000952 <_process_char+0x17e>
				}else if ( res < 0 ){
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	da1e      	bge.n	8000952 <_process_char+0x17e>
					cam->state = STATE_NONE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2224      	movs	r2, #36	; 0x24
 8000918:	2100      	movs	r1, #0
 800091a:	5499      	strb	r1, [r3, r2]
		}break;
 800091c:	e019      	b.n	8000952 <_process_char+0x17e>
				cam->state = STATE_WAIT_EXEC;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2224      	movs	r2, #36	; 0x24
 8000922:	2103      	movs	r1, #3
 8000924:	5499      	strb	r1, [r3, r2]
		}break;
 8000926:	e014      	b.n	8000952 <_process_char+0x17e>

		case STATE_WAIT_EXEC:{
			//При выполнении колбека программа должна сбросить foundCmd, что является сигналом о том, что обработка команды закончена
			if ( cam->foundCmd == CMD_NONE ){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2225      	movs	r2, #37	; 0x25
 800092c:	5c9b      	ldrb	r3, [r3, r2]
 800092e:	2b06      	cmp	r3, #6
 8000930:	d111      	bne.n	8000956 <_process_char+0x182>
				cam->state = STATE_NONE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2224      	movs	r2, #36	; 0x24
 8000936:	2100      	movs	r1, #0
 8000938:	5499      	strb	r1, [r3, r2]
			}
		}break;
 800093a:	e00c      	b.n	8000956 <_process_char+0x182>

		default:{
			cam->state = STATE_NONE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	5499      	strb	r1, [r3, r2]
			cam->foundCmd = CMD_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2225      	movs	r2, #37	; 0x25
 8000948:	2106      	movs	r1, #6
 800094a:	5499      	strb	r1, [r3, r2]
 800094c:	e004      	b.n	8000958 <_process_char+0x184>
		}break;
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	e002      	b.n	8000958 <_process_char+0x184>
		}break;
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	e000      	b.n	8000958 <_process_char+0x184>
		}break;
 8000956:	46c0      	nop			; (mov r8, r8)
		}
	}

	return MCUSTAT_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000138 	.word	0x20000138

08000968 <CAMCMD_Init>:

MCU_Status CAMCMD_Init( CMD_HANDL_CALLBACK callback ){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if ( callback == 0 ){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <CAMCMD_Init+0x12>
		return MCUSTAT_ERR;
 8000976:	2301      	movs	r3, #1
 8000978:	e003      	b.n	8000982 <CAMCMD_Init+0x1a>
	}
	handle_cmd = callback;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <CAMCMD_Init+0x24>)
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
	return MCUSTAT_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000138 	.word	0x20000138

08000990 <CAMCMD_ProcessMessages>:

void CAMCMD_ProcessMessages( void ){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
		if ( comm.state == STATE_WAIT_EXEC && handle_cmd && comm.foundCmd != CMD_NONE ){
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 8000996:	2224      	movs	r2, #36	; 0x24
 8000998:	5c9b      	ldrb	r3, [r3, r2]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d11a      	bne.n	80009d4 <CAMCMD_ProcessMessages+0x44>
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <CAMCMD_ProcessMessages+0x50>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d016      	beq.n	80009d4 <CAMCMD_ProcessMessages+0x44>
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 80009a8:	2225      	movs	r2, #37	; 0x25
 80009aa:	5c9b      	ldrb	r3, [r3, r2]
 80009ac:	2b06      	cmp	r3, #6
 80009ae:	d011      	beq.n	80009d4 <CAMCMD_ProcessMessages+0x44>
			handle_cmd( comm.foundCmd, &comm.arg );
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <CAMCMD_ProcessMessages+0x50>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 80009b6:	2125      	movs	r1, #37	; 0x25
 80009b8:	5c52      	ldrb	r2, [r2, r1]
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 80009bc:	0010      	movs	r0, r2
 80009be:	4798      	blx	r3
			comm.foundCmd = CMD_NONE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 80009c2:	2225      	movs	r2, #37	; 0x25
 80009c4:	2106      	movs	r1, #6
 80009c6:	5499      	strb	r1, [r3, r2]
			memset(&comm.arg, 0, sizeof(CAMARG));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <CAMCMD_ProcessMessages+0x4c>)
 80009ca:	2224      	movs	r2, #36	; 0x24
 80009cc:	2100      	movs	r1, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 fe44 	bl	800465c <memset>
		}
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	2000001c 	.word	0x2000001c
 80009e0:	20000138 	.word	0x20000138

080009e4 <_decrementAllTimers>:
 */

/** @addtogroup Timer_PrivateFunctions
 * @{
 */
static void _decrementAllTimers(uint32_t decrement) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	Timer *currentTimer = headTimer;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <_decrementAllTimers+0x5c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
	while (currentTimer != 0) {
 80009f2:	e01c      	b.n	8000a2e <_decrementAllTimers+0x4a>
		if (currentTimer->count && currentTimer->state.exState == TIMER_RUN) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d015      	beq.n	8000a28 <_decrementAllTimers+0x44>
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	7b1b      	ldrb	r3, [r3, #12]
 8000a00:	220f      	movs	r2, #15
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d10e      	bne.n	8000a28 <_decrementAllTimers+0x44>
			if (currentTimer->count > decrement) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d206      	bcs.n	8000a22 <_decrementAllTimers+0x3e>
				currentTimer->count -= decrement;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e002      	b.n	8000a28 <_decrementAllTimers+0x44>
			} else {
				currentTimer->count = 0;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
			}
		}
		currentTimer = currentTimer->nextTimer;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	60fb      	str	r3, [r7, #12]
	while (currentTimer != 0) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1df      	bne.n	80009f4 <_decrementAllTimers+0x10>
	}
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	2000014c 	.word	0x2000014c

08000a44 <_checkElapsedTimers>:
/**
 * @brief  Проверяем, какие таймеры закончились, выставляем флаги, перезапускаем если необходимо
 * @param  None
 * @retval None
 */
static void _checkElapsedTimers(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	Timer *currentTimer = headTimer;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <_checkElapsedTimers+0x6c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 8000a50:	e026      	b.n	8000aa0 <_checkElapsedTimers+0x5c>
		if (currentTimer->count == 0
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d11f      	bne.n	8000a9a <_checkElapsedTimers+0x56>
				&& currentTimer->state.exState == TIMER_RUN) {
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7b1b      	ldrb	r3, [r3, #12]
 8000a5e:	220f      	movs	r2, #15
 8000a60:	4013      	ands	r3, r2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d118      	bne.n	8000a9a <_checkElapsedTimers+0x56>
			if (currentTimer->config.isAutoReload) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7b5b      	ldrb	r3, [r3, #13]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4013      	ands	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d004      	beq.n	8000a80 <_checkElapsedTimers+0x3c>
				TMR_Restart(currentTimer);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 f908 	bl	8000c8e <TMR_Restart>
 8000a7e:	e007      	b.n	8000a90 <_checkElapsedTimers+0x4c>
			} else {
				currentTimer->state.exState = TIMER_END;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7b1a      	ldrb	r2, [r3, #12]
 8000a84:	210f      	movs	r1, #15
 8000a86:	438a      	bics	r2, r1
 8000a88:	1c11      	adds	r1, r2, #0
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	731a      	strb	r2, [r3, #12]
			}
			currentTimer->state.callbackFlag = 1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7b1a      	ldrb	r2, [r3, #12]
 8000a94:	2110      	movs	r1, #16
 8000a96:	430a      	orrs	r2, r1
 8000a98:	731a      	strb	r2, [r3, #12]
		}
		currentTimer = currentTimer->nextTimer;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1d5      	bne.n	8000a52 <_checkElapsedTimers+0xe>
	}
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000014c 	.word	0x2000014c

08000ab4 <_executeAllCallbacks>:

static void _executeAllCallbacks(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

#ifdef WATCHDOG
	eTMR_ClearWatchdog();
  #endif
	Timer *currentTimer = headTimer;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_executeAllCallbacks+0x4c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	607b      	str	r3, [r7, #4]

	while (currentTimer != 0) {
 8000ac0:	e015      	b.n	8000aee <_executeAllCallbacks+0x3a>
#ifdef WATCHDOG
	  eTMR_ClearWatchdog();
    #endif
		if (currentTimer->state.callbackFlag) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7b1b      	ldrb	r3, [r3, #12]
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00b      	beq.n	8000ae8 <_executeAllCallbacks+0x34>
			currentTimer->state.callbackFlag = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7b1a      	ldrb	r2, [r3, #12]
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	438a      	bics	r2, r1
 8000ad8:	731a      	strb	r2, [r3, #12]
			exec_cb(currentTimer->CallBackFunction);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <_executeAllCallbacks+0x34>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	4798      	blx	r3
		}
		currentTimer = currentTimer->nextTimer;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e6      	bne.n	8000ac2 <_executeAllCallbacks+0xe>
	}
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	2000014c 	.word	0x2000014c

08000b04 <TMR_IRQ>:
}
/**
 * @}
 */

void TMR_IRQ(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	msFromStart++;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <TMR_IRQ+0x18>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TMR_IRQ+0x18>)
 8000b10:	601a      	str	r2, [r3, #0]
	TMR_Tick(); //Можно здесь (если таймеров мало), а можно в контексте main. Например в TMR_ExecuteCallbacks
 8000b12:	f000 f819 	bl	8000b48 <TMR_Tick>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000144 	.word	0x20000144

08000b20 <TMR_Init>:
/**
 * @brief  Инициализируем таймер
 * @param  TIM заполненная структура типа Timer_InitTypeDef
 * @retval None
 */
void TMR_Init(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	msFromStart = 0;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <TMR_Init+0x1c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	headTimer = 0;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <TMR_Init+0x20>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	oldTime = 0;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <TMR_Init+0x24>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
#ifdef WATCHDOG
  _init_watchdog();
#endif
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000144 	.word	0x20000144
 8000b40:	2000014c 	.word	0x2000014c
 8000b44:	20000148 	.word	0x20000148

08000b48 <TMR_Tick>:
/**
 * @brief  Декрементировать все активные таймеры на время, прошедшее с последнего вызова
 * @param  None
 * @retval None
 */
void TMR_Tick(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	//__disable_interrupt();
	uint32_t newTime = msFromStart;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <TMR_Tick+0x50>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	603b      	str	r3, [r7, #0]
	//__enable_interrupt();
	uint32_t delta = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
	if (newTime < oldTime) { //произошло переполнение. 49 суток, но мало ли...
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <TMR_Tick+0x54>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d206      	bcs.n	8000b70 <TMR_Tick+0x28>
		delta = 0xFFFFFFFF - oldTime + newTime;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <TMR_Tick+0x54>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e004      	b.n	8000b7a <TMR_Tick+0x32>
	} else {
		delta = newTime - oldTime;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <TMR_Tick+0x54>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	607b      	str	r3, [r7, #4]
	}
	if (delta == 0)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d007      	beq.n	8000b90 <TMR_Tick+0x48>
		return;

	oldTime = newTime;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <TMR_Tick+0x54>)
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	601a      	str	r2, [r3, #0]

	_decrementAllTimers(delta);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff2b 	bl	80009e4 <_decrementAllTimers>
 8000b8e:	e000      	b.n	8000b92 <TMR_Tick+0x4a>
		return;
 8000b90:	46c0      	nop			; (mov r8, r8)
}
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000144 	.word	0x20000144
 8000b9c:	20000148 	.word	0x20000148

08000ba0 <TMR_Add>:
 * @brief  Добавляет таймер.
 * @param  timer - структура таймера, которая добавится к общему списку
 * @param  callbackFunction функция, которая выполнится после того, как таймер закончит счет
 * @retval None
 */
void TMR_Add(Timer *timer, void (*callback)(void), AutoreloadSetup autoreload) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	701a      	strb	r2, [r3, #0]
	timer->CallBackFunction = callback;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	609a      	str	r2, [r3, #8]
	timer->count = 0;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
	timer->reloadValue = 0;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
	timer->state.exState = TIMER_STOP;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	7b1a      	ldrb	r2, [r3, #12]
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	438a      	bics	r2, r1
 8000bc8:	731a      	strb	r2, [r3, #12]
	timer->state.callbackFlag = 0;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	7b1a      	ldrb	r2, [r3, #12]
 8000bce:	2110      	movs	r1, #16
 8000bd0:	438a      	bics	r2, r1
 8000bd2:	731a      	strb	r2, [r3, #12]
	if (autoreload) {
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <TMR_Add+0x48>
		timer->config.isAutoReload = 1;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	7b5a      	ldrb	r2, [r3, #13]
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	735a      	strb	r2, [r3, #13]
 8000be6:	e004      	b.n	8000bf2 <TMR_Add+0x52>
	} else {
		timer->config.isAutoReload = 0;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7b5a      	ldrb	r2, [r3, #13]
 8000bec:	2101      	movs	r1, #1
 8000bee:	438a      	bics	r2, r1
 8000bf0:	735a      	strb	r2, [r3, #13]
	}

	//Еще нет ни одного таймера
	if (headTimer == 0) {
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <TMR_Add+0xa0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d106      	bne.n	8000c08 <TMR_Add+0x68>
		timer->nextTimer = 0;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
		headTimer = timer;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <TMR_Add+0xa0>)
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
		return;
 8000c06:	e017      	b.n	8000c38 <TMR_Add+0x98>
	}

	//Проходим список от начала и до конца, проверяя таймеры на повтор
	Timer *currentTimer = headTimer;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <TMR_Add+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	617b      	str	r3, [r7, #20]
	while (currentTimer->nextTimer != 0) {
 8000c0e:	e006      	b.n	8000c1e <TMR_Add+0x7e>
		if (currentTimer != timer) {
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d00e      	beq.n	8000c36 <TMR_Add+0x96>
			currentTimer = currentTimer->nextTimer;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	617b      	str	r3, [r7, #20]
	while (currentTimer->nextTimer != 0) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f4      	bne.n	8000c10 <TMR_Add+0x70>
			return; //Ошибка, в списке таймеров такой таймер уже есть
		}
	}

	//Цепляем новый таймер в начало списка (можно в конец, если воспользоваться переменной currentTimer)
	timer->nextTimer = headTimer;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <TMR_Add+0xa0>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
	headTimer = timer;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <TMR_Add+0xa0>)
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e000      	b.n	8000c38 <TMR_Add+0x98>
			return; //Ошибка, в списке таймеров такой таймер уже есть
 8000c36:	46c0      	nop			; (mov r8, r8)
}
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b006      	add	sp, #24
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	2000014c 	.word	0x2000014c

08000c44 <TMR_Start>:
 * @brief  Запустить таймер не трогая счетчик. Если таймер остановлен - продолжит выполнение, если уже запущен - ничего не произойдет.
 * @param  timer - таймер, над которым проводится операция
 * @param  delay - время таймера в мс
 * @retval event текущий статус таймера
 */
void TMR_Start(Timer *timer, uint32_t delay) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	if (timer->state.exState == TIMER_STOP
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b1b      	ldrb	r3, [r3, #12]
 8000c52:	220f      	movs	r2, #15
 8000c54:	4013      	ands	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <TMR_Start+0x26>
			|| timer->state.exState == TIMER_END) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7b1b      	ldrb	r3, [r3, #12]
 8000c60:	220f      	movs	r2, #15
 8000c62:	4013      	ands	r3, r2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10d      	bne.n	8000c86 <TMR_Start+0x42>
		timer->state.exState = TIMER_RUN;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7b1a      	ldrb	r2, [r3, #12]
 8000c6e:	210f      	movs	r1, #15
 8000c70:	438a      	bics	r2, r1
 8000c72:	1c11      	adds	r1, r2, #0
 8000c74:	2202      	movs	r2, #2
 8000c76:	430a      	orrs	r2, r1
 8000c78:	731a      	strb	r2, [r3, #12]
		timer->reloadValue = delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
		timer->count = delay;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	601a      	str	r2, [r3, #0]
	}
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <TMR_Restart>:
/**
 * @brief  Перезапустить таймер, обнулив счетчик. Если таймер запущен выполнение начнется с начала
 * @param  timer - таймер, над которым проводится операция
 * @retval none
 */
void TMR_Restart(Timer *timer) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	timer->count = timer->reloadValue;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	timer->state.exState = TIMER_RUN;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1a      	ldrb	r2, [r3, #12]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	438a      	bics	r2, r1
 8000ca6:	1c11      	adds	r1, r2, #0
 8000ca8:	2202      	movs	r2, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	731a      	strb	r2, [r3, #12]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <TMR_ExecuteCallbacks>:
/**
 * @brief  Выполнить все функции обратного вызова
 * @param  None
 * @retval Статус
 */
void TMR_ExecuteCallbacks(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	//Один из вариантов размещения этой функции. Можно в упрощенном виде (без рассчета delta) вызывать в прерывании
	//что экономит время нахождения в прерывании, но зато все таймеры всегда имеют актуальное время.
	//Либо здесь, где эта функция будет выполняться столько раз, сколько успеет в главном цикле в контексте main.
	//TMR_Tick();
	_checkElapsedTimers();
 8000cba:	f7ff fec3 	bl	8000a44 <_checkElapsedTimers>
	_executeAllCallbacks();
 8000cbe:	f7ff fef9 	bl	8000ab4 <_executeAllCallbacks>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fafe 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f809 	bl	8000ce6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 f934 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 f902 	bl	8000ee0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cdc:	f000 f84e 	bl	8000d7c <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_main();
 8000ce0:	f7ff fab0 	bl	8000244 <app_main>
 8000ce4:	e7fc      	b.n	8000ce0 <main+0x18>

08000ce6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b091      	sub	sp, #68	; 0x44
 8000cea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cec:	2410      	movs	r4, #16
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2330      	movs	r3, #48	; 0x30
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f003 fcb0 	bl	800465c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2310      	movs	r3, #16
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f003 fca9 	bl	800465c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2202      	movs	r2, #2
 8000d10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2201      	movs	r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	22a0      	movs	r2, #160	; 0xa0
 8000d2e:	0392      	lsls	r2, r2, #14
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fe2e 	bl	800199c <HAL_RCC_OscConfig>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d44:	f000 f970 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d48:	003b      	movs	r3, r7
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	003b      	movs	r3, r7
 8000d50:	2202      	movs	r2, #2
 8000d52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	003b      	movs	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d60:	003b      	movs	r3, r7
 8000d62:	2101      	movs	r1, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 f933 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d6e:	f000 f95b 	bl	8001028 <Error_Handler>
  }
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b011      	add	sp, #68	; 0x44
 8000d78:	bd90      	pop	{r4, r7, pc}
	...

08000d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b096      	sub	sp, #88	; 0x58
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	2348      	movs	r3, #72	; 0x48
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	2310      	movs	r3, #16
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f003 fc65 	bl	800465c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	2340      	movs	r3, #64	; 0x40
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	0018      	movs	r0, r3
 8000d98:	2308      	movs	r3, #8
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f003 fc5d 	bl	800465c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	2324      	movs	r3, #36	; 0x24
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	0018      	movs	r0, r3
 8000da8:	231c      	movs	r3, #28
 8000daa:	001a      	movs	r2, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	f003 fc55 	bl	800465c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	0018      	movs	r0, r3
 8000db6:	2320      	movs	r3, #32
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f003 fc4e 	bl	800465c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000dc2:	4a46      	ldr	r2, [pc, #280]	; (8000edc <MX_TIM1_Init+0x160>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000dc8:	222f      	movs	r2, #47	; 0x2f
 8000dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000dd4:	22fa      	movs	r2, #250	; 0xfa
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 fa42 	bl	8002278 <HAL_TIM_Base_Init>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000df8:	f000 f916 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	2148      	movs	r1, #72	; 0x48
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0152      	lsls	r2, r2, #5
 8000e04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e06:	187a      	adds	r2, r7, r1
 8000e08:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 fcc3 	bl	8002798 <HAL_TIM_ConfigClockSource>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e16:	f000 f907 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 faf5 	bl	800240c <HAL_TIM_OC_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000e26:	f000 f8ff 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e38:	187a      	adds	r2, r7, r1
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 f8aa 	bl	8002f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000e48:	f000 f8ee 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e4c:	2124      	movs	r1, #36	; 0x24
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	22fa      	movs	r2, #250	; 0xfa
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	1879      	adds	r1, r7, r1
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fc31 	bl	80026e8 <HAL_TIM_OC_ConfigChannel>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000e8a:	f000 f8cd 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0192      	lsls	r2, r2, #6
 8000eb2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eba:	1d3a      	adds	r2, r7, #4
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_TIM1_Init+0x15c>)
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 f8c1 	bl	8003048 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000eca:	f000 f8ad 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b016      	add	sp, #88	; 0x58
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	2000015c 	.word	0x2000015c
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MX_USART2_UART_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000eec:	2296      	movs	r2, #150	; 0x96
 8000eee:	01d2      	lsls	r2, r2, #7
 8000ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f002 f8fd 	bl	8003124 <HAL_UART_Init>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f000 f87b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001a4 	.word	0x200001a4
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	240c      	movs	r4, #12
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f003 fb83 	bl	800465c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	03c9      	lsls	r1, r1, #15
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	03db      	lsls	r3, r3, #15
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0289      	lsls	r1, r1, #10
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4013      	ands	r3, r2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DIRECTION_MOTOR_Pin|ENABLE_MOTOR_Pin, GPIO_PIN_RESET);
 8000faa:	491d      	ldr	r1, [pc, #116]	; (8001020 <MX_GPIO_Init+0xe0>)
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_GPIO_Init+0xe4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fcbb 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_MOTOR_GPIO_Port, STEP_MOTOR_Pin, GPIO_PIN_RESET);
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	0099      	lsls	r1, r3, #2
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fcb3 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin DIRECTION_MOTOR_Pin ENABLE_MOTOR_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DIRECTION_MOTOR_Pin|ENABLE_MOTOR_Pin;
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <MX_GPIO_Init+0xe0>)
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2201      	movs	r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <MX_GPIO_Init+0xe4>)
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	f000 fb31 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_MOTOR_Pin */
  GPIO_InitStruct.Pin = STEP_MOTOR_Pin;
 8000fea:	0021      	movs	r1, r4
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STEP_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001006:	187a      	adds	r2, r7, r1
 8001008:	2390      	movs	r3, #144	; 0x90
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f000 fb1c 	bl	800164c <HAL_GPIO_Init>

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b009      	add	sp, #36	; 0x24
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	000080c0 	.word	0x000080c0
 8001024:	48000400 	.word	0x48000400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x44>)
 800103c:	699a      	ldr	r2, [r3, #24]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_MspInit+0x44>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x44>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x44>)
 8001054:	69da      	ldr	r2, [r3, #28]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x44>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0549      	lsls	r1, r1, #21
 800105c:	430a      	orrs	r2, r1
 800105e:	61da      	str	r2, [r3, #28]
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_MspInit+0x44>)
 8001062:	69da      	ldr	r2, [r3, #28]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	055b      	lsls	r3, r3, #21
 8001068:	4013      	ands	r3, r2
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d11d      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_TIM_Base_MspInit+0x5c>)
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_TIM_Base_MspInit+0x5c>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0109      	lsls	r1, r1, #4
 8001098:	430a      	orrs	r2, r1
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_TIM_Base_MspInit+0x5c>)
 800109e:	699a      	ldr	r2, [r3, #24]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200d      	movs	r0, #13
 80010b0:	f000 fa1c 	bl	80014ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80010b4:	200d      	movs	r0, #13
 80010b6:	f000 fa2e 	bl	8001516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200e      	movs	r0, #14
 80010c0:	f000 fa14 	bl	80014ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010c4:	200e      	movs	r0, #14
 80010c6:	f000 fa26 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	2414      	movs	r4, #20
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0018      	movs	r0, r3
 80010ea:	2314      	movs	r3, #20
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f003 fab4 	bl	800465c <memset>
  if(huart->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <HAL_UART_MspInit+0xa0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d13a      	bne.n	8001174 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001100:	69da      	ldr	r2, [r3, #28]
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0289      	lsls	r1, r1, #10
 8001108:	430a      	orrs	r2, r1
 800110a:	61da      	str	r2, [r3, #28]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0289      	lsls	r1, r1, #10
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001136:	0021      	movs	r1, r4
 8001138:	187b      	adds	r3, r7, r1
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2202      	movs	r2, #2
 8001142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2203      	movs	r2, #3
 800114e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2201      	movs	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	187a      	adds	r2, r7, r1
 8001158:	2390      	movs	r3, #144	; 0x90
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f000 fa74 	bl	800164c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	201c      	movs	r0, #28
 800116a:	f000 f9bf 	bl	80014ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800116e:	201c      	movs	r0, #28
 8001170:	f000 f9d1 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b00b      	add	sp, #44	; 0x2c
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	40004400 	.word	0x40004400
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TMR_IRQ();
 80011a8:	f7ff fcac 	bl	8000b04 <TMR_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8d6 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 f97c 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	2000015c 	.word	0x2000015c

080011d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <TIM1_CC_IRQHandler+0x14>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 f970 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	2000015c 	.word	0x2000015c

080011e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <USART2_IRQHandler+0x14>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f002 f8ce 	bl	8003390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	200001a4 	.word	0x200001a4

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f003 f9ea 	bl	8004608 <__errno>
 8001234:	0003      	movs	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	2301      	movs	r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	18d2      	adds	r2, r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <_sbrk+0x64>)
 8001250:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b006      	add	sp, #24
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20002000 	.word	0x20002000
 8001260:	00000400 	.word	0x00000400
 8001264:	20000150 	.word	0x20000150
 8001268:	20000240 	.word	0x20000240

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a2:	f7ff ffe3 	bl	800126c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012a6:	f003 f9b5 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fd0d 	bl	8000cc8 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80012bc:	080054a8 	.word	0x080054a8
  ldr r2, =_sbss
 80012c0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80012c4:	2000023c 	.word	0x2000023c

080012c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_IRQHandler>
	...

080012cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_Init+0x24>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_Init+0x24>)
 80012d6:	2110      	movs	r1, #16
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f809 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fea7 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x5c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	; 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe ff0f 	bl	800012c <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe ff0a 	bl	800012c <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f90b 	bl	8001536 <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00f      	b.n	8001348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d80b      	bhi.n	8001346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f8d8 	bl	80014ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_InitTick+0x64>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	2000008c 	.word	0x2000008c
 8001354:	20000094 	.word	0x20000094
 8001358:	20000090 	.word	0x20000090

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000094 	.word	0x20000094
 800137c:	20000228 	.word	0x20000228

08001380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20000228 	.word	0x20000228

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b7f      	cmp	r3, #127	; 0x7f
 80013a6:	d809      	bhi.n	80013bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	001a      	movs	r2, r3
 80013ae:	231f      	movs	r3, #31
 80013b0:	401a      	ands	r2, r3
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_EnableIRQ+0x30>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	4091      	lsls	r1, r2
 80013b8:	000a      	movs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
  }
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	0002      	movs	r2, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b7f      	cmp	r3, #127	; 0x7f
 80013dc:	d828      	bhi.n	8001430 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <__NVIC_SetPriority+0xd4>)
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	33c0      	adds	r3, #192	; 0xc0
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	589b      	ldr	r3, [r3, r2]
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	0011      	movs	r1, r2
 80013f4:	2203      	movs	r2, #3
 80013f6:	400a      	ands	r2, r1
 80013f8:	00d2      	lsls	r2, r2, #3
 80013fa:	21ff      	movs	r1, #255	; 0xff
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	43d2      	mvns	r2, r2
 8001402:	401a      	ands	r2, r3
 8001404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	019b      	lsls	r3, r3, #6
 800140a:	22ff      	movs	r2, #255	; 0xff
 800140c:	401a      	ands	r2, r3
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	2303      	movs	r3, #3
 8001416:	4003      	ands	r3, r0
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <__NVIC_SetPriority+0xd4>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	430a      	orrs	r2, r1
 8001428:	33c0      	adds	r3, #192	; 0xc0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800142e:	e031      	b.n	8001494 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0019      	movs	r1, r3
 8001438:	230f      	movs	r3, #15
 800143a:	400b      	ands	r3, r1
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3306      	adds	r3, #6
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	3304      	adds	r3, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1dfa      	adds	r2, r7, #7
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	0011      	movs	r1, r2
 8001450:	2203      	movs	r2, #3
 8001452:	400a      	ands	r2, r1
 8001454:	00d2      	lsls	r2, r2, #3
 8001456:	21ff      	movs	r1, #255	; 0xff
 8001458:	4091      	lsls	r1, r2
 800145a:	000a      	movs	r2, r1
 800145c:	43d2      	mvns	r2, r2
 800145e:	401a      	ands	r2, r3
 8001460:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	019b      	lsls	r3, r3, #6
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	401a      	ands	r2, r3
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	2303      	movs	r3, #3
 8001472:	4003      	ands	r3, r0
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	001c      	movs	r4, r3
 8001480:	230f      	movs	r3, #15
 8001482:	4023      	ands	r3, r4
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	430a      	orrs	r2, r1
 800148a:	3306      	adds	r3, #6
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	18c3      	adds	r3, r0, r3
 8001490:	3304      	adds	r3, #4
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b003      	add	sp, #12
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	045b      	lsls	r3, r3, #17
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d301      	bcc.n	80014bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b8:	2301      	movs	r3, #1
 80014ba:	e010      	b.n	80014de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <SysTick_Config+0x44>)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	3a01      	subs	r2, #1
 80014c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c4:	2301      	movs	r3, #1
 80014c6:	425b      	negs	r3, r3
 80014c8:	2103      	movs	r1, #3
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff ff7c 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x44>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x44>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	210f      	movs	r1, #15
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	187b      	adds	r3, r7, r1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b004      	add	sp, #16
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	0002      	movs	r2, r0
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b25b      	sxtb	r3, r3
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ff33 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ffaf 	bl	80014a4 <SysTick_Config>
 8001546:	0003      	movs	r3, r0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2221      	movs	r2, #33	; 0x21
 800155c:	5c9b      	ldrb	r3, [r3, r2]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e020      	b.n	80015b8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	210e      	movs	r1, #14
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	2101      	movs	r1, #1
 80015a0:	4091      	lsls	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2221      	movs	r2, #33	; 0x21
 80015aa:	2101      	movs	r1, #1
 80015ac:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	210f      	movs	r1, #15
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2221      	movs	r2, #33	; 0x21
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d006      	beq.n	80015ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e028      	b.n	800163c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	210e      	movs	r1, #14
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	2101      	movs	r1, #1
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2221      	movs	r2, #33	; 0x21
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	0010      	movs	r0, r2
 800163a:	4798      	blx	r3
    } 
  }
  return status;
 800163c:	230f      	movs	r3, #15
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	781b      	ldrb	r3, [r3, #0]
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b004      	add	sp, #16
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e14f      	b.n	80018fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4091      	lsls	r1, r2
 8001666:	000a      	movs	r2, r1
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d100      	bne.n	8001674 <HAL_GPIO_Init+0x28>
 8001672:	e140      	b.n	80018f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001688:	2b02      	cmp	r3, #2
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	409a      	lsls	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	2201      	movs	r2, #1
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d017      	beq.n	800172a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2203      	movs	r2, #3
 8001730:	4013      	ands	r3, r2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d123      	bne.n	800177e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	58d3      	ldr	r3, [r2, r3]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2207      	movs	r2, #7
 8001748:	4013      	ands	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	43da      	mvns	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2107      	movs	r1, #7
 8001762:	400b      	ands	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	401a      	ands	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	23c0      	movs	r3, #192	; 0xc0
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d100      	bne.n	80017c0 <HAL_GPIO_Init+0x174>
 80017be:	e09a      	b.n	80018f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	4b54      	ldr	r3, [pc, #336]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4013      	ands	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d8:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	589b      	ldr	r3, [r3, r2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2203      	movs	r2, #3
 80017ea:	4013      	ands	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	2390      	movs	r3, #144	; 0x90
 8001800:	05db      	lsls	r3, r3, #23
 8001802:	429a      	cmp	r2, r3
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x1e2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x1de>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a43      	ldr	r2, [pc, #268]	; (8001920 <HAL_GPIO_Init+0x2d4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x1da>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a42      	ldr	r2, [pc, #264]	; (8001924 <HAL_GPIO_Init+0x2d8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x1d6>
 800181e:	2303      	movs	r3, #3
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x1e4>
 8001822:	2305      	movs	r3, #5
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x1e4>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x1e4>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x1e4>
 800182e:	2300      	movs	r3, #0
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	2103      	movs	r1, #3
 8001834:	400a      	ands	r2, r1
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4013      	ands	r3, r2
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	035b      	lsls	r3, r3, #13
 80018ba:	4013      	ands	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	4013      	ands	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	40da      	lsrs	r2, r3
 8001904:	1e13      	subs	r3, r2, #0
 8001906:	d000      	beq.n	800190a <HAL_GPIO_Init+0x2be>
 8001908:	e6a8      	b.n	800165c <HAL_GPIO_Init+0x10>
  } 
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	48000400 	.word	0x48000400
 8001920:	48000800 	.word	0x48000800
 8001924:	48000c00 	.word	0x48000c00
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	0008      	movs	r0, r1
 8001936:	0011      	movs	r1, r2
 8001938:	1cbb      	adds	r3, r7, #2
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	1c7b      	adds	r3, r7, #1
 8001940:	1c0a      	adds	r2, r1, #0
 8001942:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001944:	1c7b      	adds	r3, r7, #1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194c:	1cbb      	adds	r3, r7, #2
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	881a      	ldrh	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	000a      	movs	r2, r1
 8001970:	1cbb      	adds	r3, r7, #2
 8001972:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	1cb9      	adds	r1, r7, #2
 800198a:	8809      	ldrh	r1, [r1, #0]
 800198c:	400b      	ands	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e301      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x1e>
 80019b8:	e08d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ba:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d00e      	beq.n	80019e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	4bc0      	ldr	r3, [pc, #768]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	220c      	movs	r2, #12
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
 80019d2:	4bbd      	ldr	r3, [pc, #756]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	401a      	ands	r2, r3
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4bb8      	ldr	r3, [pc, #736]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x56>
 80019f0:	e070      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d000      	beq.n	80019fc <HAL_RCC_OscConfig+0x60>
 80019fa:	e06b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2d8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x7c>
 8001a08:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4bae      	ldr	r3, [pc, #696]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e02f      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x9e>
 8001a20:	4ba9      	ldr	r3, [pc, #676]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4ba8      	ldr	r3, [pc, #672]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	49a9      	ldr	r1, [pc, #676]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4ba5      	ldr	r3, [pc, #660]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	49a7      	ldr	r1, [pc, #668]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e01e      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0xc4>
 8001a42:	4ba1      	ldr	r3, [pc, #644]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	02c9      	lsls	r1, r1, #11
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0249      	lsls	r1, r1, #9
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	4999      	ldr	r1, [pc, #612]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	4997      	ldr	r1, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc7e 	bl	8001380 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fc79 	bl	8001380 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e28a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0xee>
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fc69 	bl	8001380 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc64 	bl	8001380 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e275      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x118>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x146>
 8001ae0:	e069      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d00b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d11c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
 8001af8:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	4013      	ands	r3, r2
 8001b02:	d116      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	22f8      	movs	r2, #248	; 0xf8
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00da      	lsls	r2, r3, #3
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b30:	e041      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d024      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc1b 	bl	8001380 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc16 	bl	8001380 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e227      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f1      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	22f8      	movs	r2, #248	; 0xf8
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00da      	lsls	r2, r3, #3
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fbf6 	bl	8001380 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fbf1 	bl	8001380 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e202      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f1      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d019      	beq.n	8001bfc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fbd4 	bl	8001380 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fbcf 	bl	8001380 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1e0      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f1      	beq.n	8001bde <HAL_RCC_OscConfig+0x242>
 8001bfa:	e018      	b.n	8001c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	438a      	bics	r2, r1
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff fbba 	bl	8001380 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff fbb5 	bl	8001380 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1c6      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f1      	bne.n	8001c12 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2204      	movs	r2, #4
 8001c34:	4013      	ands	r3, r2
 8001c36:	d100      	bne.n	8001c3a <HAL_RCC_OscConfig+0x29e>
 8001c38:	e0b4      	b.n	8001da4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	055b      	lsls	r3, r3, #21
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d110      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0549      	lsls	r1, r1, #21
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d11a      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0049      	lsls	r1, r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb79 	bl	8001380 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c94:	f7ff fb74 	bl	8001380 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e185      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x33c>
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	e035      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x35e>
 8001ce0:	4bb6      	ldr	r3, [pc, #728]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4bb5      	ldr	r3, [pc, #724]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
 8001cec:	4bb3      	ldr	r3, [pc, #716]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	4bb2      	ldr	r3, [pc, #712]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	621a      	str	r2, [r3, #32]
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x380>
 8001d02:	4bae      	ldr	r3, [pc, #696]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	4bad      	ldr	r3, [pc, #692]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d08:	2104      	movs	r1, #4
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]
 8001d0e:	4bab      	ldr	r3, [pc, #684]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	4baa      	ldr	r3, [pc, #680]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	621a      	str	r2, [r3, #32]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001d1c:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
 8001d28:	4ba4      	ldr	r3, [pc, #656]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2e:	2104      	movs	r1, #4
 8001d30:	438a      	bics	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d014      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fb20 	bl	8001380 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb1b 	bl	8001380 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a9b      	ldr	r2, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e12b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b98      	ldr	r3, [pc, #608]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fb0b 	bl	8001380 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb06 	bl	8001380 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4a91      	ldr	r2, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e116      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8e:	231f      	movs	r3, #31
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9e:	4989      	ldr	r1, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x628>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	4013      	ands	r3, r2
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dba:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fad7 	bl	8001380 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dd8:	f7ff fad2 	bl	8001380 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0e3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dea:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f1      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	22f8      	movs	r2, #248	; 0xf8
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	00da      	lsls	r2, r3, #3
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0a:	e034      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	3305      	adds	r3, #5
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	22f8      	movs	r2, #248	; 0xf8
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	00da      	lsls	r2, r3, #3
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa96 	bl	8001380 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e5a:	f7ff fa91 	bl	8001380 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0a2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4e4>
 8001e7e:	e097      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4f2>
 8001e8c:	e06b      	b.n	8001f66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d14c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e9c:	494a      	ldr	r1, [pc, #296]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fa6d 	bl	8001380 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fa68 	bl	8001380 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e079      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	049b      	lsls	r3, r3, #18
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	220f      	movs	r2, #15
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_RCC_OscConfig+0x630>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0449      	lsls	r1, r1, #17
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa3b 	bl	8001380 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fa36 	bl	8001380 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e047      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	049b      	lsls	r3, r3, #18
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x574>
 8001f2e:	e03f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f36:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fa20 	bl	8001380 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa1b 	bl	8001380 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e02c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	049b      	lsls	r3, r3, #18
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5aa>
 8001f64:	e024      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	220f      	movs	r2, #15
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	23f0      	movs	r3, #240	; 0xf0
 8001fa0:	039b      	lsls	r3, r3, #14
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	efffffff 	.word	0xefffffff
 8001fc8:	feffffff 	.word	0xfeffffff
 8001fcc:	ffc2ffff 	.word	0xffc2ffff

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b3      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d911      	bls.n	8002016 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e09a      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d015      	beq.n	800204c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	d006      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002030:	21e0      	movs	r1, #224	; 0xe0
 8002032:	00c9      	lsls	r1, r1, #3
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d114      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06e      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d108      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e062      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e05b      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	4393      	bics	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff f96a 	bl	8001380 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7ff f965 	bl	8001380 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x18c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e042      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	220c      	movs	r2, #12
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ec      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d211      	bcs.n	800210a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e020      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x190>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002128:	f000 f820 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800212c:	0001      	movs	r1, r0
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	220f      	movs	r2, #15
 8002136:	4013      	ands	r3, r2
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x194>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	000a      	movs	r2, r1
 800213e:	40da      	lsrs	r2, r3
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x198>)
 8002142:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002144:	2003      	movs	r0, #3
 8002146:	f7ff f8d5 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	00001388 	.word	0x00001388
 8002160:	fffff8ff 	.word	0xfffff8ff
 8002164:	08005308 	.word	0x08005308
 8002168:	2000008c 	.word	0x2000008c

0800216c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08f      	sub	sp, #60	; 0x3c
 8002170:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002172:	2314      	movs	r3, #20
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002178:	ca13      	ldmia	r2!, {r0, r1, r4}
 800217a:	c313      	stmia	r3!, {r0, r1, r4}
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002186:	c313      	stmia	r3!, {r0, r1, r4}
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
 8002194:	2300      	movs	r3, #0
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d002      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x50>
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ba:	e02d      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	220f      	movs	r2, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	2214      	movs	r2, #20
 80021c6:	18ba      	adds	r2, r7, r2
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e8:	f7fd ffa0 	bl	800012c <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4353      	muls	r3, r2
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
 80021f6:	e009      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	000a      	movs	r2, r1
 80021fc:	0152      	lsls	r2, r2, #5
 80021fe:	1a52      	subs	r2, r2, r1
 8002200:	0193      	lsls	r3, r2, #6
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	185b      	adds	r3, r3, r1
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b00f      	add	sp, #60	; 0x3c
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	080052dc 	.word	0x080052dc
 8002228:	080052ec 	.word	0x080052ec
 800222c:	40021000 	.word	0x40021000
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	2000008c 	.word	0x2000008c

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	0001      	movs	r1, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	2207      	movs	r2, #7
 800225e:	4013      	ands	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	40d9      	lsrs	r1, r3
 8002266:	000b      	movs	r3, r1
}    
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	08005318 	.word	0x08005318

08002278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	; 0x3d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	; 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe feeb 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	; 0x3d
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fb61 	bl	8002980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	; 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2242      	movs	r2, #66	; 0x42
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2243      	movs	r2, #67	; 0x43
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2244      	movs	r2, #68	; 0x44
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2245      	movs	r2, #69	; 0x45
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	; 0x3d
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223d      	movs	r2, #61	; 0x3d
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e035      	b.n	800239c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	223d      	movs	r2, #61	; 0x3d
 8002334:	2102      	movs	r1, #2
 8002336:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_TIM_Base_Start_IT+0x8c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_TIM_Base_Start_IT+0x4e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_TIM_Base_Start_IT+0x90>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_TIM_Base_Start_IT+0x4e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_TIM_Base_Start_IT+0x94>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d111      	bne.n	800238a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2207      	movs	r2, #7
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b06      	cmp	r3, #6
 8002376:	d010      	beq.n	800239a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	e007      	b.n	800239a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b004      	add	sp, #16
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40014000 	.word	0x40014000

080023b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_TIM_Base_Stop_IT+0x54>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	d10d      	bne.n	80023f0 <HAL_TIM_Base_Stop_IT+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <HAL_TIM_Base_Stop_IT+0x58>)
 80023dc:	4013      	ands	r3, r2
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_Base_Stop_IT+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	223d      	movs	r2, #61	; 0x3d
 80023f4:	2101      	movs	r1, #1
 80023f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	00001111 	.word	0x00001111
 8002408:	00000444 	.word	0x00000444

0800240c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e042      	b.n	80024a4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223d      	movs	r2, #61	; 0x3d
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223c      	movs	r2, #60	; 0x3c
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f839 	bl	80024ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223d      	movs	r2, #61	; 0x3d
 800243e:	2102      	movs	r1, #2
 8002440:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f000 fa97 	bl	8002980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2246      	movs	r2, #70	; 0x46
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223e      	movs	r2, #62	; 0x3e
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223f      	movs	r2, #63	; 0x3f
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2241      	movs	r2, #65	; 0x41
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2242      	movs	r2, #66	; 0x42
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2243      	movs	r2, #67	; 0x43
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2244      	movs	r2, #68	; 0x44
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2245      	movs	r2, #69	; 0x45
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223d      	movs	r2, #61	; 0x3d
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d124      	bne.n	800251c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11d      	bne.n	800251c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2203      	movs	r2, #3
 80024e6:	4252      	negs	r2, r2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2203      	movs	r2, #3
 80024f8:	4013      	ands	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa26 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002504:	e007      	b.n	8002516 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fa19 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 fa25 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2204      	movs	r2, #4
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d125      	bne.n	8002576 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2204      	movs	r2, #4
 8002532:	4013      	ands	r3, r2
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11e      	bne.n	8002576 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2205      	movs	r2, #5
 800253e:	4252      	negs	r2, r2
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f9f9 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 800255e:	e007      	b.n	8002570 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f9ec 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f9f8 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	2b08      	cmp	r3, #8
 8002582:	d124      	bne.n	80025ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2208      	movs	r2, #8
 800258c:	4013      	ands	r3, r2
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11d      	bne.n	80025ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2209      	movs	r2, #9
 8002598:	4252      	negs	r2, r2
 800259a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2203      	movs	r2, #3
 80025aa:	4013      	ands	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f9cd 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f9c0 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 f9cc 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2210      	movs	r2, #16
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d125      	bne.n	8002628 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2210      	movs	r2, #16
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d11e      	bne.n	8002628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2211      	movs	r2, #17
 80025f0:	4252      	negs	r2, r2
 80025f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2208      	movs	r2, #8
 80025f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	23c0      	movs	r3, #192	; 0xc0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f000 f9a0 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002610:	e007      	b.n	8002622 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 f993 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f99f 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10f      	bne.n	8002656 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4252      	negs	r2, r2
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7fd feff 	bl	8000454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	4013      	ands	r3, r2
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d10f      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	4013      	ands	r3, r2
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d108      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2281      	movs	r2, #129	; 0x81
 8002678:	4252      	negs	r2, r2
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fd48 	bl	8003114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	4013      	ands	r3, r2
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d10f      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	4013      	ands	r3, r2
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d108      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2241      	movs	r2, #65	; 0x41
 80026a6:	4252      	negs	r2, r2
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 f95f 	bl	8002970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2220      	movs	r2, #32
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d10f      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d108      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	4252      	negs	r2, r2
 80026d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fd12 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2317      	movs	r3, #23
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	223c      	movs	r2, #60	; 0x3c
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_TIM_OC_ConfigChannel+0x22>
 8002706:	2302      	movs	r3, #2
 8002708:	e042      	b.n	8002790 <HAL_TIM_OC_ConfigChannel+0xa8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	223c      	movs	r2, #60	; 0x3c
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d027      	beq.n	8002768 <HAL_TIM_OC_ConfigChannel+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d82c      	bhi.n	8002778 <HAL_TIM_OC_ConfigChannel+0x90>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d019      	beq.n	8002758 <HAL_TIM_OC_ConfigChannel+0x70>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d826      	bhi.n	8002778 <HAL_TIM_OC_ConfigChannel+0x90>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_TIM_OC_ConfigChannel+0x50>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d008      	beq.n	8002748 <HAL_TIM_OC_ConfigChannel+0x60>
 8002736:	e01f      	b.n	8002778 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 f993 	bl	8002a6c <TIM_OC1_SetConfig>
      break;
 8002746:	e01c      	b.n	8002782 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fa13 	bl	8002b7c <TIM_OC2_SetConfig>
      break;
 8002756:	e014      	b.n	8002782 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	0011      	movs	r1, r2
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fa8f 	bl	8002c84 <TIM_OC3_SetConfig>
      break;
 8002766:	e00c      	b.n	8002782 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fb0d 	bl	8002d90 <TIM_OC4_SetConfig>
      break;
 8002776:	e004      	b.n	8002782 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002778:	2317      	movs	r3, #23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
      break;
 8002780:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	223c      	movs	r2, #60	; 0x3c
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

  return status;
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b006      	add	sp, #24
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	230f      	movs	r3, #15
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223c      	movs	r2, #60	; 0x3c
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_ConfigClockSource+0x20>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0bc      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x19a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	223c      	movs	r2, #60	; 0x3c
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223d      	movs	r2, #61	; 0x3d
 80027c4:	2102      	movs	r1, #2
 80027c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2277      	movs	r2, #119	; 0x77
 80027d4:	4393      	bics	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_TIM_ConfigClockSource+0x1a4>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	0192      	lsls	r2, r2, #6
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d040      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xde>
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0192      	lsls	r2, r2, #6
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d900      	bls.n	80027fe <HAL_TIM_ConfigClockSource+0x66>
 80027fc:	e088      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	0152      	lsls	r2, r2, #5
 8002802:	4293      	cmp	r3, r2
 8002804:	d100      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x70>
 8002806:	e088      	b.n	800291a <HAL_TIM_ConfigClockSource+0x182>
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0152      	lsls	r2, r2, #5
 800280c:	4293      	cmp	r3, r2
 800280e:	d900      	bls.n	8002812 <HAL_TIM_ConfigClockSource+0x7a>
 8002810:	e07e      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 8002812:	2b70      	cmp	r3, #112	; 0x70
 8002814:	d018      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0xb0>
 8002816:	d900      	bls.n	800281a <HAL_TIM_ConfigClockSource+0x82>
 8002818:	e07a      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 800281a:	2b60      	cmp	r3, #96	; 0x60
 800281c:	d04f      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x126>
 800281e:	d900      	bls.n	8002822 <HAL_TIM_ConfigClockSource+0x8a>
 8002820:	e076      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 8002822:	2b50      	cmp	r3, #80	; 0x50
 8002824:	d03b      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x106>
 8002826:	d900      	bls.n	800282a <HAL_TIM_ConfigClockSource+0x92>
 8002828:	e072      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d057      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x146>
 800282e:	d900      	bls.n	8002832 <HAL_TIM_ConfigClockSource+0x9a>
 8002830:	e06e      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 8002832:	2b30      	cmp	r3, #48	; 0x30
 8002834:	d063      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x166>
 8002836:	d86b      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d060      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x166>
 800283c:	d868      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d05d      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x166>
 8002842:	2b10      	cmp	r3, #16
 8002844:	d05b      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x166>
 8002846:	e063      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 fb7e 	bl	8002f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2277      	movs	r2, #119	; 0x77
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e052      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fb67 	bl	8002f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	01c9      	lsls	r1, r1, #7
 8002898:	430a      	orrs	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
      break;
 800289c:	e03e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	001a      	movs	r2, r3
 80028ac:	f000 fada 	bl	8002e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2150      	movs	r1, #80	; 0x50
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 fb34 	bl	8002f24 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e02e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	001a      	movs	r2, r3
 80028cc:	f000 faf8 	bl	8002ec0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2160      	movs	r1, #96	; 0x60
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fb24 	bl	8002f24 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e01e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	001a      	movs	r2, r3
 80028ec:	f000 faba 	bl	8002e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fb14 	bl	8002f24 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e00e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f000 fb0b 	bl	8002f24 <TIM_ITRx_SetConfig>
      break;
 800290e:	e005      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002910:	230f      	movs	r3, #15
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
      break;
 8002918:	e000      	b.n	800291c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800291a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	223d      	movs	r2, #61	; 0x3d
 8002920:	2101      	movs	r1, #1
 8002922:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	223c      	movs	r2, #60	; 0x3c
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

  return status;
 800292c:	230f      	movs	r3, #15
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	781b      	ldrb	r3, [r3, #0]
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	ffff00ff 	.word	0xffff00ff

08002940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <TIM_Base_SetConfig+0xd0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0x20>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <TIM_Base_SetConfig+0xd4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2270      	movs	r2, #112	; 0x70
 80029a4:	4393      	bics	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_Base_SetConfig+0xd0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_Base_SetConfig+0xd4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00f      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <TIM_Base_SetConfig+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00b      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <TIM_Base_SetConfig+0xdc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <TIM_Base_SetConfig+0xe0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d003      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <TIM_Base_SetConfig+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d108      	bne.n	80029f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <TIM_Base_SetConfig+0xe8>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	4393      	bics	r3, r2
 80029fa:	001a      	movs	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <TIM_Base_SetConfig+0xd0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0xba>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <TIM_Base_SetConfig+0xdc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0xba>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <TIM_Base_SetConfig+0xe0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0xba>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <TIM_Base_SetConfig+0xe4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d103      	bne.n	8002a42 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	615a      	str	r2, [r3, #20]
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40002000 	.word	0x40002000
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	fffffcff 	.word	0xfffffcff

08002a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4393      	bics	r3, r2
 8002a7e:	001a      	movs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2270      	movs	r2, #112	; 0x70
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <TIM_OC1_SetConfig+0xf8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_OC1_SetConfig+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <TIM_OC1_SetConfig+0xfc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_OC1_SetConfig+0x76>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <TIM_OC1_SetConfig+0x100>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_OC1_SetConfig+0x76>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <TIM_OC1_SetConfig+0x104>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4393      	bics	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <TIM_OC1_SetConfig+0xf8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <TIM_OC1_SetConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <TIM_OC1_SetConfig+0xfc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_OC1_SetConfig+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <TIM_OC1_SetConfig+0x100>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_OC1_SetConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <TIM_OC1_SetConfig+0x104>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d111      	bne.n	8002b40 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <TIM_OC1_SetConfig+0x108>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <TIM_OC1_SetConfig+0x10c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b006      	add	sp, #24
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40014400 	.word	0x40014400
 8002b70:	40014800 	.word	0x40014800
 8002b74:	fffffeff 	.word	0xfffffeff
 8002b78:	fffffdff 	.word	0xfffffdff

08002b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	001a      	movs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <TIM_OC2_SetConfig+0xe8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <TIM_OC2_SetConfig+0xec>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <TIM_OC2_SetConfig+0xf0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10d      	bne.n	8002bfa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	4393      	bics	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <TIM_OC2_SetConfig+0xf0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_OC2_SetConfig+0x9e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <TIM_OC2_SetConfig+0xf4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_OC2_SetConfig+0x9e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <TIM_OC2_SetConfig+0xf8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_OC2_SetConfig+0x9e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <TIM_OC2_SetConfig+0xfc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <TIM_OC2_SetConfig+0x100>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <TIM_OC2_SetConfig+0x104>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	ffff8fff 	.word	0xffff8fff
 8002c68:	fffffcff 	.word	0xfffffcff
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800
 8002c7c:	fffffbff 	.word	0xfffffbff
 8002c80:	fffff7ff 	.word	0xfffff7ff

08002c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a35      	ldr	r2, [pc, #212]	; (8002d68 <TIM_OC3_SetConfig+0xe4>)
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2270      	movs	r2, #112	; 0x70
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	4393      	bics	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <TIM_OC3_SetConfig+0xe8>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <TIM_OC3_SetConfig+0xec>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10d      	bne.n	8002cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <TIM_OC3_SetConfig+0xf0>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <TIM_OC3_SetConfig+0xf4>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <TIM_OC3_SetConfig+0xec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_OC3_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <TIM_OC3_SetConfig+0xf8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_OC3_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <TIM_OC3_SetConfig+0xfc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_OC3_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <TIM_OC3_SetConfig+0x100>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d113      	bne.n	8002d46 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <TIM_OC3_SetConfig+0x104>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_OC3_SetConfig+0x108>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	621a      	str	r2, [r3, #32]
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b006      	add	sp, #24
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	fffffeff 	.word	0xfffffeff
 8002d6c:	fffffdff 	.word	0xfffffdff
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	fffff7ff 	.word	0xfffff7ff
 8002d78:	fffffbff 	.word	0xfffffbff
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	ffffefff 	.word	0xffffefff
 8002d8c:	ffffdfff 	.word	0xffffdfff

08002d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_OC4_SetConfig+0xb0>)
 8002da0:	401a      	ands	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <TIM_OC4_SetConfig+0xb4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <TIM_OC4_SetConfig+0xb8>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <TIM_OC4_SetConfig+0xbc>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	031b      	lsls	r3, r3, #12
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <TIM_OC4_SetConfig+0xc0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_OC4_SetConfig+0x78>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <TIM_OC4_SetConfig+0xc4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_OC4_SetConfig+0x78>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <TIM_OC4_SetConfig+0xc8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_OC4_SetConfig+0x78>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <TIM_OC4_SetConfig+0xcc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d109      	bne.n	8002e1c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <TIM_OC4_SetConfig+0xd0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	ffffefff 	.word	0xffffefff
 8002e44:	ffff8fff 	.word	0xffff8fff
 8002e48:	fffffcff 	.word	0xfffffcff
 8002e4c:	ffffdfff 	.word	0xffffdfff
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800
 8002e60:	ffffbfff 	.word	0xffffbfff

08002e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	001a      	movs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	22f0      	movs	r2, #240	; 0xf0
 8002e8e:	4393      	bics	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b006      	add	sp, #24
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <TIM_TI2_ConfigInputStage+0x60>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	22a0      	movs	r2, #160	; 0xa0
 8002efc:	4393      	bics	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	ffff0fff 	.word	0xffff0fff

08002f24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2270      	movs	r2, #112	; 0x70
 8002f38:	4393      	bics	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	2207      	movs	r2, #7
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <TIM_ETR_SetConfig+0x3c>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	021a      	lsls	r2, r3, #8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b006      	add	sp, #24
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	ffff00ff 	.word	0xffff00ff

08002f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	223c      	movs	r2, #60	; 0x3c
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e041      	b.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223c      	movs	r2, #60	; 0x3c
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223d      	movs	r2, #61	; 0x3d
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2270      	movs	r2, #112	; 0x70
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a10      	ldr	r2, [pc, #64]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10c      	bne.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	4393      	bics	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223d      	movs	r2, #61	; 0x3d
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223c      	movs	r2, #60	; 0x3c
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40014000 	.word	0x40014000

08003048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223c      	movs	r2, #60	; 0x3c
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e03e      	b.n	80030e2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	223c      	movs	r2, #60	; 0x3c
 8003068:	2101      	movs	r1, #1
 800306a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	4393      	bics	r3, r2
 8003072:	001a      	movs	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003080:	401a      	ands	r2, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800308e:	401a      	ands	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800309c:	401a      	ands	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80030aa:	401a      	ands	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80030b8:	401a      	ands	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80030c6:	401a      	ands	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	223c      	movs	r2, #60	; 0x3c
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	fffffcff 	.word	0xfffffcff
 80030f0:	fffffbff 	.word	0xfffffbff
 80030f4:	fffff7ff 	.word	0xfffff7ff
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	ffffbfff 	.word	0xffffbfff

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e044      	b.n	80031c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2274      	movs	r2, #116	; 0x74
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f7fd ffc7 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fbee 	bl	8003948 <UART_SetConfig>
 800316c:	0003      	movs	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e024      	b.n	80031c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 fd21 	bl	8003bc8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	490d      	ldr	r1, [pc, #52]	; (80031c8 <HAL_UART_Init+0xa4>)
 8003192:	400a      	ands	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2108      	movs	r1, #8
 80031a2:	438a      	bics	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 fdb9 	bl	8003d30 <UART_CheckIdleState>
 80031be:	0003      	movs	r3, r0
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	fffff7ff 	.word	0xfffff7ff

080031cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	1dbb      	adds	r3, r7, #6
 80031d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d000      	beq.n	80031e4 <HAL_UART_Transmit_IT+0x18>
 80031e2:	e06a      	b.n	80032ba <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_UART_Transmit_IT+0x26>
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e062      	b.n	80032bc <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	015b      	lsls	r3, r3, #5
 80031fe:	429a      	cmp	r2, r3
 8003200:	d109      	bne.n	8003216 <HAL_UART_Transmit_IT+0x4a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	d001      	beq.n	8003216 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e052      	b.n	80032bc <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2274      	movs	r2, #116	; 0x74
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_UART_Transmit_IT+0x58>
 8003220:	2302      	movs	r3, #2
 8003222:	e04b      	b.n	80032bc <HAL_UART_Transmit_IT+0xf0>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2274      	movs	r2, #116	; 0x74
 8003228:	2101      	movs	r1, #1
 800322a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1dba      	adds	r2, r7, #6
 8003236:	2150      	movs	r1, #80	; 0x50
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1dba      	adds	r2, r7, #6
 8003240:	2152      	movs	r1, #82	; 0x52
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	2100      	movs	r1, #0
 8003252:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	015b      	lsls	r3, r3, #5
 8003262:	429a      	cmp	r2, r3
 8003264:	d107      	bne.n	8003276 <HAL_UART_Transmit_IT+0xaa>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_UART_Transmit_IT+0xf8>)
 8003272:	669a      	str	r2, [r3, #104]	; 0x68
 8003274:	e002      	b.n	800327c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_UART_Transmit_IT+0xfc>)
 800327a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2274      	movs	r2, #116	; 0x74
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003284:	f3ef 8310 	mrs	r3, PRIMASK
 8003288:	613b      	str	r3, [r7, #16]
  return(result);
 800328a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f383 8810 	msr	PRIMASK, r3
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b008      	add	sp, #32
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08004227 	.word	0x08004227
 80032c8:	08004173 	.word	0x08004173

080032cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	1dbb      	adds	r3, r7, #6
 80032d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d150      	bne.n	8003384 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_UART_Receive_IT+0x24>
 80032e8:	1dbb      	adds	r3, r7, #6
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e048      	b.n	8003386 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	015b      	lsls	r3, r3, #5
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d109      	bne.n	8003314 <HAL_UART_Receive_IT+0x48>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d001      	beq.n	8003314 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e038      	b.n	8003386 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2274      	movs	r2, #116	; 0x74
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_UART_Receive_IT+0x56>
 800331e:	2302      	movs	r3, #2
 8003320:	e031      	b.n	8003386 <HAL_UART_Receive_IT+0xba>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2274      	movs	r2, #116	; 0x74
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	4013      	ands	r3, r2
 800333c:	d019      	beq.n	8003372 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333e:	f3ef 8310 	mrs	r3, PRIMASK
 8003342:	613b      	str	r3, [r7, #16]
  return(result);
 8003344:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	04c9      	lsls	r1, r1, #19
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0018      	movs	r0, r3
 800337c:	f000 fde4 	bl	8003f48 <UART_Start_Receive_IT>
 8003380:	0003      	movs	r3, r0
 8003382:	e000      	b.n	8003386 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b008      	add	sp, #32
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b0ab      	sub	sp, #172	; 0xac
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	22a4      	movs	r2, #164	; 0xa4
 80033a0:	18b9      	adds	r1, r7, r2
 80033a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	20a0      	movs	r0, #160	; 0xa0
 80033ac:	1839      	adds	r1, r7, r0
 80033ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	219c      	movs	r1, #156	; 0x9c
 80033b8:	1879      	adds	r1, r7, r1
 80033ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033bc:	0011      	movs	r1, r2
 80033be:	18bb      	adds	r3, r7, r2
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a99      	ldr	r2, [pc, #612]	; (8003628 <HAL_UART_IRQHandler+0x298>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	2298      	movs	r2, #152	; 0x98
 80033c8:	18bc      	adds	r4, r7, r2
 80033ca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80033cc:	18bb      	adds	r3, r7, r2
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d114      	bne.n	80033fe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2220      	movs	r2, #32
 80033da:	4013      	ands	r3, r2
 80033dc:	d00f      	beq.n	80033fe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033de:	183b      	adds	r3, r7, r0
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2220      	movs	r2, #32
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00a      	beq.n	80033fe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d100      	bne.n	80033f2 <HAL_UART_IRQHandler+0x62>
 80033f0:	e27e      	b.n	80038f0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	0010      	movs	r0, r2
 80033fa:	4798      	blx	r3
      }
      return;
 80033fc:	e278      	b.n	80038f0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033fe:	2398      	movs	r3, #152	; 0x98
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d100      	bne.n	800340a <HAL_UART_IRQHandler+0x7a>
 8003408:	e114      	b.n	8003634 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800340a:	239c      	movs	r3, #156	; 0x9c
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	4013      	ands	r3, r2
 8003414:	d106      	bne.n	8003424 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a83      	ldr	r2, [pc, #524]	; (800362c <HAL_UART_IRQHandler+0x29c>)
 800341e:	4013      	ands	r3, r2
 8003420:	d100      	bne.n	8003424 <HAL_UART_IRQHandler+0x94>
 8003422:	e107      	b.n	8003634 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003424:	23a4      	movs	r3, #164	; 0xa4
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2201      	movs	r2, #1
 800342c:	4013      	ands	r3, r2
 800342e:	d012      	beq.n	8003456 <HAL_UART_IRQHandler+0xc6>
 8003430:	23a0      	movs	r3, #160	; 0xa0
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4013      	ands	r3, r2
 800343c:	d00b      	beq.n	8003456 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	589b      	ldr	r3, [r3, r2]
 800344c:	2201      	movs	r2, #1
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003456:	23a4      	movs	r3, #164	; 0xa4
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2202      	movs	r2, #2
 800345e:	4013      	ands	r3, r2
 8003460:	d011      	beq.n	8003486 <HAL_UART_IRQHandler+0xf6>
 8003462:	239c      	movs	r3, #156	; 0x9c
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	d00b      	beq.n	8003486 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2202      	movs	r2, #2
 8003474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	589b      	ldr	r3, [r3, r2]
 800347c:	2204      	movs	r2, #4
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003486:	23a4      	movs	r3, #164	; 0xa4
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2204      	movs	r2, #4
 800348e:	4013      	ands	r3, r2
 8003490:	d011      	beq.n	80034b6 <HAL_UART_IRQHandler+0x126>
 8003492:	239c      	movs	r3, #156	; 0x9c
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d00b      	beq.n	80034b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	589b      	ldr	r3, [r3, r2]
 80034ac:	2202      	movs	r2, #2
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034b6:	23a4      	movs	r3, #164	; 0xa4
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	4013      	ands	r3, r2
 80034c0:	d017      	beq.n	80034f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034c2:	23a0      	movs	r3, #160	; 0xa0
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2220      	movs	r2, #32
 80034ca:	4013      	ands	r3, r2
 80034cc:	d105      	bne.n	80034da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034ce:	239c      	movs	r3, #156	; 0x9c
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2208      	movs	r2, #8
 80034e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	589b      	ldr	r3, [r3, r2]
 80034e8:	2208      	movs	r2, #8
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034f2:	23a4      	movs	r3, #164	; 0xa4
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_UART_IRQHandler+0x198>
 8003500:	23a0      	movs	r3, #160	; 0xa0
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	04db      	lsls	r3, r3, #19
 800350a:	4013      	ands	r3, r2
 800350c:	d00c      	beq.n	8003528 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	589b      	ldr	r3, [r3, r2]
 800351e:	2220      	movs	r2, #32
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	589b      	ldr	r3, [r3, r2]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_UART_IRQHandler+0x1a4>
 8003532:	e1df      	b.n	80038f4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003534:	23a4      	movs	r3, #164	; 0xa4
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2220      	movs	r2, #32
 800353c:	4013      	ands	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003540:	23a0      	movs	r3, #160	; 0xa0
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2220      	movs	r2, #32
 8003548:	4013      	ands	r3, r2
 800354a:	d008      	beq.n	800355e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	0010      	movs	r0, r2
 800355c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	589b      	ldr	r3, [r3, r2]
 8003564:	2194      	movs	r1, #148	; 0x94
 8003566:	187a      	adds	r2, r7, r1
 8003568:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	4013      	ands	r3, r2
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d004      	beq.n	8003582 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003578:	187b      	adds	r3, r7, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2228      	movs	r2, #40	; 0x28
 800357e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003580:	d047      	beq.n	8003612 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fd7b 	bl	8004080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	4013      	ands	r3, r2
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d137      	bne.n	8003608 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800359e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a0:	2090      	movs	r0, #144	; 0x90
 80035a2:	183a      	adds	r2, r7, r0
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	438a      	bics	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	183b      	adds	r3, r7, r0
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <HAL_UART_IRQHandler+0x2a0>)
 80035de:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fd ffeb 	bl	80015c0 <HAL_DMA_Abort_IT>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d01a      	beq.n	8003624 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	0018      	movs	r0, r3
 80035fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e012      	b.n	8003624 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f98d 	bl	8003920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003606:	e00d      	b.n	8003624 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0018      	movs	r0, r3
 800360c:	f000 f988 	bl	8003920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e008      	b.n	8003624 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f983 	bl	8003920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	2100      	movs	r1, #0
 8003620:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003622:	e167      	b.n	80038f4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	46c0      	nop			; (mov r8, r8)
    return;
 8003626:	e165      	b.n	80038f4 <HAL_UART_IRQHandler+0x564>
 8003628:	0000080f 	.word	0x0000080f
 800362c:	04000120 	.word	0x04000120
 8003630:	08004145 	.word	0x08004145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	2b01      	cmp	r3, #1
 800363a:	d000      	beq.n	800363e <HAL_UART_IRQHandler+0x2ae>
 800363c:	e131      	b.n	80038a2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800363e:	23a4      	movs	r3, #164	; 0xa4
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	4013      	ands	r3, r2
 8003648:	d100      	bne.n	800364c <HAL_UART_IRQHandler+0x2bc>
 800364a:	e12a      	b.n	80038a2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800364c:	23a0      	movs	r3, #160	; 0xa0
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2210      	movs	r2, #16
 8003654:	4013      	ands	r3, r2
 8003656:	d100      	bne.n	800365a <HAL_UART_IRQHandler+0x2ca>
 8003658:	e123      	b.n	80038a2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2210      	movs	r2, #16
 8003660:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	4013      	ands	r3, r2
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d000      	beq.n	8003672 <HAL_UART_IRQHandler+0x2e2>
 8003670:	e09b      	b.n	80037aa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	217e      	movs	r1, #126	; 0x7e
 800367c:	187b      	adds	r3, r7, r1
 800367e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003680:	187b      	adds	r3, r7, r1
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d100      	bne.n	800368a <HAL_UART_IRQHandler+0x2fa>
 8003688:	e136      	b.n	80038f8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2258      	movs	r2, #88	; 0x58
 800368e:	5a9b      	ldrh	r3, [r3, r2]
 8003690:	187a      	adds	r2, r7, r1
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d300      	bcc.n	800369a <HAL_UART_IRQHandler+0x30a>
 8003698:	e12e      	b.n	80038f8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	187a      	adds	r2, r7, r1
 800369e:	215a      	movs	r1, #90	; 0x5a
 80036a0:	8812      	ldrh	r2, [r2, #0]
 80036a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d06e      	beq.n	800378c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80036b8:	2301      	movs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	498e      	ldr	r1, [pc, #568]	; (8003908 <HAL_UART_IRQHandler+0x578>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e0:	f3ef 8310 	mrs	r3, PRIMASK
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	677b      	str	r3, [r7, #116]	; 0x74
 80036ea:	2301      	movs	r3, #1
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	438a      	bics	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003712:	f3ef 8310 	mrs	r3, PRIMASK
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003718:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	673b      	str	r3, [r7, #112]	; 0x70
 800371c:	2301      	movs	r3, #1
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	438a      	bics	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003750:	f3ef 8310 	mrs	r3, PRIMASK
 8003754:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003756:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375a:	2301      	movs	r3, #1
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003760:	f383 8810 	msr	PRIMASK, r3
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2110      	movs	r1, #16
 8003772:	438a      	bics	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	0018      	movs	r0, r3
 8003788:	f7fd fee2 	bl	8001550 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2258      	movs	r2, #88	; 0x58
 8003790:	5a9a      	ldrh	r2, [r3, r2]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	215a      	movs	r1, #90	; 0x5a
 8003796:	5a5b      	ldrh	r3, [r3, r1]
 8003798:	b29b      	uxth	r3, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 f8c4 	bl	8003930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037a8:	e0a6      	b.n	80038f8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2258      	movs	r2, #88	; 0x58
 80037ae:	5a99      	ldrh	r1, [r3, r2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	225a      	movs	r2, #90	; 0x5a
 80037b4:	5a9b      	ldrh	r3, [r3, r2]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	208e      	movs	r0, #142	; 0x8e
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	1a8a      	subs	r2, r1, r2
 80037be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	225a      	movs	r2, #90	; 0x5a
 80037c4:	5a9b      	ldrh	r3, [r3, r2]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d100      	bne.n	80037ce <HAL_UART_IRQHandler+0x43e>
 80037cc:	e096      	b.n	80038fc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d100      	bne.n	80037d8 <HAL_UART_IRQHandler+0x448>
 80037d6:	e091      	b.n	80038fc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d8:	f3ef 8310 	mrs	r3, PRIMASK
 80037dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80037de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e0:	2488      	movs	r4, #136	; 0x88
 80037e2:	193a      	adds	r2, r7, r4
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	2301      	movs	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4943      	ldr	r1, [pc, #268]	; (800390c <HAL_UART_IRQHandler+0x57c>)
 80037fe:	400a      	ands	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	193b      	adds	r3, r7, r4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003810:	f3ef 8310 	mrs	r3, PRIMASK
 8003814:	61bb      	str	r3, [r7, #24]
  return(result);
 8003816:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	2484      	movs	r4, #132	; 0x84
 800381a:	193a      	adds	r2, r7, r4
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	2301      	movs	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f383 8810 	msr	PRIMASK, r3
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	438a      	bics	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	193b      	adds	r3, r7, r4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385a:	f3ef 8310 	mrs	r3, PRIMASK
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003862:	2480      	movs	r4, #128	; 0x80
 8003864:	193a      	adds	r2, r7, r4
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	2301      	movs	r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	f383 8810 	msr	PRIMASK, r3
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2110      	movs	r1, #16
 8003880:	438a      	bics	r2, r1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	193b      	adds	r3, r7, r4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003892:	183b      	adds	r3, r7, r0
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0011      	movs	r1, r2
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f848 	bl	8003930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038a0:	e02c      	b.n	80038fc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038a2:	23a4      	movs	r3, #164	; 0xa4
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00f      	beq.n	80038ce <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038ae:	23a0      	movs	r3, #160	; 0xa0
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	4013      	ands	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01e      	beq.n	8003900 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	0010      	movs	r0, r2
 80038ca:	4798      	blx	r3
    }
    return;
 80038cc:	e018      	b.n	8003900 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038ce:	23a4      	movs	r3, #164	; 0xa4
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2240      	movs	r2, #64	; 0x40
 80038d6:	4013      	ands	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_UART_IRQHandler+0x572>
 80038da:	23a0      	movs	r3, #160	; 0xa0
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2240      	movs	r2, #64	; 0x40
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fcfa 	bl	80042e2 <UART_EndTransmit_IT>
    return;
 80038ee:	e008      	b.n	8003902 <HAL_UART_IRQHandler+0x572>
      return;
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	e006      	b.n	8003902 <HAL_UART_IRQHandler+0x572>
    return;
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	e004      	b.n	8003902 <HAL_UART_IRQHandler+0x572>
      return;
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	e002      	b.n	8003902 <HAL_UART_IRQHandler+0x572>
      return;
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	e000      	b.n	8003902 <HAL_UART_IRQHandler+0x572>
    return;
 8003900:	46c0      	nop			; (mov r8, r8)
  }

}
 8003902:	46bd      	mov	sp, r7
 8003904:	b02b      	add	sp, #172	; 0xac
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	fffffeff 	.word	0xfffffeff
 800390c:	fffffedf 	.word	0xfffffedf

08003910 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	000a      	movs	r2, r1
 800393a:	1cbb      	adds	r3, r7, #2
 800393c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003950:	231e      	movs	r3, #30
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a8d      	ldr	r2, [pc, #564]	; (8003bac <UART_SetConfig+0x264>)
 8003978:	4013      	ands	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a88      	ldr	r2, [pc, #544]	; (8003bb0 <UART_SetConfig+0x268>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a7f      	ldr	r2, [pc, #508]	; (8003bb4 <UART_SetConfig+0x26c>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7b      	ldr	r2, [pc, #492]	; (8003bb8 <UART_SetConfig+0x270>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d127      	bne.n	8003a1e <UART_SetConfig+0xd6>
 80039ce:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <UART_SetConfig+0x274>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	2203      	movs	r2, #3
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d00d      	beq.n	80039f6 <UART_SetConfig+0xae>
 80039da:	d81b      	bhi.n	8003a14 <UART_SetConfig+0xcc>
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d014      	beq.n	8003a0a <UART_SetConfig+0xc2>
 80039e0:	d818      	bhi.n	8003a14 <UART_SetConfig+0xcc>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <UART_SetConfig+0xa4>
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d00a      	beq.n	8003a00 <UART_SetConfig+0xb8>
 80039ea:	e013      	b.n	8003a14 <UART_SetConfig+0xcc>
 80039ec:	231f      	movs	r3, #31
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e021      	b.n	8003a3a <UART_SetConfig+0xf2>
 80039f6:	231f      	movs	r3, #31
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e01c      	b.n	8003a3a <UART_SetConfig+0xf2>
 8003a00:	231f      	movs	r3, #31
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2204      	movs	r2, #4
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e017      	b.n	8003a3a <UART_SetConfig+0xf2>
 8003a0a:	231f      	movs	r3, #31
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	2208      	movs	r2, #8
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e012      	b.n	8003a3a <UART_SetConfig+0xf2>
 8003a14:	231f      	movs	r3, #31
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2210      	movs	r2, #16
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e00d      	b.n	8003a3a <UART_SetConfig+0xf2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a67      	ldr	r2, [pc, #412]	; (8003bc0 <UART_SetConfig+0x278>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d104      	bne.n	8003a32 <UART_SetConfig+0xea>
 8003a28:	231f      	movs	r3, #31
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e003      	b.n	8003a3a <UART_SetConfig+0xf2>
 8003a32:	231f      	movs	r3, #31
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2210      	movs	r2, #16
 8003a38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d15d      	bne.n	8003b02 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003a46:	231f      	movs	r3, #31
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d015      	beq.n	8003a7c <UART_SetConfig+0x134>
 8003a50:	dc18      	bgt.n	8003a84 <UART_SetConfig+0x13c>
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00d      	beq.n	8003a72 <UART_SetConfig+0x12a>
 8003a56:	dc15      	bgt.n	8003a84 <UART_SetConfig+0x13c>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <UART_SetConfig+0x11a>
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d005      	beq.n	8003a6c <UART_SetConfig+0x124>
 8003a60:	e010      	b.n	8003a84 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7fe fbf3 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
        break;
 8003a6a:	e012      	b.n	8003a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a6c:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <UART_SetConfig+0x27c>)
 8003a6e:	61bb      	str	r3, [r7, #24]
        break;
 8003a70:	e00f      	b.n	8003a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a72:	f7fe fb7b 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8003a76:	0003      	movs	r3, r0
 8003a78:	61bb      	str	r3, [r7, #24]
        break;
 8003a7a:	e00a      	b.n	8003a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	61bb      	str	r3, [r7, #24]
        break;
 8003a82:	e006      	b.n	8003a92 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a88:	231e      	movs	r3, #30
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
        break;
 8003a90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d100      	bne.n	8003a9a <UART_SetConfig+0x152>
 8003a98:	e07b      	b.n	8003b92 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	18d2      	adds	r2, r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	0019      	movs	r1, r3
 8003aac:	0010      	movs	r0, r2
 8003aae:	f7fc fb3d 	bl	800012c <__udivsi3>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	d91c      	bls.n	8003af8 <UART_SetConfig+0x1b0>
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d217      	bcs.n	8003af8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	200e      	movs	r0, #14
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	438a      	bics	r2, r1
 8003ad4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2207      	movs	r2, #7
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b299      	uxth	r1, r3
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	183a      	adds	r2, r7, r0
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	183a      	adds	r2, r7, r0
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e04c      	b.n	8003b92 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003af8:	231e      	movs	r3, #30
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e047      	b.n	8003b92 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b02:	231f      	movs	r3, #31
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d015      	beq.n	8003b38 <UART_SetConfig+0x1f0>
 8003b0c:	dc18      	bgt.n	8003b40 <UART_SetConfig+0x1f8>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d00d      	beq.n	8003b2e <UART_SetConfig+0x1e6>
 8003b12:	dc15      	bgt.n	8003b40 <UART_SetConfig+0x1f8>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <UART_SetConfig+0x1d6>
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d005      	beq.n	8003b28 <UART_SetConfig+0x1e0>
 8003b1c:	e010      	b.n	8003b40 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1e:	f7fe fb95 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003b22:	0003      	movs	r3, r0
 8003b24:	61bb      	str	r3, [r7, #24]
        break;
 8003b26:	e012      	b.n	8003b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <UART_SetConfig+0x27c>)
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e00f      	b.n	8003b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2e:	f7fe fb1d 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8003b32:	0003      	movs	r3, r0
 8003b34:	61bb      	str	r3, [r7, #24]
        break;
 8003b36:	e00a      	b.n	8003b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	61bb      	str	r3, [r7, #24]
        break;
 8003b3e:	e006      	b.n	8003b4e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b44:	231e      	movs	r3, #30
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
        break;
 8003b4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01e      	beq.n	8003b92 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	085a      	lsrs	r2, r3, #1
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	18d2      	adds	r2, r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0019      	movs	r1, r3
 8003b64:	0010      	movs	r0, r2
 8003b66:	f7fc fae1 	bl	800012c <__udivsi3>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d909      	bls.n	8003b8a <UART_SetConfig+0x242>
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	025b      	lsls	r3, r3, #9
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d204      	bcs.n	8003b8a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e003      	b.n	8003b92 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8a:	231e      	movs	r3, #30
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b9e:	231e      	movs	r3, #30
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b008      	add	sp, #32
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	ffff69f3 	.word	0xffff69f3
 8003bb0:	ffffcfff 	.word	0xffffcfff
 8003bb4:	fffff4ff 	.word	0xfffff4ff
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	007a1200 	.word	0x007a1200

08003bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <UART_AdvFeatureConfig+0x144>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <UART_AdvFeatureConfig+0x148>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2204      	movs	r2, #4
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <UART_AdvFeatureConfig+0x14c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <UART_AdvFeatureConfig+0x150>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <UART_AdvFeatureConfig+0x154>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <UART_AdvFeatureConfig+0x158>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <UART_AdvFeatureConfig+0x15c>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	035b      	lsls	r3, r3, #13
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10b      	bne.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <UART_AdvFeatureConfig+0x160>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <UART_AdvFeatureConfig+0x164>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	fffdffff 	.word	0xfffdffff
 8003d10:	fffeffff 	.word	0xfffeffff
 8003d14:	fffbffff 	.word	0xfffbffff
 8003d18:	ffff7fff 	.word	0xffff7fff
 8003d1c:	ffffefff 	.word	0xffffefff
 8003d20:	ffffdfff 	.word	0xffffdfff
 8003d24:	ffefffff 	.word	0xffefffff
 8003d28:	ff9fffff 	.word	0xff9fffff
 8003d2c:	fff7ffff 	.word	0xfff7ffff

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fd fb1e 	bl	8001380 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d10c      	bne.n	8003d70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0391      	lsls	r1, r2, #14
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <UART_CheckIdleState+0x8c>)
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f000 f82c 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e021      	b.n	8003db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d10c      	bne.n	8003d98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	03d1      	lsls	r1, r2, #15
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <UART_CheckIdleState+0x8c>)
 8003d88:	9200      	str	r2, [sp, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f000 f818 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e00d      	b.n	8003db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2274      	movs	r2, #116	; 0x74
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	01ffffff 	.word	0x01ffffff

08003dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b094      	sub	sp, #80	; 0x50
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	e0a3      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d100      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x1a>
 8003dd8:	e09f      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fd fad1 	bl	8001380 <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13d      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	494c      	ldr	r1, [pc, #304]	; (8003f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2274      	movs	r2, #116	; 0x74
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e067      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d050      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	401a      	ands	r2, r3
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d146      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e96:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4923      	ldr	r1, [pc, #140]	; (8003f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ece:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	438a      	bics	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2274      	movs	r2, #116	; 0x74
 8003f12:	2100      	movs	r1, #0
 8003f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e010      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	425a      	negs	r2, r3
 8003f2a:	4153      	adcs	r3, r2
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	001a      	movs	r2, r3
 8003f30:	1dfb      	adds	r3, r7, #7
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d100      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f38:	e74b      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b014      	add	sp, #80	; 0x50
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	fffffe5f 	.word	0xfffffe5f

08003f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1dba      	adds	r2, r7, #6
 8003f60:	2158      	movs	r1, #88	; 0x58
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1dba      	adds	r2, r7, #6
 8003f6a:	215a      	movs	r1, #90	; 0x5a
 8003f6c:	8812      	ldrh	r2, [r2, #0]
 8003f6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	015b      	lsls	r3, r3, #5
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10d      	bne.n	8003f9e <UART_Start_Receive_IT+0x56>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <UART_Start_Receive_IT+0x4c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	225c      	movs	r2, #92	; 0x5c
 8003f8e:	4939      	ldr	r1, [pc, #228]	; (8004074 <UART_Start_Receive_IT+0x12c>)
 8003f90:	5299      	strh	r1, [r3, r2]
 8003f92:	e01a      	b.n	8003fca <UART_Start_Receive_IT+0x82>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	225c      	movs	r2, #92	; 0x5c
 8003f98:	21ff      	movs	r1, #255	; 0xff
 8003f9a:	5299      	strh	r1, [r3, r2]
 8003f9c:	e015      	b.n	8003fca <UART_Start_Receive_IT+0x82>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <UART_Start_Receive_IT+0x7a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <UART_Start_Receive_IT+0x70>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	225c      	movs	r2, #92	; 0x5c
 8003fb2:	21ff      	movs	r1, #255	; 0xff
 8003fb4:	5299      	strh	r1, [r3, r2]
 8003fb6:	e008      	b.n	8003fca <UART_Start_Receive_IT+0x82>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	225c      	movs	r2, #92	; 0x5c
 8003fbc:	217f      	movs	r1, #127	; 0x7f
 8003fbe:	5299      	strh	r1, [r3, r2]
 8003fc0:	e003      	b.n	8003fca <UART_Start_Receive_IT+0x82>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	225c      	movs	r2, #92	; 0x5c
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2222      	movs	r2, #34	; 0x22
 8003fd6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fde:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	015b      	lsls	r3, r3, #5
 8004012:	429a      	cmp	r2, r3
 8004014:	d107      	bne.n	8004026 <UART_Start_Receive_IT+0xde>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <UART_Start_Receive_IT+0x130>)
 8004022:	665a      	str	r2, [r3, #100]	; 0x64
 8004024:	e002      	b.n	800402c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <UART_Start_Receive_IT+0x134>)
 800402a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2274      	movs	r2, #116	; 0x74
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	613b      	str	r3, [r7, #16]
  return(result);
 800403a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2190      	movs	r1, #144	; 0x90
 8004056:	0049      	lsls	r1, r1, #1
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b00c      	add	sp, #48	; 0x30
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	000001ff 	.word	0x000001ff
 8004078:	080044a1 	.word	0x080044a1
 800407c:	08004339 	.word	0x08004339

08004080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004088:	f3ef 8310 	mrs	r3, PRIMASK
 800408c:	617b      	str	r3, [r7, #20]
  return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4925      	ldr	r1, [pc, #148]	; (8004140 <UART_EndRxTransfer+0xc0>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	623b      	str	r3, [r7, #32]
  return(result);
 80040c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	438a      	bics	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d118      	bne.n	8004126 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	2301      	movs	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2110      	movs	r1, #16
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b00e      	add	sp, #56	; 0x38
 800413e:	bd80      	pop	{r7, pc}
 8004140:	fffffedf 	.word	0xfffffedf

08004144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	225a      	movs	r2, #90	; 0x5a
 8004156:	2100      	movs	r1, #0
 8004158:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2252      	movs	r2, #82	; 0x52
 800415e:	2100      	movs	r1, #0
 8004160:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff fbdb 	bl	8003920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}

08004172 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08a      	sub	sp, #40	; 0x28
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417e:	2b21      	cmp	r3, #33	; 0x21
 8004180:	d14d      	bne.n	800421e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2252      	movs	r2, #82	; 0x52
 8004186:	5a9b      	ldrh	r3, [r3, r2]
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d132      	bne.n	80041f4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418e:	f3ef 8310 	mrs	r3, PRIMASK
 8004192:	60bb      	str	r3, [r7, #8]
  return(result);
 8004194:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	2301      	movs	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f383 8810 	msr	PRIMASK, r3
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	438a      	bics	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c0:	f3ef 8310 	mrs	r3, PRIMASK
 80041c4:	617b      	str	r3, [r7, #20]
  return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	2301      	movs	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041f2:	e014      	b.n	800421e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b292      	uxth	r2, r2
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2252      	movs	r2, #82	; 0x52
 8004210:	5a9b      	ldrh	r3, [r3, r2]
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b299      	uxth	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2252      	movs	r2, #82	; 0x52
 800421c:	5299      	strh	r1, [r3, r2]
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b00a      	add	sp, #40	; 0x28
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b08c      	sub	sp, #48	; 0x30
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	2b21      	cmp	r3, #33	; 0x21
 8004234:	d151      	bne.n	80042da <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2252      	movs	r2, #82	; 0x52
 800423a:	5a9b      	ldrh	r3, [r3, r2]
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d132      	bne.n	80042a8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	60fb      	str	r3, [r7, #12]
  return(result);
 8004248:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	438a      	bics	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	61bb      	str	r3, [r7, #24]
  return(result);
 800427a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	2301      	movs	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80042a6:	e018      	b.n	80042da <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	05d2      	lsls	r2, r2, #23
 80042b8:	0dd2      	lsrs	r2, r2, #23
 80042ba:	b292      	uxth	r2, r2
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2252      	movs	r2, #82	; 0x52
 80042cc:	5a9b      	ldrh	r3, [r3, r2]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b299      	uxth	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2252      	movs	r2, #82	; 0x52
 80042d8:	5299      	strh	r1, [r3, r2]
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b00c      	add	sp, #48	; 0x30
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ea:	f3ef 8310 	mrs	r3, PRIMASK
 80042ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	2301      	movs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f383 8810 	msr	PRIMASK, r3
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	438a      	bics	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f383 8810 	msr	PRIMASK, r3
}
 800431a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff faf0 	bl	8003910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b006      	add	sp, #24
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004340:	203e      	movs	r0, #62	; 0x3e
 8004342:	183b      	adds	r3, r7, r0
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	215c      	movs	r1, #92	; 0x5c
 8004348:	5a52      	ldrh	r2, [r2, r1]
 800434a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004350:	2b22      	cmp	r3, #34	; 0x22
 8004352:	d000      	beq.n	8004356 <UART_RxISR_8BIT+0x1e>
 8004354:	e095      	b.n	8004482 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	213c      	movs	r1, #60	; 0x3c
 800435c:	187b      	adds	r3, r7, r1
 800435e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004360:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004362:	187b      	adds	r3, r7, r1
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	183b      	adds	r3, r7, r0
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b2d9      	uxtb	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	400a      	ands	r2, r1
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	225a      	movs	r2, #90	; 0x5a
 8004386:	5a9b      	ldrh	r3, [r3, r2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b299      	uxth	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	225a      	movs	r2, #90	; 0x5a
 8004392:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	225a      	movs	r2, #90	; 0x5a
 8004398:	5a9b      	ldrh	r3, [r3, r2]
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d178      	bne.n	8004492 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80043a6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4936      	ldr	r1, [pc, #216]	; (800449c <UART_RxISR_8BIT+0x164>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d2:	f3ef 8310 	mrs	r3, PRIMASK
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
 80043dc:	2301      	movs	r3, #1
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	438a      	bics	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	f383 8810 	msr	PRIMASK, r3
}
 8004402:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	2b01      	cmp	r3, #1
 8004416:	d12f      	bne.n	8004478 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441e:	f3ef 8310 	mrs	r3, PRIMASK
 8004422:	60fb      	str	r3, [r7, #12]
  return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
 8004428:	2301      	movs	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f383 8810 	msr	PRIMASK, r3
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2110      	movs	r1, #16
 8004440:	438a      	bics	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2210      	movs	r2, #16
 8004458:	4013      	ands	r3, r2
 800445a:	2b10      	cmp	r3, #16
 800445c:	d103      	bne.n	8004466 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2258      	movs	r2, #88	; 0x58
 800446a:	5a9a      	ldrh	r2, [r3, r2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	0011      	movs	r1, r2
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff fa5d 	bl	8003930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004476:	e00c      	b.n	8004492 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f7fb ff8c 	bl	8000398 <HAL_UART_RxCpltCallback>
}
 8004480:	e007      	b.n	8004492 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2108      	movs	r1, #8
 800448e:	430a      	orrs	r2, r1
 8004490:	619a      	str	r2, [r3, #24]
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b010      	add	sp, #64	; 0x40
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	fffffedf 	.word	0xfffffedf

080044a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b090      	sub	sp, #64	; 0x40
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044a8:	203e      	movs	r0, #62	; 0x3e
 80044aa:	183b      	adds	r3, r7, r0
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	215c      	movs	r1, #92	; 0x5c
 80044b0:	5a52      	ldrh	r2, [r2, r1]
 80044b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b8:	2b22      	cmp	r3, #34	; 0x22
 80044ba:	d000      	beq.n	80044be <UART_RxISR_16BIT+0x1e>
 80044bc:	e095      	b.n	80045ea <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	213c      	movs	r1, #60	; 0x3c
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80044c8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	183a      	adds	r2, r7, r0
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	225a      	movs	r2, #90	; 0x5a
 80044ee:	5a9b      	ldrh	r3, [r3, r2]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b299      	uxth	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	225a      	movs	r2, #90	; 0x5a
 80044fa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	225a      	movs	r2, #90	; 0x5a
 8004500:	5a9b      	ldrh	r3, [r3, r2]
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d178      	bne.n	80045fa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004508:	f3ef 8310 	mrs	r3, PRIMASK
 800450c:	617b      	str	r3, [r7, #20]
  return(result);
 800450e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f383 8810 	msr	PRIMASK, r3
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4936      	ldr	r1, [pc, #216]	; (8004604 <UART_RxISR_16BIT+0x164>)
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453a:	f3ef 8310 	mrs	r3, PRIMASK
 800453e:	623b      	str	r3, [r7, #32]
  return(result);
 8004540:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2101      	movs	r1, #1
 800455c:	438a      	bics	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	2b01      	cmp	r3, #1
 800457e:	d12f      	bne.n	80045e0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004586:	f3ef 8310 	mrs	r3, PRIMASK
 800458a:	60bb      	str	r3, [r7, #8]
  return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004590:	2301      	movs	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2110      	movs	r1, #16
 80045a8:	438a      	bics	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2210      	movs	r2, #16
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d103      	bne.n	80045ce <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2210      	movs	r2, #16
 80045cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2258      	movs	r2, #88	; 0x58
 80045d2:	5a9a      	ldrh	r2, [r3, r2]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f7ff f9a9 	bl	8003930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045de:	e00c      	b.n	80045fa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7fb fed8 	bl	8000398 <HAL_UART_RxCpltCallback>
}
 80045e8:	e007      	b.n	80045fa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2108      	movs	r1, #8
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b010      	add	sp, #64	; 0x40
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	fffffedf 	.word	0xfffffedf

08004608 <__errno>:
 8004608:	4b01      	ldr	r3, [pc, #4]	; (8004610 <__errno+0x8>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	4770      	bx	lr
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	20000098 	.word	0x20000098

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	2600      	movs	r6, #0
 8004618:	4d0c      	ldr	r5, [pc, #48]	; (800464c <__libc_init_array+0x38>)
 800461a:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461c:	1b64      	subs	r4, r4, r5
 800461e:	10a4      	asrs	r4, r4, #2
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	2600      	movs	r6, #0
 8004626:	f000 fe2b 	bl	8005280 <_init>
 800462a:	4d0a      	ldr	r5, [pc, #40]	; (8004654 <__libc_init_array+0x40>)
 800462c:	4c0a      	ldr	r4, [pc, #40]	; (8004658 <__libc_init_array+0x44>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	00b3      	lsls	r3, r6, #2
 800463a:	58eb      	ldr	r3, [r5, r3]
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	00b3      	lsls	r3, r6, #2
 8004644:	58eb      	ldr	r3, [r5, r3]
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	080054a0 	.word	0x080054a0
 8004650:	080054a0 	.word	0x080054a0
 8004654:	080054a0 	.word	0x080054a0
 8004658:	080054a4 	.word	0x080054a4

0800465c <memset>:
 800465c:	0003      	movs	r3, r0
 800465e:	1882      	adds	r2, r0, r2
 8004660:	4293      	cmp	r3, r2
 8004662:	d100      	bne.n	8004666 <memset+0xa>
 8004664:	4770      	bx	lr
 8004666:	7019      	strb	r1, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	e7f9      	b.n	8004660 <memset+0x4>

0800466c <siscanf>:
 800466c:	b40e      	push	{r1, r2, r3}
 800466e:	b530      	push	{r4, r5, lr}
 8004670:	2381      	movs	r3, #129	; 0x81
 8004672:	b09c      	sub	sp, #112	; 0x70
 8004674:	466a      	mov	r2, sp
 8004676:	ac1f      	add	r4, sp, #124	; 0x7c
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	cc20      	ldmia	r4!, {r5}
 800467c:	8293      	strh	r3, [r2, #20]
 800467e:	9002      	str	r0, [sp, #8]
 8004680:	9006      	str	r0, [sp, #24]
 8004682:	f7fb fd41 	bl	8000108 <strlen>
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <siscanf+0x48>)
 8004688:	466a      	mov	r2, sp
 800468a:	930b      	str	r3, [sp, #44]	; 0x2c
 800468c:	2300      	movs	r3, #0
 800468e:	9003      	str	r0, [sp, #12]
 8004690:	9007      	str	r0, [sp, #28]
 8004692:	4809      	ldr	r0, [pc, #36]	; (80046b8 <siscanf+0x4c>)
 8004694:	930f      	str	r3, [sp, #60]	; 0x3c
 8004696:	9314      	str	r3, [sp, #80]	; 0x50
 8004698:	3b01      	subs	r3, #1
 800469a:	82d3      	strh	r3, [r2, #22]
 800469c:	a902      	add	r1, sp, #8
 800469e:	0023      	movs	r3, r4
 80046a0:	002a      	movs	r2, r5
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	9401      	str	r4, [sp, #4]
 80046a6:	f000 f867 	bl	8004778 <__ssvfiscanf_r>
 80046aa:	b01c      	add	sp, #112	; 0x70
 80046ac:	bc30      	pop	{r4, r5}
 80046ae:	bc08      	pop	{r3}
 80046b0:	b003      	add	sp, #12
 80046b2:	4718      	bx	r3
 80046b4:	080046bd 	.word	0x080046bd
 80046b8:	20000098 	.word	0x20000098

080046bc <__seofread>:
 80046bc:	2000      	movs	r0, #0
 80046be:	4770      	bx	lr

080046c0 <_sungetc_r>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	0014      	movs	r4, r2
 80046c4:	1c4b      	adds	r3, r1, #1
 80046c6:	d103      	bne.n	80046d0 <_sungetc_r+0x10>
 80046c8:	2501      	movs	r5, #1
 80046ca:	426d      	negs	r5, r5
 80046cc:	0028      	movs	r0, r5
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	8993      	ldrh	r3, [r2, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	4393      	bics	r3, r2
 80046d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	b2ce      	uxtb	r6, r1
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	b2cd      	uxtb	r5, r1
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d010      	beq.n	8004706 <_sungetc_r+0x46>
 80046e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046e6:	429a      	cmp	r2, r3
 80046e8:	dd07      	ble.n	80046fa <_sungetc_r+0x3a>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	701e      	strb	r6, [r3, #0]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	3301      	adds	r3, #1
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	e7e8      	b.n	80046cc <_sungetc_r+0xc>
 80046fa:	0021      	movs	r1, r4
 80046fc:	f000 fc74 	bl	8004fe8 <__submore>
 8004700:	2800      	cmp	r0, #0
 8004702:	d0f2      	beq.n	80046ea <_sungetc_r+0x2a>
 8004704:	e7e0      	b.n	80046c8 <_sungetc_r+0x8>
 8004706:	6921      	ldr	r1, [r4, #16]
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	2900      	cmp	r1, #0
 800470c:	d007      	beq.n	800471e <_sungetc_r+0x5e>
 800470e:	4291      	cmp	r1, r2
 8004710:	d205      	bcs.n	800471e <_sungetc_r+0x5e>
 8004712:	1e51      	subs	r1, r2, #1
 8004714:	7808      	ldrb	r0, [r1, #0]
 8004716:	42a8      	cmp	r0, r5
 8004718:	d101      	bne.n	800471e <_sungetc_r+0x5e>
 800471a:	6021      	str	r1, [r4, #0]
 800471c:	e7ea      	b.n	80046f4 <_sungetc_r+0x34>
 800471e:	6423      	str	r3, [r4, #64]	; 0x40
 8004720:	0023      	movs	r3, r4
 8004722:	3344      	adds	r3, #68	; 0x44
 8004724:	6363      	str	r3, [r4, #52]	; 0x34
 8004726:	2303      	movs	r3, #3
 8004728:	63a3      	str	r3, [r4, #56]	; 0x38
 800472a:	0023      	movs	r3, r4
 800472c:	3346      	adds	r3, #70	; 0x46
 800472e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004730:	701e      	strb	r6, [r3, #0]
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	2301      	movs	r3, #1
 8004736:	e7de      	b.n	80046f6 <_sungetc_r+0x36>

08004738 <__ssrefill_r>:
 8004738:	b510      	push	{r4, lr}
 800473a:	000c      	movs	r4, r1
 800473c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800473e:	2900      	cmp	r1, #0
 8004740:	d00e      	beq.n	8004760 <__ssrefill_r+0x28>
 8004742:	0023      	movs	r3, r4
 8004744:	3344      	adds	r3, #68	; 0x44
 8004746:	4299      	cmp	r1, r3
 8004748:	d001      	beq.n	800474e <__ssrefill_r+0x16>
 800474a:	f000 fca1 	bl	8005090 <_free_r>
 800474e:	2000      	movs	r0, #0
 8004750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004752:	6360      	str	r0, [r4, #52]	; 0x34
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	4283      	cmp	r3, r0
 8004758:	d002      	beq.n	8004760 <__ssrefill_r+0x28>
 800475a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	bd10      	pop	{r4, pc}
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	2001      	movs	r0, #1
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	89a2      	ldrh	r2, [r4, #12]
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	3320      	adds	r3, #32
 800476e:	4313      	orrs	r3, r2
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	4240      	negs	r0, r0
 8004774:	e7f3      	b.n	800475e <__ssrefill_r+0x26>
	...

08004778 <__ssvfiscanf_r>:
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	4cb5      	ldr	r4, [pc, #724]	; (8004a50 <__ssvfiscanf_r+0x2d8>)
 800477c:	0005      	movs	r5, r0
 800477e:	44a5      	add	sp, r4
 8004780:	000c      	movs	r4, r1
 8004782:	2100      	movs	r1, #0
 8004784:	9148      	str	r1, [sp, #288]	; 0x120
 8004786:	9149      	str	r1, [sp, #292]	; 0x124
 8004788:	a905      	add	r1, sp, #20
 800478a:	914a      	str	r1, [sp, #296]	; 0x128
 800478c:	21be      	movs	r1, #190	; 0xbe
 800478e:	48b1      	ldr	r0, [pc, #708]	; (8004a54 <__ssvfiscanf_r+0x2dc>)
 8004790:	0049      	lsls	r1, r1, #1
 8004792:	ae45      	add	r6, sp, #276	; 0x114
 8004794:	5070      	str	r0, [r6, r1]
 8004796:	48b0      	ldr	r0, [pc, #704]	; (8004a58 <__ssvfiscanf_r+0x2e0>)
 8004798:	3104      	adds	r1, #4
 800479a:	ae45      	add	r6, sp, #276	; 0x114
 800479c:	5070      	str	r0, [r6, r1]
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	9101      	str	r1, [sp, #4]
 80047a2:	7813      	ldrb	r3, [r2, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d100      	bne.n	80047ac <__ssvfiscanf_r+0x34>
 80047aa:	e14f      	b.n	8004a4c <__ssvfiscanf_r+0x2d4>
 80047ac:	4fab      	ldr	r7, [pc, #684]	; (8004a5c <__ssvfiscanf_r+0x2e4>)
 80047ae:	2008      	movs	r0, #8
 80047b0:	5cf9      	ldrb	r1, [r7, r3]
 80047b2:	2308      	movs	r3, #8
 80047b4:	1c56      	adds	r6, r2, #1
 80047b6:	400b      	ands	r3, r1
 80047b8:	4201      	tst	r1, r0
 80047ba:	d01e      	beq.n	80047fa <__ssvfiscanf_r+0x82>
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	dd11      	ble.n	80047e6 <__ssvfiscanf_r+0x6e>
 80047c2:	2108      	movs	r1, #8
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	5cba      	ldrb	r2, [r7, r2]
 80047ca:	420a      	tst	r2, r1
 80047cc:	d101      	bne.n	80047d2 <__ssvfiscanf_r+0x5a>
 80047ce:	0032      	movs	r2, r6
 80047d0:	e7e7      	b.n	80047a2 <__ssvfiscanf_r+0x2a>
 80047d2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80047d4:	3301      	adds	r3, #1
 80047d6:	9200      	str	r2, [sp, #0]
 80047d8:	3201      	adds	r2, #1
 80047da:	9249      	str	r2, [sp, #292]	; 0x124
 80047dc:	6862      	ldr	r2, [r4, #4]
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	3a01      	subs	r2, #1
 80047e2:	6062      	str	r2, [r4, #4]
 80047e4:	e7ea      	b.n	80047bc <__ssvfiscanf_r+0x44>
 80047e6:	9a01      	ldr	r2, [sp, #4]
 80047e8:	ab45      	add	r3, sp, #276	; 0x114
 80047ea:	589b      	ldr	r3, [r3, r2]
 80047ec:	0021      	movs	r1, r4
 80047ee:	0028      	movs	r0, r5
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4798      	blx	r3
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d0e4      	beq.n	80047c2 <__ssvfiscanf_r+0x4a>
 80047f8:	e7e9      	b.n	80047ce <__ssvfiscanf_r+0x56>
 80047fa:	9900      	ldr	r1, [sp, #0]
 80047fc:	2925      	cmp	r1, #37	; 0x25
 80047fe:	d164      	bne.n	80048ca <__ssvfiscanf_r+0x152>
 8004800:	9347      	str	r3, [sp, #284]	; 0x11c
 8004802:	9345      	str	r3, [sp, #276]	; 0x114
 8004804:	7853      	ldrb	r3, [r2, #1]
 8004806:	2b2a      	cmp	r3, #42	; 0x2a
 8004808:	d102      	bne.n	8004810 <__ssvfiscanf_r+0x98>
 800480a:	3b1a      	subs	r3, #26
 800480c:	9345      	str	r3, [sp, #276]	; 0x114
 800480e:	1c96      	adds	r6, r2, #2
 8004810:	0037      	movs	r7, r6
 8004812:	200a      	movs	r0, #10
 8004814:	7839      	ldrb	r1, [r7, #0]
 8004816:	1c7b      	adds	r3, r7, #1
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	000b      	movs	r3, r1
 800481c:	3b30      	subs	r3, #48	; 0x30
 800481e:	2b09      	cmp	r3, #9
 8004820:	d91f      	bls.n	8004862 <__ssvfiscanf_r+0xea>
 8004822:	4e8f      	ldr	r6, [pc, #572]	; (8004a60 <__ssvfiscanf_r+0x2e8>)
 8004824:	2203      	movs	r2, #3
 8004826:	0030      	movs	r0, r6
 8004828:	f000 fc1e 	bl	8005068 <memchr>
 800482c:	2800      	cmp	r0, #0
 800482e:	d007      	beq.n	8004840 <__ssvfiscanf_r+0xc8>
 8004830:	2301      	movs	r3, #1
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	4083      	lsls	r3, r0
 8004836:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004838:	9f02      	ldr	r7, [sp, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	9203      	str	r2, [sp, #12]
 800483e:	9345      	str	r3, [sp, #276]	; 0x114
 8004840:	783b      	ldrb	r3, [r7, #0]
 8004842:	1c7e      	adds	r6, r7, #1
 8004844:	2b78      	cmp	r3, #120	; 0x78
 8004846:	d807      	bhi.n	8004858 <__ssvfiscanf_r+0xe0>
 8004848:	2b57      	cmp	r3, #87	; 0x57
 800484a:	d812      	bhi.n	8004872 <__ssvfiscanf_r+0xfa>
 800484c:	2b25      	cmp	r3, #37	; 0x25
 800484e:	d03c      	beq.n	80048ca <__ssvfiscanf_r+0x152>
 8004850:	d836      	bhi.n	80048c0 <__ssvfiscanf_r+0x148>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d100      	bne.n	8004858 <__ssvfiscanf_r+0xe0>
 8004856:	e0f6      	b.n	8004a46 <__ssvfiscanf_r+0x2ce>
 8004858:	2303      	movs	r3, #3
 800485a:	934b      	str	r3, [sp, #300]	; 0x12c
 800485c:	3307      	adds	r3, #7
 800485e:	9346      	str	r3, [sp, #280]	; 0x118
 8004860:	e076      	b.n	8004950 <__ssvfiscanf_r+0x1d8>
 8004862:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004864:	9f02      	ldr	r7, [sp, #8]
 8004866:	9303      	str	r3, [sp, #12]
 8004868:	4343      	muls	r3, r0
 800486a:	3b30      	subs	r3, #48	; 0x30
 800486c:	185b      	adds	r3, r3, r1
 800486e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004870:	e7d0      	b.n	8004814 <__ssvfiscanf_r+0x9c>
 8004872:	0018      	movs	r0, r3
 8004874:	3858      	subs	r0, #88	; 0x58
 8004876:	2820      	cmp	r0, #32
 8004878:	d8ee      	bhi.n	8004858 <__ssvfiscanf_r+0xe0>
 800487a:	f7fb fc4d 	bl	8000118 <__gnu_thumb1_case_shi>
 800487e:	0051      	.short	0x0051
 8004880:	ffedffed 	.word	0xffedffed
 8004884:	ffed0086 	.word	0xffed0086
 8004888:	ffedffed 	.word	0xffedffed
 800488c:	ffedffed 	.word	0xffedffed
 8004890:	ffedffed 	.word	0xffedffed
 8004894:	00600093 	.word	0x00600093
 8004898:	00240024 	.word	0x00240024
 800489c:	ffed0024 	.word	0xffed0024
 80048a0:	ffed0062 	.word	0xffed0062
 80048a4:	ffedffed 	.word	0xffedffed
 80048a8:	009dffed 	.word	0x009dffed
 80048ac:	004b0065 	.word	0x004b0065
 80048b0:	ffedffed 	.word	0xffedffed
 80048b4:	ffed009b 	.word	0xffed009b
 80048b8:	ffed0060 	.word	0xffed0060
 80048bc:	0051ffed 	.word	0x0051ffed
 80048c0:	3b45      	subs	r3, #69	; 0x45
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d8c8      	bhi.n	8004858 <__ssvfiscanf_r+0xe0>
 80048c6:	2305      	movs	r3, #5
 80048c8:	e041      	b.n	800494e <__ssvfiscanf_r+0x1d6>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd0f      	ble.n	80048f0 <__ssvfiscanf_r+0x178>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	9900      	ldr	r1, [sp, #0]
 80048d4:	781a      	ldrb	r2, [r3, #0]
 80048d6:	428a      	cmp	r2, r1
 80048d8:	d000      	beq.n	80048dc <__ssvfiscanf_r+0x164>
 80048da:	e0b7      	b.n	8004a4c <__ssvfiscanf_r+0x2d4>
 80048dc:	3301      	adds	r3, #1
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80048e4:	3a01      	subs	r2, #1
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	6062      	str	r2, [r4, #4]
 80048ec:	9349      	str	r3, [sp, #292]	; 0x124
 80048ee:	e76e      	b.n	80047ce <__ssvfiscanf_r+0x56>
 80048f0:	9a01      	ldr	r2, [sp, #4]
 80048f2:	ab45      	add	r3, sp, #276	; 0x114
 80048f4:	589b      	ldr	r3, [r3, r2]
 80048f6:	0021      	movs	r1, r4
 80048f8:	0028      	movs	r0, r5
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	4798      	blx	r3
 80048fe:	2800      	cmp	r0, #0
 8004900:	d0e6      	beq.n	80048d0 <__ssvfiscanf_r+0x158>
 8004902:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004904:	2800      	cmp	r0, #0
 8004906:	d000      	beq.n	800490a <__ssvfiscanf_r+0x192>
 8004908:	e099      	b.n	8004a3e <__ssvfiscanf_r+0x2c6>
 800490a:	3801      	subs	r0, #1
 800490c:	23a7      	movs	r3, #167	; 0xa7
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	449d      	add	sp, r3
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004914:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004916:	9200      	str	r2, [sp, #0]
 8004918:	2220      	movs	r2, #32
 800491a:	9900      	ldr	r1, [sp, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	9245      	str	r2, [sp, #276]	; 0x114
 8004920:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004922:	9200      	str	r2, [sp, #0]
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	9900      	ldr	r1, [sp, #0]
 8004928:	0092      	lsls	r2, r2, #2
 800492a:	430a      	orrs	r2, r1
 800492c:	9245      	str	r2, [sp, #276]	; 0x114
 800492e:	2210      	movs	r2, #16
 8004930:	9246      	str	r2, [sp, #280]	; 0x118
 8004932:	226e      	movs	r2, #110	; 0x6e
 8004934:	429a      	cmp	r2, r3
 8004936:	419b      	sbcs	r3, r3
 8004938:	425b      	negs	r3, r3
 800493a:	3303      	adds	r3, #3
 800493c:	e007      	b.n	800494e <__ssvfiscanf_r+0x1d6>
 800493e:	220a      	movs	r2, #10
 8004940:	e7f6      	b.n	8004930 <__ssvfiscanf_r+0x1b8>
 8004942:	2300      	movs	r3, #0
 8004944:	9346      	str	r3, [sp, #280]	; 0x118
 8004946:	e7f8      	b.n	800493a <__ssvfiscanf_r+0x1c2>
 8004948:	2308      	movs	r3, #8
 800494a:	9346      	str	r3, [sp, #280]	; 0x118
 800494c:	3b04      	subs	r3, #4
 800494e:	934b      	str	r3, [sp, #300]	; 0x12c
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dd3f      	ble.n	80049d6 <__ssvfiscanf_r+0x25e>
 8004956:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	065b      	lsls	r3, r3, #25
 800495c:	d406      	bmi.n	800496c <__ssvfiscanf_r+0x1f4>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	493e      	ldr	r1, [pc, #248]	; (8004a5c <__ssvfiscanf_r+0x2e4>)
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	5c8a      	ldrb	r2, [r1, r2]
 8004966:	2108      	movs	r1, #8
 8004968:	420a      	tst	r2, r1
 800496a:	d13e      	bne.n	80049ea <__ssvfiscanf_r+0x272>
 800496c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800496e:	2b02      	cmp	r3, #2
 8004970:	dc51      	bgt.n	8004a16 <__ssvfiscanf_r+0x29e>
 8004972:	0022      	movs	r2, r4
 8004974:	0028      	movs	r0, r5
 8004976:	ab04      	add	r3, sp, #16
 8004978:	a945      	add	r1, sp, #276	; 0x114
 800497a:	f000 f875 	bl	8004a68 <_scanf_chars>
 800497e:	2801      	cmp	r0, #1
 8004980:	d064      	beq.n	8004a4c <__ssvfiscanf_r+0x2d4>
 8004982:	2802      	cmp	r0, #2
 8004984:	d000      	beq.n	8004988 <__ssvfiscanf_r+0x210>
 8004986:	e722      	b.n	80047ce <__ssvfiscanf_r+0x56>
 8004988:	e7bb      	b.n	8004902 <__ssvfiscanf_r+0x18a>
 800498a:	0031      	movs	r1, r6
 800498c:	a805      	add	r0, sp, #20
 800498e:	f000 f9cd 	bl	8004d2c <__sccl>
 8004992:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004994:	0006      	movs	r6, r0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2340      	movs	r3, #64	; 0x40
 800499a:	9a00      	ldr	r2, [sp, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	9345      	str	r3, [sp, #276]	; 0x114
 80049a0:	2301      	movs	r3, #1
 80049a2:	e7d4      	b.n	800494e <__ssvfiscanf_r+0x1d6>
 80049a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2340      	movs	r3, #64	; 0x40
 80049aa:	9a00      	ldr	r2, [sp, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	9345      	str	r3, [sp, #276]	; 0x114
 80049b0:	2300      	movs	r3, #0
 80049b2:	e7cc      	b.n	800494e <__ssvfiscanf_r+0x1d6>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e7ca      	b.n	800494e <__ssvfiscanf_r+0x1d6>
 80049b8:	9845      	ldr	r0, [sp, #276]	; 0x114
 80049ba:	06c3      	lsls	r3, r0, #27
 80049bc:	d500      	bpl.n	80049c0 <__ssvfiscanf_r+0x248>
 80049be:	e706      	b.n	80047ce <__ssvfiscanf_r+0x56>
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80049c4:	1d19      	adds	r1, r3, #4
 80049c6:	9104      	str	r1, [sp, #16]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	07c7      	lsls	r7, r0, #31
 80049cc:	d501      	bpl.n	80049d2 <__ssvfiscanf_r+0x25a>
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e6fd      	b.n	80047ce <__ssvfiscanf_r+0x56>
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e6fb      	b.n	80047ce <__ssvfiscanf_r+0x56>
 80049d6:	9a01      	ldr	r2, [sp, #4]
 80049d8:	ab45      	add	r3, sp, #276	; 0x114
 80049da:	589b      	ldr	r3, [r3, r2]
 80049dc:	0021      	movs	r1, r4
 80049de:	0028      	movs	r0, r5
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4798      	blx	r3
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d0b6      	beq.n	8004956 <__ssvfiscanf_r+0x1de>
 80049e8:	e78b      	b.n	8004902 <__ssvfiscanf_r+0x18a>
 80049ea:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80049ec:	9200      	str	r2, [sp, #0]
 80049ee:	3201      	adds	r2, #1
 80049f0:	9249      	str	r2, [sp, #292]	; 0x124
 80049f2:	6862      	ldr	r2, [r4, #4]
 80049f4:	3a01      	subs	r2, #1
 80049f6:	6062      	str	r2, [r4, #4]
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	dd02      	ble.n	8004a02 <__ssvfiscanf_r+0x28a>
 80049fc:	3301      	adds	r3, #1
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	e7ad      	b.n	800495e <__ssvfiscanf_r+0x1e6>
 8004a02:	9a01      	ldr	r2, [sp, #4]
 8004a04:	ab45      	add	r3, sp, #276	; 0x114
 8004a06:	589b      	ldr	r3, [r3, r2]
 8004a08:	0021      	movs	r1, r4
 8004a0a:	0028      	movs	r0, r5
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	4798      	blx	r3
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0a4      	beq.n	800495e <__ssvfiscanf_r+0x1e6>
 8004a14:	e775      	b.n	8004902 <__ssvfiscanf_r+0x18a>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	dc06      	bgt.n	8004a28 <__ssvfiscanf_r+0x2b0>
 8004a1a:	0022      	movs	r2, r4
 8004a1c:	0028      	movs	r0, r5
 8004a1e:	ab04      	add	r3, sp, #16
 8004a20:	a945      	add	r1, sp, #276	; 0x114
 8004a22:	f000 f87f 	bl	8004b24 <_scanf_i>
 8004a26:	e7aa      	b.n	800497e <__ssvfiscanf_r+0x206>
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <__ssvfiscanf_r+0x2ec>)
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d100      	bne.n	8004a30 <__ssvfiscanf_r+0x2b8>
 8004a2e:	e6ce      	b.n	80047ce <__ssvfiscanf_r+0x56>
 8004a30:	0022      	movs	r2, r4
 8004a32:	0028      	movs	r0, r5
 8004a34:	ab04      	add	r3, sp, #16
 8004a36:	a945      	add	r1, sp, #276	; 0x114
 8004a38:	e000      	b.n	8004a3c <__ssvfiscanf_r+0x2c4>
 8004a3a:	bf00      	nop
 8004a3c:	e79f      	b.n	800497e <__ssvfiscanf_r+0x206>
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	065b      	lsls	r3, r3, #25
 8004a42:	d400      	bmi.n	8004a46 <__ssvfiscanf_r+0x2ce>
 8004a44:	e762      	b.n	800490c <__ssvfiscanf_r+0x194>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4240      	negs	r0, r0
 8004a4a:	e75f      	b.n	800490c <__ssvfiscanf_r+0x194>
 8004a4c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004a4e:	e75d      	b.n	800490c <__ssvfiscanf_r+0x194>
 8004a50:	fffffd64 	.word	0xfffffd64
 8004a54:	080046c1 	.word	0x080046c1
 8004a58:	08004739 	.word	0x08004739
 8004a5c:	08005340 	.word	0x08005340
 8004a60:	08005320 	.word	0x08005320
 8004a64:	00000000 	.word	0x00000000

08004a68 <_scanf_chars>:
 8004a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a6a:	0015      	movs	r5, r2
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	000c      	movs	r4, r1
 8004a70:	9001      	str	r0, [sp, #4]
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d105      	bne.n	8004a82 <_scanf_chars+0x1a>
 8004a76:	6989      	ldr	r1, [r1, #24]
 8004a78:	3201      	adds	r2, #1
 8004a7a:	2900      	cmp	r1, #0
 8004a7c:	d000      	beq.n	8004a80 <_scanf_chars+0x18>
 8004a7e:	3a02      	subs	r2, #2
 8004a80:	60a2      	str	r2, [r4, #8]
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	06d2      	lsls	r2, r2, #27
 8004a86:	d403      	bmi.n	8004a90 <_scanf_chars+0x28>
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	1d11      	adds	r1, r2, #4
 8004a8c:	6019      	str	r1, [r3, #0]
 8004a8e:	6817      	ldr	r7, [r2, #0]
 8004a90:	2600      	movs	r6, #0
 8004a92:	69a0      	ldr	r0, [r4, #24]
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d013      	beq.n	8004ac0 <_scanf_chars+0x58>
 8004a98:	2801      	cmp	r0, #1
 8004a9a:	d108      	bne.n	8004aae <_scanf_chars+0x46>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	6962      	ldr	r2, [r4, #20]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <_scanf_chars+0x58>
 8004aa8:	2e00      	cmp	r6, #0
 8004aaa:	d127      	bne.n	8004afc <_scanf_chars+0x94>
 8004aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004aae:	2802      	cmp	r0, #2
 8004ab0:	d124      	bne.n	8004afc <_scanf_chars+0x94>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <_scanf_chars+0xb8>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	5cd3      	ldrb	r3, [r2, r3]
 8004aba:	2208      	movs	r2, #8
 8004abc:	4213      	tst	r3, r2
 8004abe:	d11d      	bne.n	8004afc <_scanf_chars+0x94>
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	4213      	tst	r3, r2
 8004ac8:	d103      	bne.n	8004ad2 <_scanf_chars+0x6a>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	703b      	strb	r3, [r7, #0]
 8004ad0:	3701      	adds	r7, #1
 8004ad2:	682a      	ldr	r2, [r5, #0]
 8004ad4:	686b      	ldr	r3, [r5, #4]
 8004ad6:	3201      	adds	r2, #1
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	68a2      	ldr	r2, [r4, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	606b      	str	r3, [r5, #4]
 8004ae2:	60a2      	str	r2, [r4, #8]
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	d009      	beq.n	8004afc <_scanf_chars+0x94>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dcd2      	bgt.n	8004a92 <_scanf_chars+0x2a>
 8004aec:	23c0      	movs	r3, #192	; 0xc0
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	0029      	movs	r1, r5
 8004af2:	58e3      	ldr	r3, [r4, r3]
 8004af4:	9801      	ldr	r0, [sp, #4]
 8004af6:	4798      	blx	r3
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d0ca      	beq.n	8004a92 <_scanf_chars+0x2a>
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	2310      	movs	r3, #16
 8004b00:	0011      	movs	r1, r2
 8004b02:	4019      	ands	r1, r3
 8004b04:	421a      	tst	r2, r3
 8004b06:	d106      	bne.n	8004b16 <_scanf_chars+0xae>
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60e3      	str	r3, [r4, #12]
 8004b0e:	69a3      	ldr	r3, [r4, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d000      	beq.n	8004b16 <_scanf_chars+0xae>
 8004b14:	7039      	strb	r1, [r7, #0]
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	2000      	movs	r0, #0
 8004b1a:	199e      	adds	r6, r3, r6
 8004b1c:	6126      	str	r6, [r4, #16]
 8004b1e:	e7c5      	b.n	8004aac <_scanf_chars+0x44>
 8004b20:	08005340 	.word	0x08005340

08004b24 <_scanf_i>:
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	000c      	movs	r4, r1
 8004b28:	b08d      	sub	sp, #52	; 0x34
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	4b79      	ldr	r3, [pc, #484]	; (8004d14 <_scanf_i+0x1f0>)
 8004b2e:	0016      	movs	r6, r2
 8004b30:	9005      	str	r0, [sp, #20]
 8004b32:	aa09      	add	r2, sp, #36	; 0x24
 8004b34:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004b36:	c223      	stmia	r2!, {r0, r1, r5}
 8004b38:	4b77      	ldr	r3, [pc, #476]	; (8004d18 <_scanf_i+0x1f4>)
 8004b3a:	9306      	str	r3, [sp, #24]
 8004b3c:	69a3      	ldr	r3, [r4, #24]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d001      	beq.n	8004b46 <_scanf_i+0x22>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <_scanf_i+0x1f8>)
 8004b44:	9306      	str	r3, [sp, #24]
 8004b46:	22ae      	movs	r2, #174	; 0xae
 8004b48:	2000      	movs	r0, #0
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	0052      	lsls	r2, r2, #1
 8004b4e:	1e59      	subs	r1, r3, #1
 8004b50:	9004      	str	r0, [sp, #16]
 8004b52:	4291      	cmp	r1, r2
 8004b54:	d905      	bls.n	8004b62 <_scanf_i+0x3e>
 8004b56:	3b5e      	subs	r3, #94	; 0x5e
 8004b58:	3bff      	subs	r3, #255	; 0xff
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	235e      	movs	r3, #94	; 0x5e
 8004b5e:	33ff      	adds	r3, #255	; 0xff
 8004b60:	60a3      	str	r3, [r4, #8]
 8004b62:	0023      	movs	r3, r4
 8004b64:	331c      	adds	r3, #28
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	23d0      	movs	r3, #208	; 0xd0
 8004b6a:	2700      	movs	r7, #0
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	4313      	orrs	r3, r2
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	9303      	str	r3, [sp, #12]
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	a809      	add	r0, sp, #36	; 0x24
 8004b7c:	7819      	ldrb	r1, [r3, #0]
 8004b7e:	00bb      	lsls	r3, r7, #2
 8004b80:	2202      	movs	r2, #2
 8004b82:	5818      	ldr	r0, [r3, r0]
 8004b84:	f000 fa70 	bl	8005068 <memchr>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d02b      	beq.n	8004be4 <_scanf_i+0xc0>
 8004b8c:	2f01      	cmp	r7, #1
 8004b8e:	d162      	bne.n	8004c56 <_scanf_i+0x132>
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <_scanf_i+0x80>
 8004b96:	3308      	adds	r3, #8
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	33f9      	adds	r3, #249	; 0xf9
 8004b9e:	33ff      	adds	r3, #255	; 0xff
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <_scanf_i+0x1fc>)
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	68a3      	ldr	r3, [r4, #8]
 8004bae:	1e5a      	subs	r2, r3, #1
 8004bb0:	60a2      	str	r2, [r4, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <_scanf_i+0xc0>
 8004bb6:	6833      	ldr	r3, [r6, #0]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	6032      	str	r2, [r6, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	9a03      	ldr	r2, [sp, #12]
 8004bc0:	7013      	strb	r3, [r2, #0]
 8004bc2:	6873      	ldr	r3, [r6, #4]
 8004bc4:	1c55      	adds	r5, r2, #1
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6073      	str	r3, [r6, #4]
 8004bca:	9503      	str	r5, [sp, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	dc09      	bgt.n	8004be4 <_scanf_i+0xc0>
 8004bd0:	23c0      	movs	r3, #192	; 0xc0
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	58e3      	ldr	r3, [r4, r3]
 8004bd6:	0031      	movs	r1, r6
 8004bd8:	9805      	ldr	r0, [sp, #20]
 8004bda:	9307      	str	r3, [sp, #28]
 8004bdc:	4798      	blx	r3
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d000      	beq.n	8004be4 <_scanf_i+0xc0>
 8004be2:	e081      	b.n	8004ce8 <_scanf_i+0x1c4>
 8004be4:	3701      	adds	r7, #1
 8004be6:	2f03      	cmp	r7, #3
 8004be8:	d1c6      	bne.n	8004b78 <_scanf_i+0x54>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <_scanf_i+0xd0>
 8004bf0:	330a      	adds	r3, #10
 8004bf2:	6063      	str	r3, [r4, #4]
 8004bf4:	2110      	movs	r1, #16
 8004bf6:	2700      	movs	r7, #0
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	6960      	ldr	r0, [r4, #20]
 8004bfc:	1ac9      	subs	r1, r1, r3
 8004bfe:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <_scanf_i+0x200>)
 8004c00:	18c9      	adds	r1, r1, r3
 8004c02:	f000 f893 	bl	8004d2c <__sccl>
 8004c06:	9d03      	ldr	r5, [sp, #12]
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	9303      	str	r3, [sp, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d041      	beq.n	8004c96 <_scanf_i+0x172>
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	6963      	ldr	r3, [r4, #20]
 8004c16:	7808      	ldrb	r0, [r1, #0]
 8004c18:	5c1b      	ldrb	r3, [r3, r0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03b      	beq.n	8004c96 <_scanf_i+0x172>
 8004c1e:	2830      	cmp	r0, #48	; 0x30
 8004c20:	d129      	bne.n	8004c76 <_scanf_i+0x152>
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	421a      	tst	r2, r3
 8004c28:	d025      	beq.n	8004c76 <_scanf_i+0x152>
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	3701      	adds	r7, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <_scanf_i+0x11a>
 8004c32:	001a      	movs	r2, r3
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	3a01      	subs	r2, #1
 8004c38:	3301      	adds	r3, #1
 8004c3a:	9204      	str	r2, [sp, #16]
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	6873      	ldr	r3, [r6, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	6073      	str	r3, [r6, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dd1d      	ble.n	8004c84 <_scanf_i+0x160>
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	68a3      	ldr	r3, [r4, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	e7d8      	b.n	8004c08 <_scanf_i+0xe4>
 8004c56:	2f02      	cmp	r7, #2
 8004c58:	d1a8      	bne.n	8004bac <_scanf_i+0x88>
 8004c5a:	21c0      	movs	r1, #192	; 0xc0
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	00c9      	lsls	r1, r1, #3
 8004c62:	4011      	ands	r1, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d1bf      	bne.n	8004bea <_scanf_i+0xc6>
 8004c6a:	3bf1      	subs	r3, #241	; 0xf1
 8004c6c:	3bff      	subs	r3, #255	; 0xff
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	33f0      	adds	r3, #240	; 0xf0
 8004c72:	4313      	orrs	r3, r2
 8004c74:	e799      	b.n	8004baa <_scanf_i+0x86>
 8004c76:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <_scanf_i+0x204>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	780b      	ldrb	r3, [r1, #0]
 8004c7e:	702b      	strb	r3, [r5, #0]
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7dc      	b.n	8004c3e <_scanf_i+0x11a>
 8004c84:	23c0      	movs	r3, #192	; 0xc0
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	58e3      	ldr	r3, [r4, r3]
 8004c8a:	0031      	movs	r1, r6
 8004c8c:	9805      	ldr	r0, [sp, #20]
 8004c8e:	9303      	str	r3, [sp, #12]
 8004c90:	4798      	blx	r3
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d0db      	beq.n	8004c4e <_scanf_i+0x12a>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	05db      	lsls	r3, r3, #23
 8004c9a:	d50e      	bpl.n	8004cba <_scanf_i+0x196>
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	429d      	cmp	r5, r3
 8004ca0:	d907      	bls.n	8004cb2 <_scanf_i+0x18e>
 8004ca2:	23be      	movs	r3, #190	; 0xbe
 8004ca4:	3d01      	subs	r5, #1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	0032      	movs	r2, r6
 8004caa:	7829      	ldrb	r1, [r5, #0]
 8004cac:	58e3      	ldr	r3, [r4, r3]
 8004cae:	9805      	ldr	r0, [sp, #20]
 8004cb0:	4798      	blx	r3
 8004cb2:	9b01      	ldr	r3, [sp, #4]
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	429d      	cmp	r5, r3
 8004cb8:	d029      	beq.n	8004d0e <_scanf_i+0x1ea>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	000a      	movs	r2, r1
 8004cc0:	401a      	ands	r2, r3
 8004cc2:	4219      	tst	r1, r3
 8004cc4:	d11c      	bne.n	8004d00 <_scanf_i+0x1dc>
 8004cc6:	702a      	strb	r2, [r5, #0]
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	9901      	ldr	r1, [sp, #4]
 8004ccc:	9805      	ldr	r0, [sp, #20]
 8004cce:	9e06      	ldr	r6, [sp, #24]
 8004cd0:	47b0      	blx	r6
 8004cd2:	9b02      	ldr	r3, [sp, #8]
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	068a      	lsls	r2, r1, #26
 8004cda:	d507      	bpl.n	8004cec <_scanf_i+0x1c8>
 8004cdc:	1d1a      	adds	r2, r3, #4
 8004cde:	9902      	ldr	r1, [sp, #8]
 8004ce0:	600a      	str	r2, [r1, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6018      	str	r0, [r3, #0]
 8004ce6:	e008      	b.n	8004cfa <_scanf_i+0x1d6>
 8004ce8:	2700      	movs	r7, #0
 8004cea:	e7d4      	b.n	8004c96 <_scanf_i+0x172>
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	07ce      	lsls	r6, r1, #31
 8004cf0:	d5f5      	bpl.n	8004cde <_scanf_i+0x1ba>
 8004cf2:	9902      	ldr	r1, [sp, #8]
 8004cf4:	600a      	str	r2, [r1, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	8018      	strh	r0, [r3, #0]
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60e3      	str	r3, [r4, #12]
 8004d00:	2000      	movs	r0, #0
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	1aed      	subs	r5, r5, r3
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	19ef      	adds	r7, r5, r7
 8004d0a:	19df      	adds	r7, r3, r7
 8004d0c:	6127      	str	r7, [r4, #16]
 8004d0e:	b00d      	add	sp, #52	; 0x34
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	080052fc 	.word	0x080052fc
 8004d18:	08004ec1 	.word	0x08004ec1
 8004d1c:	08004fe1 	.word	0x08004fe1
 8004d20:	fffffaff 	.word	0xfffffaff
 8004d24:	0800532d 	.word	0x0800532d
 8004d28:	fffff6ff 	.word	0xfffff6ff

08004d2c <__sccl>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	780b      	ldrb	r3, [r1, #0]
 8004d30:	0004      	movs	r4, r0
 8004d32:	2b5e      	cmp	r3, #94	; 0x5e
 8004d34:	d00c      	beq.n	8004d50 <__sccl+0x24>
 8004d36:	1c48      	adds	r0, r1, #1
 8004d38:	2100      	movs	r1, #0
 8004d3a:	0022      	movs	r2, r4
 8004d3c:	1c65      	adds	r5, r4, #1
 8004d3e:	35ff      	adds	r5, #255	; 0xff
 8004d40:	7011      	strb	r1, [r2, #0]
 8004d42:	3201      	adds	r2, #1
 8004d44:	42aa      	cmp	r2, r5
 8004d46:	d1fb      	bne.n	8004d40 <__sccl+0x14>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <__sccl+0x2c>
 8004d4c:	3801      	subs	r0, #1
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	784b      	ldrb	r3, [r1, #1]
 8004d52:	1c88      	adds	r0, r1, #2
 8004d54:	2101      	movs	r1, #1
 8004d56:	e7f0      	b.n	8004d3a <__sccl+0xe>
 8004d58:	2201      	movs	r2, #1
 8004d5a:	262d      	movs	r6, #45	; 0x2d
 8004d5c:	4051      	eors	r1, r2
 8004d5e:	0002      	movs	r2, r0
 8004d60:	54e1      	strb	r1, [r4, r3]
 8004d62:	7815      	ldrb	r5, [r2, #0]
 8004d64:	1c50      	adds	r0, r2, #1
 8004d66:	2d2d      	cmp	r5, #45	; 0x2d
 8004d68:	d009      	beq.n	8004d7e <__sccl+0x52>
 8004d6a:	2d5d      	cmp	r5, #93	; 0x5d
 8004d6c:	d0ef      	beq.n	8004d4e <__sccl+0x22>
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	d101      	bne.n	8004d76 <__sccl+0x4a>
 8004d72:	0010      	movs	r0, r2
 8004d74:	e7eb      	b.n	8004d4e <__sccl+0x22>
 8004d76:	002b      	movs	r3, r5
 8004d78:	e7f1      	b.n	8004d5e <__sccl+0x32>
 8004d7a:	0033      	movs	r3, r6
 8004d7c:	e7ef      	b.n	8004d5e <__sccl+0x32>
 8004d7e:	7855      	ldrb	r5, [r2, #1]
 8004d80:	2d5d      	cmp	r5, #93	; 0x5d
 8004d82:	d0fa      	beq.n	8004d7a <__sccl+0x4e>
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dcf8      	bgt.n	8004d7a <__sccl+0x4e>
 8004d88:	0018      	movs	r0, r3
 8004d8a:	3202      	adds	r2, #2
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	5421      	strb	r1, [r4, r0]
 8004d90:	4285      	cmp	r5, r0
 8004d92:	dcfb      	bgt.n	8004d8c <__sccl+0x60>
 8004d94:	2000      	movs	r0, #0
 8004d96:	1c5f      	adds	r7, r3, #1
 8004d98:	42ab      	cmp	r3, r5
 8004d9a:	da01      	bge.n	8004da0 <__sccl+0x74>
 8004d9c:	1ae8      	subs	r0, r5, r3
 8004d9e:	3801      	subs	r0, #1
 8004da0:	183b      	adds	r3, r7, r0
 8004da2:	e7de      	b.n	8004d62 <__sccl+0x36>

08004da4 <_strtol_l.isra.0>:
 8004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da6:	b087      	sub	sp, #28
 8004da8:	001e      	movs	r6, r3
 8004daa:	9005      	str	r0, [sp, #20]
 8004dac:	9101      	str	r1, [sp, #4]
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d045      	beq.n	8004e40 <_strtol_l.isra.0+0x9c>
 8004db4:	0008      	movs	r0, r1
 8004db6:	2b24      	cmp	r3, #36	; 0x24
 8004db8:	d842      	bhi.n	8004e40 <_strtol_l.isra.0+0x9c>
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <_strtol_l.isra.0+0x114>)
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	469c      	mov	ip, r3
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	4661      	mov	r1, ip
 8004dc4:	781c      	ldrb	r4, [r3, #0]
 8004dc6:	1c45      	adds	r5, r0, #1
 8004dc8:	5d09      	ldrb	r1, [r1, r4]
 8004dca:	0028      	movs	r0, r5
 8004dcc:	000f      	movs	r7, r1
 8004dce:	4017      	ands	r7, r2
 8004dd0:	4211      	tst	r1, r2
 8004dd2:	d1f5      	bne.n	8004dc0 <_strtol_l.isra.0+0x1c>
 8004dd4:	2c2d      	cmp	r4, #45	; 0x2d
 8004dd6:	d13a      	bne.n	8004e4e <_strtol_l.isra.0+0xaa>
 8004dd8:	2701      	movs	r7, #1
 8004dda:	782c      	ldrb	r4, [r5, #0]
 8004ddc:	1c9d      	adds	r5, r3, #2
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d065      	beq.n	8004eae <_strtol_l.isra.0+0x10a>
 8004de2:	2e10      	cmp	r6, #16
 8004de4:	d109      	bne.n	8004dfa <_strtol_l.isra.0+0x56>
 8004de6:	2c30      	cmp	r4, #48	; 0x30
 8004de8:	d107      	bne.n	8004dfa <_strtol_l.isra.0+0x56>
 8004dea:	2220      	movs	r2, #32
 8004dec:	782b      	ldrb	r3, [r5, #0]
 8004dee:	4393      	bics	r3, r2
 8004df0:	2b58      	cmp	r3, #88	; 0x58
 8004df2:	d157      	bne.n	8004ea4 <_strtol_l.isra.0+0x100>
 8004df4:	2610      	movs	r6, #16
 8004df6:	786c      	ldrb	r4, [r5, #1]
 8004df8:	3502      	adds	r5, #2
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <_strtol_l.isra.0+0x118>)
 8004dfc:	0031      	movs	r1, r6
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	0018      	movs	r0, r3
 8004e02:	9303      	str	r3, [sp, #12]
 8004e04:	f7fb fa18 	bl	8000238 <__aeabi_uidivmod>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4684      	mov	ip, r0
 8004e0e:	0018      	movs	r0, r3
 8004e10:	9104      	str	r1, [sp, #16]
 8004e12:	4252      	negs	r2, r2
 8004e14:	0021      	movs	r1, r4
 8004e16:	3930      	subs	r1, #48	; 0x30
 8004e18:	2909      	cmp	r1, #9
 8004e1a:	d81d      	bhi.n	8004e58 <_strtol_l.isra.0+0xb4>
 8004e1c:	000c      	movs	r4, r1
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	dd28      	ble.n	8004e74 <_strtol_l.isra.0+0xd0>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	db24      	blt.n	8004e70 <_strtol_l.isra.0+0xcc>
 8004e26:	0013      	movs	r3, r2
 8004e28:	4584      	cmp	ip, r0
 8004e2a:	d306      	bcc.n	8004e3a <_strtol_l.isra.0+0x96>
 8004e2c:	d102      	bne.n	8004e34 <_strtol_l.isra.0+0x90>
 8004e2e:	9904      	ldr	r1, [sp, #16]
 8004e30:	42a1      	cmp	r1, r4
 8004e32:	db02      	blt.n	8004e3a <_strtol_l.isra.0+0x96>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4370      	muls	r0, r6
 8004e38:	1820      	adds	r0, r4, r0
 8004e3a:	782c      	ldrb	r4, [r5, #0]
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	e7e9      	b.n	8004e14 <_strtol_l.isra.0+0x70>
 8004e40:	f7ff fbe2 	bl	8004608 <__errno>
 8004e44:	2316      	movs	r3, #22
 8004e46:	6003      	str	r3, [r0, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	b007      	add	sp, #28
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e50:	d1c5      	bne.n	8004dde <_strtol_l.isra.0+0x3a>
 8004e52:	782c      	ldrb	r4, [r5, #0]
 8004e54:	1c9d      	adds	r5, r3, #2
 8004e56:	e7c2      	b.n	8004dde <_strtol_l.isra.0+0x3a>
 8004e58:	0021      	movs	r1, r4
 8004e5a:	3941      	subs	r1, #65	; 0x41
 8004e5c:	2919      	cmp	r1, #25
 8004e5e:	d801      	bhi.n	8004e64 <_strtol_l.isra.0+0xc0>
 8004e60:	3c37      	subs	r4, #55	; 0x37
 8004e62:	e7dc      	b.n	8004e1e <_strtol_l.isra.0+0x7a>
 8004e64:	0021      	movs	r1, r4
 8004e66:	3961      	subs	r1, #97	; 0x61
 8004e68:	2919      	cmp	r1, #25
 8004e6a:	d803      	bhi.n	8004e74 <_strtol_l.isra.0+0xd0>
 8004e6c:	3c57      	subs	r4, #87	; 0x57
 8004e6e:	e7d6      	b.n	8004e1e <_strtol_l.isra.0+0x7a>
 8004e70:	0013      	movs	r3, r2
 8004e72:	e7e2      	b.n	8004e3a <_strtol_l.isra.0+0x96>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da09      	bge.n	8004e8c <_strtol_l.isra.0+0xe8>
 8004e78:	2322      	movs	r3, #34	; 0x22
 8004e7a:	9a05      	ldr	r2, [sp, #20]
 8004e7c:	9803      	ldr	r0, [sp, #12]
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	9b02      	ldr	r3, [sp, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0e1      	beq.n	8004e4a <_strtol_l.isra.0+0xa6>
 8004e86:	1e6b      	subs	r3, r5, #1
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	e007      	b.n	8004e9c <_strtol_l.isra.0+0xf8>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	d000      	beq.n	8004e92 <_strtol_l.isra.0+0xee>
 8004e90:	4240      	negs	r0, r0
 8004e92:	9a02      	ldr	r2, [sp, #8]
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d0d8      	beq.n	8004e4a <_strtol_l.isra.0+0xa6>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f4      	bne.n	8004e86 <_strtol_l.isra.0+0xe2>
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	9a01      	ldr	r2, [sp, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e7d2      	b.n	8004e4a <_strtol_l.isra.0+0xa6>
 8004ea4:	2430      	movs	r4, #48	; 0x30
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	d1a7      	bne.n	8004dfa <_strtol_l.isra.0+0x56>
 8004eaa:	3608      	adds	r6, #8
 8004eac:	e7a5      	b.n	8004dfa <_strtol_l.isra.0+0x56>
 8004eae:	2c30      	cmp	r4, #48	; 0x30
 8004eb0:	d09b      	beq.n	8004dea <_strtol_l.isra.0+0x46>
 8004eb2:	260a      	movs	r6, #10
 8004eb4:	e7a1      	b.n	8004dfa <_strtol_l.isra.0+0x56>
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	08005340 	.word	0x08005340
 8004ebc:	7fffffff 	.word	0x7fffffff

08004ec0 <_strtol_r>:
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	f7ff ff6f 	bl	8004da4 <_strtol_l.isra.0>
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <_strtoul_l.isra.0>:
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	001e      	movs	r6, r3
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <_strtoul_l.isra.0+0x114>)
 8004ece:	b087      	sub	sp, #28
 8004ed0:	000f      	movs	r7, r1
 8004ed2:	9101      	str	r1, [sp, #4]
 8004ed4:	469c      	mov	ip, r3
 8004ed6:	2108      	movs	r1, #8
 8004ed8:	9005      	str	r0, [sp, #20]
 8004eda:	9202      	str	r2, [sp, #8]
 8004edc:	003b      	movs	r3, r7
 8004ede:	4662      	mov	r2, ip
 8004ee0:	781c      	ldrb	r4, [r3, #0]
 8004ee2:	1c7d      	adds	r5, r7, #1
 8004ee4:	5d10      	ldrb	r0, [r2, r4]
 8004ee6:	002f      	movs	r7, r5
 8004ee8:	0002      	movs	r2, r0
 8004eea:	400a      	ands	r2, r1
 8004eec:	4208      	tst	r0, r1
 8004eee:	d1f5      	bne.n	8004edc <_strtoul_l.isra.0+0x14>
 8004ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ef2:	d13a      	bne.n	8004f6a <_strtoul_l.isra.0+0xa2>
 8004ef4:	2701      	movs	r7, #1
 8004ef6:	782c      	ldrb	r4, [r5, #0]
 8004ef8:	1c9d      	adds	r5, r3, #2
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d069      	beq.n	8004fd2 <_strtoul_l.isra.0+0x10a>
 8004efe:	2e10      	cmp	r6, #16
 8004f00:	d109      	bne.n	8004f16 <_strtoul_l.isra.0+0x4e>
 8004f02:	2c30      	cmp	r4, #48	; 0x30
 8004f04:	d107      	bne.n	8004f16 <_strtoul_l.isra.0+0x4e>
 8004f06:	2220      	movs	r2, #32
 8004f08:	782b      	ldrb	r3, [r5, #0]
 8004f0a:	4393      	bics	r3, r2
 8004f0c:	2b58      	cmp	r3, #88	; 0x58
 8004f0e:	d15b      	bne.n	8004fc8 <_strtoul_l.isra.0+0x100>
 8004f10:	2610      	movs	r6, #16
 8004f12:	786c      	ldrb	r4, [r5, #1]
 8004f14:	3502      	adds	r5, #2
 8004f16:	2001      	movs	r0, #1
 8004f18:	0031      	movs	r1, r6
 8004f1a:	4240      	negs	r0, r0
 8004f1c:	f7fb f906 	bl	800012c <__udivsi3>
 8004f20:	9003      	str	r0, [sp, #12]
 8004f22:	2001      	movs	r0, #1
 8004f24:	0031      	movs	r1, r6
 8004f26:	4240      	negs	r0, r0
 8004f28:	f7fb f986 	bl	8000238 <__aeabi_uidivmod>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9104      	str	r1, [sp, #16]
 8004f30:	2101      	movs	r1, #1
 8004f32:	2201      	movs	r2, #1
 8004f34:	0018      	movs	r0, r3
 8004f36:	468c      	mov	ip, r1
 8004f38:	4252      	negs	r2, r2
 8004f3a:	0021      	movs	r1, r4
 8004f3c:	3930      	subs	r1, #48	; 0x30
 8004f3e:	2909      	cmp	r1, #9
 8004f40:	d81a      	bhi.n	8004f78 <_strtoul_l.isra.0+0xb0>
 8004f42:	000c      	movs	r4, r1
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	dd25      	ble.n	8004f94 <_strtoul_l.isra.0+0xcc>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	db21      	blt.n	8004f90 <_strtoul_l.isra.0+0xc8>
 8004f4c:	9903      	ldr	r1, [sp, #12]
 8004f4e:	0013      	movs	r3, r2
 8004f50:	4281      	cmp	r1, r0
 8004f52:	d307      	bcc.n	8004f64 <_strtoul_l.isra.0+0x9c>
 8004f54:	d103      	bne.n	8004f5e <_strtoul_l.isra.0+0x96>
 8004f56:	9904      	ldr	r1, [sp, #16]
 8004f58:	0013      	movs	r3, r2
 8004f5a:	42a1      	cmp	r1, r4
 8004f5c:	db02      	blt.n	8004f64 <_strtoul_l.isra.0+0x9c>
 8004f5e:	4663      	mov	r3, ip
 8004f60:	4370      	muls	r0, r6
 8004f62:	1820      	adds	r0, r4, r0
 8004f64:	782c      	ldrb	r4, [r5, #0]
 8004f66:	3501      	adds	r5, #1
 8004f68:	e7e7      	b.n	8004f3a <_strtoul_l.isra.0+0x72>
 8004f6a:	2c2b      	cmp	r4, #43	; 0x2b
 8004f6c:	d001      	beq.n	8004f72 <_strtoul_l.isra.0+0xaa>
 8004f6e:	0017      	movs	r7, r2
 8004f70:	e7c3      	b.n	8004efa <_strtoul_l.isra.0+0x32>
 8004f72:	782c      	ldrb	r4, [r5, #0]
 8004f74:	1c9d      	adds	r5, r3, #2
 8004f76:	e7fa      	b.n	8004f6e <_strtoul_l.isra.0+0xa6>
 8004f78:	0021      	movs	r1, r4
 8004f7a:	3941      	subs	r1, #65	; 0x41
 8004f7c:	2919      	cmp	r1, #25
 8004f7e:	d801      	bhi.n	8004f84 <_strtoul_l.isra.0+0xbc>
 8004f80:	3c37      	subs	r4, #55	; 0x37
 8004f82:	e7df      	b.n	8004f44 <_strtoul_l.isra.0+0x7c>
 8004f84:	0021      	movs	r1, r4
 8004f86:	3961      	subs	r1, #97	; 0x61
 8004f88:	2919      	cmp	r1, #25
 8004f8a:	d803      	bhi.n	8004f94 <_strtoul_l.isra.0+0xcc>
 8004f8c:	3c57      	subs	r4, #87	; 0x57
 8004f8e:	e7d9      	b.n	8004f44 <_strtoul_l.isra.0+0x7c>
 8004f90:	0013      	movs	r3, r2
 8004f92:	e7e7      	b.n	8004f64 <_strtoul_l.isra.0+0x9c>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da09      	bge.n	8004fac <_strtoul_l.isra.0+0xe4>
 8004f98:	2322      	movs	r3, #34	; 0x22
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	9a05      	ldr	r2, [sp, #20]
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <_strtoul_l.isra.0+0xf4>
 8004fa8:	b007      	add	sp, #28
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	d000      	beq.n	8004fb2 <_strtoul_l.isra.0+0xea>
 8004fb0:	4240      	negs	r0, r0
 8004fb2:	9a02      	ldr	r2, [sp, #8]
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	d0f7      	beq.n	8004fa8 <_strtoul_l.isra.0+0xe0>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <_strtoul_l.isra.0+0xf8>
 8004fbc:	1e6b      	subs	r3, r5, #1
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e7ef      	b.n	8004fa8 <_strtoul_l.isra.0+0xe0>
 8004fc8:	2430      	movs	r4, #48	; 0x30
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d1a3      	bne.n	8004f16 <_strtoul_l.isra.0+0x4e>
 8004fce:	3608      	adds	r6, #8
 8004fd0:	e7a1      	b.n	8004f16 <_strtoul_l.isra.0+0x4e>
 8004fd2:	2c30      	cmp	r4, #48	; 0x30
 8004fd4:	d097      	beq.n	8004f06 <_strtoul_l.isra.0+0x3e>
 8004fd6:	260a      	movs	r6, #10
 8004fd8:	e79d      	b.n	8004f16 <_strtoul_l.isra.0+0x4e>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	08005340 	.word	0x08005340

08004fe0 <_strtoul_r>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	f7ff ff71 	bl	8004ec8 <_strtoul_l.isra.0>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <__submore>:
 8004fe8:	000b      	movs	r3, r1
 8004fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fec:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004fee:	3344      	adds	r3, #68	; 0x44
 8004ff0:	000c      	movs	r4, r1
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	d11c      	bne.n	8005030 <__submore+0x48>
 8004ff6:	2680      	movs	r6, #128	; 0x80
 8004ff8:	00f6      	lsls	r6, r6, #3
 8004ffa:	0031      	movs	r1, r6
 8004ffc:	f000 f892 	bl	8005124 <_malloc_r>
 8005000:	2800      	cmp	r0, #0
 8005002:	d102      	bne.n	800500a <__submore+0x22>
 8005004:	2001      	movs	r0, #1
 8005006:	4240      	negs	r0, r0
 8005008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800500a:	0023      	movs	r3, r4
 800500c:	6360      	str	r0, [r4, #52]	; 0x34
 800500e:	63a6      	str	r6, [r4, #56]	; 0x38
 8005010:	3346      	adds	r3, #70	; 0x46
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <__submore+0x70>)
 8005016:	54c2      	strb	r2, [r0, r3]
 8005018:	0023      	movs	r3, r4
 800501a:	3345      	adds	r3, #69	; 0x45
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <__submore+0x74>)
 8005020:	54c2      	strb	r2, [r0, r3]
 8005022:	782a      	ldrb	r2, [r5, #0]
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <__submore+0x78>)
 8005026:	54c2      	strb	r2, [r0, r3]
 8005028:	18c0      	adds	r0, r0, r3
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	2000      	movs	r0, #0
 800502e:	e7eb      	b.n	8005008 <__submore+0x20>
 8005030:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005032:	0029      	movs	r1, r5
 8005034:	0073      	lsls	r3, r6, #1
 8005036:	001a      	movs	r2, r3
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	f000 f8d1 	bl	80051e0 <_realloc_r>
 800503e:	1e05      	subs	r5, r0, #0
 8005040:	d0e0      	beq.n	8005004 <__submore+0x1c>
 8005042:	1987      	adds	r7, r0, r6
 8005044:	0001      	movs	r1, r0
 8005046:	0032      	movs	r2, r6
 8005048:	0038      	movs	r0, r7
 800504a:	f000 f818 	bl	800507e <memcpy>
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	6027      	str	r7, [r4, #0]
 8005052:	6365      	str	r5, [r4, #52]	; 0x34
 8005054:	63a3      	str	r3, [r4, #56]	; 0x38
 8005056:	e7e9      	b.n	800502c <__submore+0x44>
 8005058:	000003ff 	.word	0x000003ff
 800505c:	000003fe 	.word	0x000003fe
 8005060:	000003fd 	.word	0x000003fd

08005064 <__retarget_lock_acquire_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_release_recursive>:
 8005066:	4770      	bx	lr

08005068 <memchr>:
 8005068:	b2c9      	uxtb	r1, r1
 800506a:	1882      	adds	r2, r0, r2
 800506c:	4290      	cmp	r0, r2
 800506e:	d101      	bne.n	8005074 <memchr+0xc>
 8005070:	2000      	movs	r0, #0
 8005072:	4770      	bx	lr
 8005074:	7803      	ldrb	r3, [r0, #0]
 8005076:	428b      	cmp	r3, r1
 8005078:	d0fb      	beq.n	8005072 <memchr+0xa>
 800507a:	3001      	adds	r0, #1
 800507c:	e7f6      	b.n	800506c <memchr+0x4>

0800507e <memcpy>:
 800507e:	2300      	movs	r3, #0
 8005080:	b510      	push	{r4, lr}
 8005082:	429a      	cmp	r2, r3
 8005084:	d100      	bne.n	8005088 <memcpy+0xa>
 8005086:	bd10      	pop	{r4, pc}
 8005088:	5ccc      	ldrb	r4, [r1, r3]
 800508a:	54c4      	strb	r4, [r0, r3]
 800508c:	3301      	adds	r3, #1
 800508e:	e7f8      	b.n	8005082 <memcpy+0x4>

08005090 <_free_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	0005      	movs	r5, r0
 8005094:	2900      	cmp	r1, #0
 8005096:	d010      	beq.n	80050ba <_free_r+0x2a>
 8005098:	1f0c      	subs	r4, r1, #4
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	da00      	bge.n	80050a2 <_free_r+0x12>
 80050a0:	18e4      	adds	r4, r4, r3
 80050a2:	0028      	movs	r0, r5
 80050a4:	f000 f8d4 	bl	8005250 <__malloc_lock>
 80050a8:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <_free_r+0x90>)
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <_free_r+0x2c>
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	6014      	str	r4, [r2, #0]
 80050b4:	0028      	movs	r0, r5
 80050b6:	f000 f8d3 	bl	8005260 <__malloc_unlock>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d908      	bls.n	80050d2 <_free_r+0x42>
 80050c0:	6821      	ldr	r1, [r4, #0]
 80050c2:	1860      	adds	r0, r4, r1
 80050c4:	4283      	cmp	r3, r0
 80050c6:	d1f3      	bne.n	80050b0 <_free_r+0x20>
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	1841      	adds	r1, r0, r1
 80050ce:	6021      	str	r1, [r4, #0]
 80050d0:	e7ee      	b.n	80050b0 <_free_r+0x20>
 80050d2:	001a      	movs	r2, r3
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <_free_r+0x4e>
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d9f9      	bls.n	80050d2 <_free_r+0x42>
 80050de:	6811      	ldr	r1, [r2, #0]
 80050e0:	1850      	adds	r0, r2, r1
 80050e2:	42a0      	cmp	r0, r4
 80050e4:	d10b      	bne.n	80050fe <_free_r+0x6e>
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1809      	adds	r1, r1, r0
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	4283      	cmp	r3, r0
 80050f0:	d1e0      	bne.n	80050b4 <_free_r+0x24>
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	1841      	adds	r1, r0, r1
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	6053      	str	r3, [r2, #4]
 80050fc:	e7da      	b.n	80050b4 <_free_r+0x24>
 80050fe:	42a0      	cmp	r0, r4
 8005100:	d902      	bls.n	8005108 <_free_r+0x78>
 8005102:	230c      	movs	r3, #12
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	e7d5      	b.n	80050b4 <_free_r+0x24>
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	1860      	adds	r0, r4, r1
 800510c:	4283      	cmp	r3, r0
 800510e:	d103      	bne.n	8005118 <_free_r+0x88>
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	1841      	adds	r1, r0, r1
 8005116:	6021      	str	r1, [r4, #0]
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	6054      	str	r4, [r2, #4]
 800511c:	e7ca      	b.n	80050b4 <_free_r+0x24>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	20000154 	.word	0x20000154

08005124 <_malloc_r>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	2303      	movs	r3, #3
 8005128:	1ccd      	adds	r5, r1, #3
 800512a:	439d      	bics	r5, r3
 800512c:	3508      	adds	r5, #8
 800512e:	0006      	movs	r6, r0
 8005130:	2d0c      	cmp	r5, #12
 8005132:	d21f      	bcs.n	8005174 <_malloc_r+0x50>
 8005134:	250c      	movs	r5, #12
 8005136:	42a9      	cmp	r1, r5
 8005138:	d81e      	bhi.n	8005178 <_malloc_r+0x54>
 800513a:	0030      	movs	r0, r6
 800513c:	f000 f888 	bl	8005250 <__malloc_lock>
 8005140:	4925      	ldr	r1, [pc, #148]	; (80051d8 <_malloc_r+0xb4>)
 8005142:	680a      	ldr	r2, [r1, #0]
 8005144:	0014      	movs	r4, r2
 8005146:	2c00      	cmp	r4, #0
 8005148:	d11a      	bne.n	8005180 <_malloc_r+0x5c>
 800514a:	4f24      	ldr	r7, [pc, #144]	; (80051dc <_malloc_r+0xb8>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <_malloc_r+0x38>
 8005152:	0021      	movs	r1, r4
 8005154:	0030      	movs	r0, r6
 8005156:	f000 f869 	bl	800522c <_sbrk_r>
 800515a:	6038      	str	r0, [r7, #0]
 800515c:	0029      	movs	r1, r5
 800515e:	0030      	movs	r0, r6
 8005160:	f000 f864 	bl	800522c <_sbrk_r>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d12b      	bne.n	80051c0 <_malloc_r+0x9c>
 8005168:	230c      	movs	r3, #12
 800516a:	0030      	movs	r0, r6
 800516c:	6033      	str	r3, [r6, #0]
 800516e:	f000 f877 	bl	8005260 <__malloc_unlock>
 8005172:	e003      	b.n	800517c <_malloc_r+0x58>
 8005174:	2d00      	cmp	r5, #0
 8005176:	dade      	bge.n	8005136 <_malloc_r+0x12>
 8005178:	230c      	movs	r3, #12
 800517a:	6033      	str	r3, [r6, #0]
 800517c:	2000      	movs	r0, #0
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	1b5b      	subs	r3, r3, r5
 8005184:	d419      	bmi.n	80051ba <_malloc_r+0x96>
 8005186:	2b0b      	cmp	r3, #11
 8005188:	d903      	bls.n	8005192 <_malloc_r+0x6e>
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	18e4      	adds	r4, r4, r3
 800518e:	6025      	str	r5, [r4, #0]
 8005190:	e003      	b.n	800519a <_malloc_r+0x76>
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	42a2      	cmp	r2, r4
 8005196:	d10e      	bne.n	80051b6 <_malloc_r+0x92>
 8005198:	600b      	str	r3, [r1, #0]
 800519a:	0030      	movs	r0, r6
 800519c:	f000 f860 	bl	8005260 <__malloc_unlock>
 80051a0:	0020      	movs	r0, r4
 80051a2:	2207      	movs	r2, #7
 80051a4:	300b      	adds	r0, #11
 80051a6:	1d23      	adds	r3, r4, #4
 80051a8:	4390      	bics	r0, r2
 80051aa:	1ac2      	subs	r2, r0, r3
 80051ac:	4298      	cmp	r0, r3
 80051ae:	d0e6      	beq.n	800517e <_malloc_r+0x5a>
 80051b0:	1a1b      	subs	r3, r3, r0
 80051b2:	50a3      	str	r3, [r4, r2]
 80051b4:	e7e3      	b.n	800517e <_malloc_r+0x5a>
 80051b6:	6053      	str	r3, [r2, #4]
 80051b8:	e7ef      	b.n	800519a <_malloc_r+0x76>
 80051ba:	0022      	movs	r2, r4
 80051bc:	6864      	ldr	r4, [r4, #4]
 80051be:	e7c2      	b.n	8005146 <_malloc_r+0x22>
 80051c0:	2303      	movs	r3, #3
 80051c2:	1cc4      	adds	r4, r0, #3
 80051c4:	439c      	bics	r4, r3
 80051c6:	42a0      	cmp	r0, r4
 80051c8:	d0e1      	beq.n	800518e <_malloc_r+0x6a>
 80051ca:	1a21      	subs	r1, r4, r0
 80051cc:	0030      	movs	r0, r6
 80051ce:	f000 f82d 	bl	800522c <_sbrk_r>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	d1db      	bne.n	800518e <_malloc_r+0x6a>
 80051d6:	e7c7      	b.n	8005168 <_malloc_r+0x44>
 80051d8:	20000154 	.word	0x20000154
 80051dc:	20000158 	.word	0x20000158

080051e0 <_realloc_r>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	0007      	movs	r7, r0
 80051e4:	000d      	movs	r5, r1
 80051e6:	0016      	movs	r6, r2
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d105      	bne.n	80051f8 <_realloc_r+0x18>
 80051ec:	0011      	movs	r1, r2
 80051ee:	f7ff ff99 	bl	8005124 <_malloc_r>
 80051f2:	0004      	movs	r4, r0
 80051f4:	0020      	movs	r0, r4
 80051f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	d103      	bne.n	8005204 <_realloc_r+0x24>
 80051fc:	f7ff ff48 	bl	8005090 <_free_r>
 8005200:	0034      	movs	r4, r6
 8005202:	e7f7      	b.n	80051f4 <_realloc_r+0x14>
 8005204:	f000 f834 	bl	8005270 <_malloc_usable_size_r>
 8005208:	002c      	movs	r4, r5
 800520a:	42b0      	cmp	r0, r6
 800520c:	d2f2      	bcs.n	80051f4 <_realloc_r+0x14>
 800520e:	0031      	movs	r1, r6
 8005210:	0038      	movs	r0, r7
 8005212:	f7ff ff87 	bl	8005124 <_malloc_r>
 8005216:	1e04      	subs	r4, r0, #0
 8005218:	d0ec      	beq.n	80051f4 <_realloc_r+0x14>
 800521a:	0029      	movs	r1, r5
 800521c:	0032      	movs	r2, r6
 800521e:	f7ff ff2e 	bl	800507e <memcpy>
 8005222:	0029      	movs	r1, r5
 8005224:	0038      	movs	r0, r7
 8005226:	f7ff ff33 	bl	8005090 <_free_r>
 800522a:	e7e3      	b.n	80051f4 <_realloc_r+0x14>

0800522c <_sbrk_r>:
 800522c:	2300      	movs	r3, #0
 800522e:	b570      	push	{r4, r5, r6, lr}
 8005230:	4d06      	ldr	r5, [pc, #24]	; (800524c <_sbrk_r+0x20>)
 8005232:	0004      	movs	r4, r0
 8005234:	0008      	movs	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fb ffe2 	bl	8001200 <_sbrk>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d103      	bne.n	8005248 <_sbrk_r+0x1c>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d000      	beq.n	8005248 <_sbrk_r+0x1c>
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	2000022c 	.word	0x2000022c

08005250 <__malloc_lock>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4802      	ldr	r0, [pc, #8]	; (800525c <__malloc_lock+0xc>)
 8005254:	f7ff ff06 	bl	8005064 <__retarget_lock_acquire_recursive>
 8005258:	bd10      	pop	{r4, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	20000234 	.word	0x20000234

08005260 <__malloc_unlock>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4802      	ldr	r0, [pc, #8]	; (800526c <__malloc_unlock+0xc>)
 8005264:	f7ff feff 	bl	8005066 <__retarget_lock_release_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20000234 	.word	0x20000234

08005270 <_malloc_usable_size_r>:
 8005270:	1f0b      	subs	r3, r1, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	1f18      	subs	r0, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	da01      	bge.n	800527e <_malloc_usable_size_r+0xe>
 800527a:	580b      	ldr	r3, [r1, r0]
 800527c:	18c0      	adds	r0, r0, r3
 800527e:	4770      	bx	lr

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
