
Calibrator_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  080044c4  080044c4  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c4  080044c4  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080044cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200000f8  080045c4  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080045c4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c258  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  0002c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010891  00000000  00000000  0002f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acb3  00000000  00000000  0003fb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ddf7  00000000  00000000  0004a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a8603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002120  00000000  00000000  000a8658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042a4 	.word	0x080042a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	080042a4 	.word	0x080042a4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <app_main>:
/*----------------------------------prototypes function----------------------------*/

/*----------------------------------extern-----------------------------------------*/

void app_main()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	TMR_Init();
 8000248:	f000 fb60 	bl	800090c <TMR_Init>
	TMR_Add( &ledTimer, ledTimer_Callback, TMR_RELOAD_YES );	// Обычный секундный беспонтовый светодиод
 800024c:	490d      	ldr	r1, [pc, #52]	; (8000284 <app_main+0x40>)
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <app_main+0x44>)
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fb9a 	bl	800098c <TMR_Add>
	TMR_Start( &ledTimer, 1000);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <app_main+0x44>)
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fbe5 	bl	8000a30 <TMR_Start>

	CAMCMD_Init(camera_cmd_callback);
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <app_main+0x48>)
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fa73 	bl	8000754 <CAMCMD_Init>
	eAPP_StartMCUReceive();
 800026e:	f000 f849 	bl	8000304 <eAPP_StartMCUReceive>
	while(1)
	{
		TMR_ExecuteCallbacks();
 8000272:	f000 fc16 	bl	8000aa2 <TMR_ExecuteCallbacks>
		CAMCMD_ProcessMessages();
 8000276:	f000 fa81 	bl	800077c <CAMCMD_ProcessMessages>
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		//eAPP_UART_Transmit_IT(cmdButton_1,sizeof(cmdButton_1)-1);
		HAL_Delay(200);
 800027a:	20c8      	movs	r0, #200	; 0xc8
 800027c:	f000 ff00 	bl	8001080 <HAL_Delay>
		TMR_ExecuteCallbacks();
 8000280:	e7f7      	b.n	8000272 <app_main+0x2e>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	08000291 	.word	0x08000291
 8000288:	20000114 	.word	0x20000114
 800028c:	080002ad 	.word	0x080002ad

08000290 <ledTimer_Callback>:
		//HAL_UART_Transmit(&huart2, cmdButton_1,sizeof(cmdButton_1)-1,0xffff);
	}
}

void ledTimer_Callback(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <ledTimer_Callback+0x18>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f001 f9fc 	bl	800169a <HAL_GPIO_TogglePin>
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	48000400 	.word	0x48000400

080002ac <camera_cmd_callback>:

static void camera_cmd_callback(CMD_Type cmd, const CAMARG *args ){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]

	switch(cmd){
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d00b      	beq.n	80002da <camera_cmd_callback+0x2e>
 80002c2:	dc13      	bgt.n	80002ec <camera_cmd_callback+0x40>
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d002      	beq.n	80002ce <camera_cmd_callback+0x22>
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	d011      	beq.n	80002f0 <camera_cmd_callback+0x44>
			break;
		case CMD_STOP_MOTOR:

			break;
		default:
			break;
 80002cc:	e00e      	b.n	80002ec <camera_cmd_callback+0x40>
			eAPP_UART_Transmit_IT(cmdButton_1,sizeof(cmdButton_1)-1);
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <camera_cmd_callback+0x50>)
 80002d0:	2118      	movs	r1, #24
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 f83e 	bl	8000354 <eAPP_UART_Transmit_IT>
			break;
 80002d8:	e00b      	b.n	80002f2 <camera_cmd_callback+0x46>
			motor_step = args->parametr.ValueParametr[0];
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	8c1b      	ldrh	r3, [r3, #32]
 80002de:	b21a      	sxth	r2, r3
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <camera_cmd_callback+0x54>)
 80002e2:	801a      	strh	r2, [r3, #0]
			HAL_Delay(100);
 80002e4:	2064      	movs	r0, #100	; 0x64
 80002e6:	f000 fecb 	bl	8001080 <HAL_Delay>
			break;
 80002ea:	e002      	b.n	80002f2 <camera_cmd_callback+0x46>
			break;
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	e000      	b.n	80002f2 <camera_cmd_callback+0x46>
			break;
 80002f0:	46c0      	nop			; (mov r8, r8)
	}
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000128 	.word	0x20000128

08000304 <eAPP_StartMCUReceive>:

static uint8_t data;
void eAPP_StartMCUReceive( void ){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT( &huart2, &data, 1 );
 8000308:	4904      	ldr	r1, [pc, #16]	; (800031c <eAPP_StartMCUReceive+0x18>)
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <eAPP_StartMCUReceive+0x1c>)
 800030c:	2201      	movs	r2, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 ffee 	bl	80022f0 <HAL_UART_Receive_IT>
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	2000012a 	.word	0x2000012a
 8000320:	200001d4 	.word	0x200001d4

08000324 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	if(huart ==&huart2){
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <HAL_UART_RxCpltCallback+0x28>)
 8000330:	429a      	cmp	r2, r3
 8000332:	d104      	bne.n	800033e <HAL_UART_RxCpltCallback+0x1a>
		MCU_HandleByte(data);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_UART_RxCpltCallback+0x2c>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	0018      	movs	r0, r3
 800033a:	f000 f889 	bl	8000450 <MCU_HandleByte>
	}
	eAPP_StartMCUReceive();
 800033e:	f7ff ffe1 	bl	8000304 <eAPP_StartMCUReceive>
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	200001d4 	.word	0x200001d4
 8000350:	2000012a 	.word	0x2000012a

08000354 <eAPP_UART_Transmit_IT>:
void eAPP_UART_Transmit_IT(unsigned char str[],int len){
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, str,len);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	b29a      	uxth	r2, r3
 8000362:	6879      	ldr	r1, [r7, #4]
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <eAPP_UART_Transmit_IT+0x20>)
 8000366:	0018      	movs	r0, r3
 8000368:	f001 ff42 	bl	80021f0 <HAL_UART_Transmit_IT>
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b002      	add	sp, #8
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200001d4 	.word	0x200001d4

08000378 <_parse_set_laser>:
			{ .type = CMD_SET_STEP, 		.cnt = 0, 		 	.cmd = "SET_STEP:", 		.parse_arg = _parse_set_laser },
			{ .type = CMD_SET_STEP_, 		.cnt = 0, 		  	.cmd = "SET_STEP_:", 		.parse_arg = _parse_time_led }
		}
};

static int _parse_set_laser( unsigned char c, CAMARG *arg ){
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	0002      	movs	r2, r0
 8000380:	6039      	str	r1, [r7, #0]
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	701a      	strb	r2, [r3, #0]

	static int val;
	int res= find_int(c,arg->buf,&arg->cnt,&val);
 8000386:	6839      	ldr	r1, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	331e      	adds	r3, #30
 800038c:	001a      	movs	r2, r3
 800038e:	4c14      	ldr	r4, [pc, #80]	; (80003e0 <_parse_set_laser+0x68>)
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	7818      	ldrb	r0, [r3, #0]
 8000394:	0023      	movs	r3, r4
 8000396:	f000 f8ad 	bl	80004f4 <find_int>
 800039a:	0003      	movs	r3, r0
 800039c:	60fb      	str	r3, [r7, #12]
	if (res>0){
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	dd0b      	ble.n	80003bc <_parse_set_laser+0x44>
		arg->laser.Laser[0]=val;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <_parse_set_laser+0x68>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	841a      	strh	r2, [r3, #32]
		arg->argCnt++;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	7fdb      	ldrb	r3, [r3, #31]
 80003b2:	3301      	adds	r3, #1
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	77da      	strb	r2, [r3, #31]
 80003ba:	e005      	b.n	80003c8 <_parse_set_laser+0x50>
	}
	else if(res<0){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	da02      	bge.n	80003c8 <_parse_set_laser+0x50>
		return -1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	425b      	negs	r3, r3
 80003c6:	e006      	b.n	80003d6 <_parse_set_laser+0x5e>
	}
	if (arg->argCnt>=1){
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	7fdb      	ldrb	r3, [r3, #31]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <_parse_set_laser+0x5c>
		return 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <_parse_set_laser+0x5e>
	}
	return 0;
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	0018      	movs	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	b005      	add	sp, #20
 80003dc:	bd90      	pop	{r4, r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	20000130 	.word	0x20000130

080003e4 <_parse_time_led>:

static int _parse_time_led(unsigned char c, CAMARG *arg){
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	0002      	movs	r2, r0
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	701a      	strb	r2, [r3, #0]
	static int val;
	int res = find_int(c,arg->buf,&arg->cnt,&val);
 80003f2:	6839      	ldr	r1, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	331e      	adds	r3, #30
 80003f8:	001a      	movs	r2, r3
 80003fa:	4c14      	ldr	r4, [pc, #80]	; (800044c <_parse_time_led+0x68>)
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	7818      	ldrb	r0, [r3, #0]
 8000400:	0023      	movs	r3, r4
 8000402:	f000 f877 	bl	80004f4 <find_int>
 8000406:	0003      	movs	r3, r0
 8000408:	60fb      	str	r3, [r7, #12]
	if (res>0){
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b00      	cmp	r3, #0
 800040e:	dd0b      	ble.n	8000428 <_parse_time_led+0x44>
			arg->laser.Laser[0]=val;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <_parse_time_led+0x68>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	b29a      	uxth	r2, r3
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	841a      	strh	r2, [r3, #32]
			arg->argCnt++;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	7fdb      	ldrb	r3, [r3, #31]
 800041e:	3301      	adds	r3, #1
 8000420:	b2da      	uxtb	r2, r3
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	77da      	strb	r2, [r3, #31]
 8000426:	e005      	b.n	8000434 <_parse_time_led+0x50>
		}
		else if(res<0){
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da02      	bge.n	8000434 <_parse_time_led+0x50>
			return -1;
 800042e:	2301      	movs	r3, #1
 8000430:	425b      	negs	r3, r3
 8000432:	e006      	b.n	8000442 <_parse_time_led+0x5e>
		}
		if (arg->argCnt>=1){
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	7fdb      	ldrb	r3, [r3, #31]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <_parse_time_led+0x5c>
			return 1;
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <_parse_time_led+0x5e>
		}
		return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b005      	add	sp, #20
 8000448:	bd90      	pop	{r4, r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	20000134 	.word	0x20000134

08000450 <MCU_HandleByte>:


MCU_Status MCU_HandleByte(unsigned char data){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	0002      	movs	r2, r0
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	701a      	strb	r2, [r3, #0]
	return _process_char( &comm, data );
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <MCU_HandleByte+0x24>)
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 f8ab 	bl	80005c0 <_process_char>
 800046a:	0003      	movs	r3, r0
}
 800046c:	0018      	movs	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000001c 	.word	0x2000001c

08000478 <find_cmd>:

static int find_cmd( unsigned char c, CAMCMD *cmd ){
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	701a      	strb	r2, [r3, #0]
	if ( cmd->cmd[cmd->cnt] == c ){
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	7852      	ldrb	r2, [r2, #1]
 800048e:	189b      	adds	r3, r3, r2
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	1dfa      	adds	r2, r7, #7
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	d111      	bne.n	80004be <find_cmd+0x46>
		cmd->cnt++;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	785b      	ldrb	r3, [r3, #1]
 800049e:	3301      	adds	r3, #1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	705a      	strb	r2, [r3, #1]
			find_cmd( c, cmd );
		}
		return 0;
	}

	if ( (cmd->cnt) >= strlen(cmd->cmd) ){
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	785b      	ldrb	r3, [r3, #1]
 80004aa:	001c      	movs	r4, r3
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff fe29 	bl	8000108 <strlen>
 80004b6:	0003      	movs	r3, r0
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d315      	bcc.n	80004e8 <find_cmd+0x70>
 80004bc:	e00f      	b.n	80004de <find_cmd+0x66>
		if ( cmd->cnt != 0 ){
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	785b      	ldrb	r3, [r3, #1]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d009      	beq.n	80004da <find_cmd+0x62>
			cmd->cnt = 0;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	705a      	strb	r2, [r3, #1]
			find_cmd( c, cmd );
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff ffcf 	bl	8000478 <find_cmd>
		return 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	e005      	b.n	80004ea <find_cmd+0x72>
		cmd->cnt = 0;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
		return 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e000      	b.n	80004ea <find_cmd+0x72>
	}

	return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b003      	add	sp, #12
 80004f0:	bd90      	pop	{r4, r7, pc}
	...

080004f4 <find_int>:

static int find_int( unsigned char c, unsigned char *buf, uint8_t *cnt, int *val ){
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	230f      	movs	r3, #15
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	701a      	strb	r2, [r3, #0]
	if ( *cnt >= MAX_STRING_BUF ){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b1d      	cmp	r3, #29
 800050e:	d902      	bls.n	8000516 <find_int+0x22>
		*cnt = 0;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	}

	if( (( c >= '0' ) && ( c <= '9' )) || ( c == '-' ) ){
 8000516:	220f      	movs	r2, #15
 8000518:	18bb      	adds	r3, r7, r2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b2f      	cmp	r3, #47	; 0x2f
 800051e:	d903      	bls.n	8000528 <find_int+0x34>
 8000520:	18bb      	adds	r3, r7, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b39      	cmp	r3, #57	; 0x39
 8000526:	d904      	bls.n	8000532 <find_int+0x3e>
 8000528:	230f      	movs	r3, #15
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b2d      	cmp	r3, #45	; 0x2d
 8000530:	d110      	bne.n	8000554 <find_int+0x60>
		buf[*cnt] = c;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	189b      	adds	r3, r3, r2
 800053c:	220f      	movs	r2, #15
 800053e:	18ba      	adds	r2, r7, r2
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
		*cnt += 1;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	701a      	strb	r2, [r3, #0]
		return res;
	}else{
		return -1;
	}

	return 0;
 8000550:	2300      	movs	r3, #0
 8000552:	e02e      	b.n	80005b2 <find_int+0xbe>
	}else if ((c == ',') || (c == 0) || (c == ' ') || ( c == '<')){
 8000554:	220f      	movs	r2, #15
 8000556:	18bb      	adds	r3, r7, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b2c      	cmp	r3, #44	; 0x2c
 800055c:	d00b      	beq.n	8000576 <find_int+0x82>
 800055e:	18bb      	adds	r3, r7, r2
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <find_int+0x82>
 8000566:	18bb      	adds	r3, r7, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b20      	cmp	r3, #32
 800056c:	d003      	beq.n	8000576 <find_int+0x82>
 800056e:	18bb      	adds	r3, r7, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b3c      	cmp	r3, #60	; 0x3c
 8000574:	d11b      	bne.n	80005ae <find_int+0xba>
		uint8_t res = 0;
 8000576:	2417      	movs	r4, #23
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
		if ( sscanf(buf,"%d",val) > 0 ){
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	490e      	ldr	r1, [pc, #56]	; (80005bc <find_int+0xc8>)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	0018      	movs	r0, r3
 8000586:	f003 f883 	bl	8003690 <siscanf>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	dd02      	ble.n	8000594 <find_int+0xa0>
			res = 1;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
		memset( buf, 0, MAX_STRING_BUF );
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	221e      	movs	r2, #30
 8000598:	2100      	movs	r1, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f003 f870 	bl	8003680 <memset>
		*cnt = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
		return res;
 80005a6:	2317      	movs	r3, #23
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	e001      	b.n	80005b2 <find_int+0xbe>
		return -1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	425b      	negs	r3, r3
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	080042fc 	.word	0x080042fc

080005c0 <_process_char>:

static MCU_Status _process_char( CAM_COM *cam, unsigned char c ){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	000a      	movs	r2, r1
 80005ca:	1cfb      	adds	r3, r7, #3
 80005cc:	701a      	strb	r2, [r3, #0]
	if ( find_cmd( c, &cam->cmd[CMD_END] ) ){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3330      	adds	r3, #48	; 0x30
 80005d2:	001a      	movs	r2, r3
 80005d4:	1cfb      	adds	r3, r7, #3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff4c 	bl	8000478 <find_cmd>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d010      	beq.n	8000606 <_process_char+0x46>
		if ( ( cam->state != STATE_WAIT_EXEC ) || (handle_cmd == 0) ){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2222      	movs	r2, #34	; 0x22
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d103      	bne.n	80005f6 <_process_char+0x36>
 80005ee:	4b58      	ldr	r3, [pc, #352]	; (8000750 <_process_char+0x190>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d107      	bne.n	8000606 <_process_char+0x46>
			cam->state = STATE_NONE;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2222      	movs	r2, #34	; 0x22
 80005fa:	2100      	movs	r1, #0
 80005fc:	5499      	strb	r1, [r3, r2]
			cam->foundCmd = CMD_NONE;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2223      	movs	r2, #35	; 0x23
 8000602:	2106      	movs	r1, #6
 8000604:	5499      	strb	r1, [r3, r2]
		}
	}

	if ( find_cmd( c, &cam->cmd[CMD_BEGIN] ) ){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3324      	adds	r3, #36	; 0x24
 800060a:	001a      	movs	r2, r3
 800060c:	1cfb      	adds	r3, r7, #3
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff30 	bl	8000478 <find_cmd>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d013      	beq.n	8000644 <_process_char+0x84>
		cam->state = STATE_CMD_DECODE_CMD;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2222      	movs	r2, #34	; 0x22
 8000620:	2101      	movs	r1, #1
 8000622:	5499      	strb	r1, [r3, r2]
		cam->foundCmd = CMD_NONE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2223      	movs	r2, #35	; 0x23
 8000628:	2106      	movs	r1, #6
 800062a:	5499      	strb	r1, [r3, r2]
		cam->arg.argCnt = 0;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	77da      	strb	r2, [r3, #31]
		cam->arg.cnt = 0;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	779a      	strb	r2, [r3, #30]
		memset(cam->arg.buf, 0, MAX_STRING_BUF);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	221e      	movs	r2, #30
 800063c:	2100      	movs	r1, #0
 800063e:	0018      	movs	r0, r3
 8000640:	f003 f81e 	bl	8003680 <memset>
	}

	switch (cam->state){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2222      	movs	r2, #34	; 0x22
 8000648:	5c9b      	ldrb	r3, [r3, r2]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d063      	beq.n	8000716 <_process_char+0x156>
 800064e:	dd00      	ble.n	8000652 <_process_char+0x92>
 8000650:	e06b      	b.n	800072a <_process_char+0x16a>
 8000652:	2b02      	cmp	r3, #2
 8000654:	d029      	beq.n	80006aa <_process_char+0xea>
 8000656:	dc68      	bgt.n	800072a <_process_char+0x16a>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d100      	bne.n	800065e <_process_char+0x9e>
 800065c:	e06e      	b.n	800073c <_process_char+0x17c>
 800065e:	2b01      	cmp	r3, #1
 8000660:	d163      	bne.n	800072a <_process_char+0x16a>

		}break;

		case STATE_CMD_DECODE_CMD:{

			for ( int i = 2; i < ARRAY_SIZE(cam->cmd); i++ ){
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e01c      	b.n	80006a2 <_process_char+0xe2>
				if ( find_cmd( c, &cam->cmd[i] ) ){
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	0013      	movs	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	189b      	adds	r3, r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	3320      	adds	r3, #32
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	1d1a      	adds	r2, r3, #4
 800067a:	1cfb      	adds	r3, r7, #3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff fef9 	bl	8000478 <find_cmd>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d008      	beq.n	800069c <_process_char+0xdc>
					cam->state = STATE_GET_ARGS;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2222      	movs	r2, #34	; 0x22
 800068e:	2102      	movs	r1, #2
 8000690:	5499      	strb	r1, [r3, r2]
					cam->foundCmd = i;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	b2d9      	uxtb	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2223      	movs	r2, #35	; 0x23
 800069a:	5499      	strb	r1, [r3, r2]
			for ( int i = 2; i < ARRAY_SIZE(cam->cmd); i++ ){
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b05      	cmp	r3, #5
 80006a6:	d9df      	bls.n	8000668 <_process_char+0xa8>
				}
			}

		}break;
 80006a8:	e04d      	b.n	8000746 <_process_char+0x186>

		case STATE_GET_ARGS:{
			if ( cam->cmd[cam->foundCmd].parse_arg != 0 ){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2223      	movs	r2, #35	; 0x23
 80006ae:	5c9b      	ldrb	r3, [r3, r2]
 80006b0:	0019      	movs	r1, r3
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	000b      	movs	r3, r1
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	332c      	adds	r3, #44	; 0x2c
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d022      	beq.n	800070c <_process_char+0x14c>
				int res = cam->cmd[cam->foundCmd].parse_arg( c, &cam->arg );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2223      	movs	r2, #35	; 0x23
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	0019      	movs	r1, r3
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	000b      	movs	r3, r1
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	185b      	adds	r3, r3, r1
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	332c      	adds	r3, #44	; 0x2c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	1cfa      	adds	r2, r7, #3
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	0010      	movs	r0, r2
 80006e6:	4798      	blx	r3
 80006e8:	0003      	movs	r3, r0
 80006ea:	60bb      	str	r3, [r7, #8]
				if ( res > 0 ){
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dd04      	ble.n	80006fc <_process_char+0x13c>
					cam->state = STATE_WAIT_EXEC;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2222      	movs	r2, #34	; 0x22
 80006f6:	2103      	movs	r1, #3
 80006f8:	5499      	strb	r1, [r3, r2]
				}
			}else{

				cam->state = STATE_WAIT_EXEC;
			}
		}break;
 80006fa:	e021      	b.n	8000740 <_process_char+0x180>
				}else if ( res < 0 ){
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da1e      	bge.n	8000740 <_process_char+0x180>
					cam->state = STATE_NONE;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2222      	movs	r2, #34	; 0x22
 8000706:	2100      	movs	r1, #0
 8000708:	5499      	strb	r1, [r3, r2]
		}break;
 800070a:	e019      	b.n	8000740 <_process_char+0x180>
				cam->state = STATE_WAIT_EXEC;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2222      	movs	r2, #34	; 0x22
 8000710:	2103      	movs	r1, #3
 8000712:	5499      	strb	r1, [r3, r2]
		}break;
 8000714:	e014      	b.n	8000740 <_process_char+0x180>

		case STATE_WAIT_EXEC:{
			//При выполнении колбека программа должна сбросить foundCmd, что является сигналом о том, что обработка команды закончена
			if ( cam->foundCmd == CMD_NONE ){
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2223      	movs	r2, #35	; 0x23
 800071a:	5c9b      	ldrb	r3, [r3, r2]
 800071c:	2b06      	cmp	r3, #6
 800071e:	d111      	bne.n	8000744 <_process_char+0x184>
				cam->state = STATE_NONE;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2222      	movs	r2, #34	; 0x22
 8000724:	2100      	movs	r1, #0
 8000726:	5499      	strb	r1, [r3, r2]
			}
		}break;
 8000728:	e00c      	b.n	8000744 <_process_char+0x184>

		default:{
			cam->state = STATE_NONE;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2222      	movs	r2, #34	; 0x22
 800072e:	2100      	movs	r1, #0
 8000730:	5499      	strb	r1, [r3, r2]
			cam->foundCmd = CMD_NONE;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2223      	movs	r2, #35	; 0x23
 8000736:	2106      	movs	r1, #6
 8000738:	5499      	strb	r1, [r3, r2]
 800073a:	e004      	b.n	8000746 <_process_char+0x186>
		}break;
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	e002      	b.n	8000746 <_process_char+0x186>
		}break;
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	e000      	b.n	8000746 <_process_char+0x186>
		}break;
 8000744:	46c0      	nop			; (mov r8, r8)
		}
	}

	return MCUSTAT_OK;
 8000746:	2300      	movs	r3, #0
}
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	b004      	add	sp, #16
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000012c 	.word	0x2000012c

08000754 <CAMCMD_Init>:

MCU_Status CAMCMD_Init( CMD_HANDL_CALLBACK callback ){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if ( callback == 0 ){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <CAMCMD_Init+0x12>
		return MCUSTAT_ERR;
 8000762:	2301      	movs	r3, #1
 8000764:	e003      	b.n	800076e <CAMCMD_Init+0x1a>
	}
	handle_cmd = callback;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <CAMCMD_Init+0x24>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
	return MCUSTAT_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	0018      	movs	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	2000012c 	.word	0x2000012c

0800077c <CAMCMD_ProcessMessages>:

void CAMCMD_ProcessMessages( void ){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
		if ( comm.state == STATE_WAIT_EXEC && handle_cmd && comm.foundCmd != CMD_NONE ){
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 8000782:	2222      	movs	r2, #34	; 0x22
 8000784:	5c9b      	ldrb	r3, [r3, r2]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d11a      	bne.n	80007c0 <CAMCMD_ProcessMessages+0x44>
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <CAMCMD_ProcessMessages+0x50>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d016      	beq.n	80007c0 <CAMCMD_ProcessMessages+0x44>
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	5c9b      	ldrb	r3, [r3, r2]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d011      	beq.n	80007c0 <CAMCMD_ProcessMessages+0x44>
			handle_cmd( comm.foundCmd, &comm.arg );
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <CAMCMD_ProcessMessages+0x50>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 80007a2:	2123      	movs	r1, #35	; 0x23
 80007a4:	5c52      	ldrb	r2, [r2, r1]
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 80007a8:	0010      	movs	r0, r2
 80007aa:	4798      	blx	r3
			comm.foundCmd = CMD_NONE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 80007ae:	2223      	movs	r2, #35	; 0x23
 80007b0:	2106      	movs	r1, #6
 80007b2:	5499      	strb	r1, [r3, r2]
			memset(&comm.arg, 0, sizeof(CAMARG));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <CAMCMD_ProcessMessages+0x4c>)
 80007b6:	2222      	movs	r2, #34	; 0x22
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 ff60 	bl	8003680 <memset>
		}
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	2000001c 	.word	0x2000001c
 80007cc:	2000012c 	.word	0x2000012c

080007d0 <_decrementAllTimers>:
 */

/** @addtogroup Timer_PrivateFunctions
 * @{
 */
static void _decrementAllTimers(uint32_t decrement) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	Timer *currentTimer = headTimer;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <_decrementAllTimers+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60fb      	str	r3, [r7, #12]
	while (currentTimer != 0) {
 80007de:	e01c      	b.n	800081a <_decrementAllTimers+0x4a>
		if (currentTimer->count && currentTimer->state.exState == TIMER_RUN) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d015      	beq.n	8000814 <_decrementAllTimers+0x44>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	7b1b      	ldrb	r3, [r3, #12]
 80007ec:	220f      	movs	r2, #15
 80007ee:	4013      	ands	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d10e      	bne.n	8000814 <_decrementAllTimers+0x44>
			if (currentTimer->count > decrement) {
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d206      	bcs.n	800080e <_decrementAllTimers+0x3e>
				currentTimer->count -= decrement;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e002      	b.n	8000814 <_decrementAllTimers+0x44>
			} else {
				currentTimer->count = 0;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
			}
		}
		currentTimer = currentTimer->nextTimer;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	60fb      	str	r3, [r7, #12]
	while (currentTimer != 0) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1df      	bne.n	80007e0 <_decrementAllTimers+0x10>
	}
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b004      	add	sp, #16
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000140 	.word	0x20000140

08000830 <_checkElapsedTimers>:
/**
 * @brief  Проверяем, какие таймеры закончились, выставляем флаги, перезапускаем если необходимо
 * @param  None
 * @retval None
 */
static void _checkElapsedTimers(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	Timer *currentTimer = headTimer;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <_checkElapsedTimers+0x6c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 800083c:	e026      	b.n	800088c <_checkElapsedTimers+0x5c>
		if (currentTimer->count == 0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11f      	bne.n	8000886 <_checkElapsedTimers+0x56>
				&& currentTimer->state.exState == TIMER_RUN) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7b1b      	ldrb	r3, [r3, #12]
 800084a:	220f      	movs	r2, #15
 800084c:	4013      	ands	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d118      	bne.n	8000886 <_checkElapsedTimers+0x56>
			if (currentTimer->config.isAutoReload) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b5b      	ldrb	r3, [r3, #13]
 8000858:	2201      	movs	r2, #1
 800085a:	4013      	ands	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <_checkElapsedTimers+0x3c>
				TMR_Restart(currentTimer);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	0018      	movs	r0, r3
 8000866:	f000 f908 	bl	8000a7a <TMR_Restart>
 800086a:	e007      	b.n	800087c <_checkElapsedTimers+0x4c>
			} else {
				currentTimer->state.exState = TIMER_END;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7b1a      	ldrb	r2, [r3, #12]
 8000870:	210f      	movs	r1, #15
 8000872:	438a      	bics	r2, r1
 8000874:	1c11      	adds	r1, r2, #0
 8000876:	2201      	movs	r2, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	731a      	strb	r2, [r3, #12]
			}
			currentTimer->state.callbackFlag = 1;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7b1a      	ldrb	r2, [r3, #12]
 8000880:	2110      	movs	r1, #16
 8000882:	430a      	orrs	r2, r1
 8000884:	731a      	strb	r2, [r3, #12]
		}
		currentTimer = currentTimer->nextTimer;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1d5      	bne.n	800083e <_checkElapsedTimers+0xe>
	}
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000140 	.word	0x20000140

080008a0 <_executeAllCallbacks>:

static void _executeAllCallbacks(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

#ifdef WATCHDOG
	eTMR_ClearWatchdog();
  #endif
	Timer *currentTimer = headTimer;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_executeAllCallbacks+0x4c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	607b      	str	r3, [r7, #4]

	while (currentTimer != 0) {
 80008ac:	e015      	b.n	80008da <_executeAllCallbacks+0x3a>
#ifdef WATCHDOG
	  eTMR_ClearWatchdog();
    #endif
		if (currentTimer->state.callbackFlag) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7b1b      	ldrb	r3, [r3, #12]
 80008b2:	2210      	movs	r2, #16
 80008b4:	4013      	ands	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00b      	beq.n	80008d4 <_executeAllCallbacks+0x34>
			currentTimer->state.callbackFlag = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7b1a      	ldrb	r2, [r3, #12]
 80008c0:	2110      	movs	r1, #16
 80008c2:	438a      	bics	r2, r1
 80008c4:	731a      	strb	r2, [r3, #12]
			exec_cb(currentTimer->CallBackFunction);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <_executeAllCallbacks+0x34>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4798      	blx	r3
		}
		currentTimer = currentTimer->nextTimer;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	607b      	str	r3, [r7, #4]
	while (currentTimer != 0) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e6      	bne.n	80008ae <_executeAllCallbacks+0xe>
	}
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000140 	.word	0x20000140

080008f0 <TMR_IRQ>:
}
/**
 * @}
 */

void TMR_IRQ(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	msFromStart++;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <TMR_IRQ+0x18>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	4b03      	ldr	r3, [pc, #12]	; (8000908 <TMR_IRQ+0x18>)
 80008fc:	601a      	str	r2, [r3, #0]
	TMR_Tick(); //Можно здесь (если таймеров мало), а можно в контексте main. Например в TMR_ExecuteCallbacks
 80008fe:	f000 f819 	bl	8000934 <TMR_Tick>
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000138 	.word	0x20000138

0800090c <TMR_Init>:
/**
 * @brief  Инициализируем таймер
 * @param  TIM заполненная структура типа Timer_InitTypeDef
 * @retval None
 */
void TMR_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	msFromStart = 0;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <TMR_Init+0x1c>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
	headTimer = 0;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <TMR_Init+0x20>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
	oldTime = 0;
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <TMR_Init+0x24>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
#ifdef WATCHDOG
  _init_watchdog();
#endif
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000138 	.word	0x20000138
 800092c:	20000140 	.word	0x20000140
 8000930:	2000013c 	.word	0x2000013c

08000934 <TMR_Tick>:
/**
 * @brief  Декрементировать все активные таймеры на время, прошедшее с последнего вызова
 * @param  None
 * @retval None
 */
void TMR_Tick(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	//__disable_interrupt();
	uint32_t newTime = msFromStart;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <TMR_Tick+0x50>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	603b      	str	r3, [r7, #0]
	//__enable_interrupt();
	uint32_t delta = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
	if (newTime < oldTime) { //произошло переполнение. 49 суток, но мало ли...
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <TMR_Tick+0x54>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	d206      	bcs.n	800095c <TMR_Tick+0x28>
		delta = 0xFFFFFFFF - oldTime + newTime;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <TMR_Tick+0x54>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	3b01      	subs	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	e004      	b.n	8000966 <TMR_Tick+0x32>
	} else {
		delta = newTime - oldTime;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <TMR_Tick+0x54>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	607b      	str	r3, [r7, #4]
	}
	if (delta == 0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d007      	beq.n	800097c <TMR_Tick+0x48>
		return;

	oldTime = newTime;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <TMR_Tick+0x54>)
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	601a      	str	r2, [r3, #0]

	_decrementAllTimers(delta);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff2b 	bl	80007d0 <_decrementAllTimers>
 800097a:	e000      	b.n	800097e <TMR_Tick+0x4a>
		return;
 800097c:	46c0      	nop			; (mov r8, r8)
}
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000138 	.word	0x20000138
 8000988:	2000013c 	.word	0x2000013c

0800098c <TMR_Add>:
 * @brief  Добавляет таймер.
 * @param  timer - структура таймера, которая добавится к общему списку
 * @param  callbackFunction функция, которая выполнится после того, как таймер закончит счет
 * @retval None
 */
void TMR_Add(Timer *timer, void (*callback)(void), AutoreloadSetup autoreload) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	701a      	strb	r2, [r3, #0]
	timer->CallBackFunction = callback;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	609a      	str	r2, [r3, #8]
	timer->count = 0;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	timer->reloadValue = 0;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
	timer->state.exState = TIMER_STOP;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7b1a      	ldrb	r2, [r3, #12]
 80009b0:	210f      	movs	r1, #15
 80009b2:	438a      	bics	r2, r1
 80009b4:	731a      	strb	r2, [r3, #12]
	timer->state.callbackFlag = 0;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	7b1a      	ldrb	r2, [r3, #12]
 80009ba:	2110      	movs	r1, #16
 80009bc:	438a      	bics	r2, r1
 80009be:	731a      	strb	r2, [r3, #12]
	if (autoreload) {
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <TMR_Add+0x48>
		timer->config.isAutoReload = 1;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	7b5a      	ldrb	r2, [r3, #13]
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	735a      	strb	r2, [r3, #13]
 80009d2:	e004      	b.n	80009de <TMR_Add+0x52>
	} else {
		timer->config.isAutoReload = 0;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	7b5a      	ldrb	r2, [r3, #13]
 80009d8:	2101      	movs	r1, #1
 80009da:	438a      	bics	r2, r1
 80009dc:	735a      	strb	r2, [r3, #13]
	}

	//Еще нет ни одного таймера
	if (headTimer == 0) {
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <TMR_Add+0xa0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d106      	bne.n	80009f4 <TMR_Add+0x68>
		timer->nextTimer = 0;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
		headTimer = timer;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <TMR_Add+0xa0>)
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]
		return;
 80009f2:	e017      	b.n	8000a24 <TMR_Add+0x98>
	}

	//Проходим список от начала и до конца, проверяя таймеры на повтор
	Timer *currentTimer = headTimer;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <TMR_Add+0xa0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	617b      	str	r3, [r7, #20]
	while (currentTimer->nextTimer != 0) {
 80009fa:	e006      	b.n	8000a0a <TMR_Add+0x7e>
		if (currentTimer != timer) {
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d00e      	beq.n	8000a22 <TMR_Add+0x96>
			currentTimer = currentTimer->nextTimer;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	617b      	str	r3, [r7, #20]
	while (currentTimer->nextTimer != 0) {
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f4      	bne.n	80009fc <TMR_Add+0x70>
			return; //Ошибка, в списке таймеров такой таймер уже есть
		}
	}

	//Цепляем новый таймер в начало списка (можно в конец, если воспользоваться переменной currentTimer)
	timer->nextTimer = headTimer;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <TMR_Add+0xa0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	611a      	str	r2, [r3, #16]
	headTimer = timer;
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <TMR_Add+0xa0>)
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e000      	b.n	8000a24 <TMR_Add+0x98>
			return; //Ошибка, в списке таймеров такой таймер уже есть
 8000a22:	46c0      	nop			; (mov r8, r8)
}
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b006      	add	sp, #24
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000140 	.word	0x20000140

08000a30 <TMR_Start>:
 * @brief  Запустить таймер не трогая счетчик. Если таймер остановлен - продолжит выполнение, если уже запущен - ничего не произойдет.
 * @param  timer - таймер, над которым проводится операция
 * @param  delay - время таймера в мс
 * @retval event текущий статус таймера
 */
void TMR_Start(Timer *timer, uint32_t delay) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	if (timer->state.exState == TIMER_STOP
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7b1b      	ldrb	r3, [r3, #12]
 8000a3e:	220f      	movs	r2, #15
 8000a40:	4013      	ands	r3, r2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <TMR_Start+0x26>
			|| timer->state.exState == TIMER_END) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7b1b      	ldrb	r3, [r3, #12]
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10d      	bne.n	8000a72 <TMR_Start+0x42>
		timer->state.exState = TIMER_RUN;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7b1a      	ldrb	r2, [r3, #12]
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	438a      	bics	r2, r1
 8000a5e:	1c11      	adds	r1, r2, #0
 8000a60:	2202      	movs	r2, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	731a      	strb	r2, [r3, #12]
		timer->reloadValue = delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
		timer->count = delay;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	601a      	str	r2, [r3, #0]
	}
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <TMR_Restart>:
/**
 * @brief  Перезапустить таймер, обнулив счетчик. Если таймер запущен выполнение начнется с начала
 * @param  timer - таймер, над которым проводится операция
 * @retval none
 */
void TMR_Restart(Timer *timer) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	timer->count = timer->reloadValue;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
	timer->state.exState = TIMER_RUN;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7b1a      	ldrb	r2, [r3, #12]
 8000a8e:	210f      	movs	r1, #15
 8000a90:	438a      	bics	r2, r1
 8000a92:	1c11      	adds	r1, r2, #0
 8000a94:	2202      	movs	r2, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	731a      	strb	r2, [r3, #12]
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <TMR_ExecuteCallbacks>:
/**
 * @brief  Выполнить все функции обратного вызова
 * @param  None
 * @retval Статус
 */
void TMR_ExecuteCallbacks(void) {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
	//Один из вариантов размещения этой функции. Можно в упрощенном виде (без рассчета delta) вызывать в прерывании
	//что экономит время нахождения в прерывании, но зато все таймеры всегда имеют актуальное время.
	//Либо здесь, где эта функция будет выполняться столько раз, сколько успеет в главном цикле в контексте main.
	//TMR_Tick();
	_checkElapsedTimers();
 8000aa6:	f7ff fec3 	bl	8000830 <_checkElapsedTimers>
	_executeAllCallbacks();
 8000aaa:	f7ff fef9 	bl	80008a0 <_executeAllCallbacks>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f000 fa7e 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 f809 	bl	8000ad2 <SystemClock_Config>
//  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешение счётчика
//  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запуск счётчика
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 f8c8 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac4:	f000 f896 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000ac8:	f000 f864 	bl	8000b94 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_main();
 8000acc:	f7ff fbba 	bl	8000244 <app_main>
 8000ad0:	e7fc      	b.n	8000acc <main+0x18>

08000ad2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad2:	b590      	push	{r4, r7, lr}
 8000ad4:	b095      	sub	sp, #84	; 0x54
 8000ad6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad8:	2420      	movs	r4, #32
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2330      	movs	r3, #48	; 0x30
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f002 fdcc 	bl	8003680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	2310      	movs	r3, #16
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	0018      	movs	r0, r3
 8000aee:	2310      	movs	r3, #16
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f002 fdc4 	bl	8003680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	003b      	movs	r3, r7
 8000afa:	0018      	movs	r0, r3
 8000afc:	2310      	movs	r3, #16
 8000afe:	001a      	movs	r2, r3
 8000b00:	2100      	movs	r1, #0
 8000b02:	f002 fdbd 	bl	8003680 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	22a0      	movs	r2, #160	; 0xa0
 8000b2a:	0392      	lsls	r2, r2, #14
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fdca 	bl	80016d0 <HAL_RCC_OscConfig>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b40:	f000 f8e0 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	2110      	movs	r1, #16
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2202      	movs	r2, #2
 8000b50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2101      	movs	r1, #1
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 f8ce 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b6c:	f000 f8ca 	bl	8000d04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b76:	003b      	movs	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fa14 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b88:	f000 f8bc 	bl	8000d04 <Error_Handler>
  }
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b015      	add	sp, #84	; 0x54
 8000b92:	bd90      	pop	{r4, r7, pc}

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_USART1_UART_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000ba0:	2296      	movs	r2, #150	; 0x96
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 fab5 	bl	8002148 <HAL_UART_Init>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f88f 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000150 	.word	0x20000150
 8000bf0:	40013800 	.word	0x40013800

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c00:	2296      	movs	r2, #150	; 0x96
 8000c02:	01d2      	lsls	r2, r2, #7
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fa85 	bl	8002148 <HAL_UART_Init>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 f85f 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001d4 	.word	0x200001d4
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	240c      	movs	r4, #12
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2314      	movs	r3, #20
 8000c62:	001a      	movs	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	f002 fd0b 	bl	8003680 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	03c9      	lsls	r1, r1, #15
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	03db      	lsls	r3, r3, #15
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0289      	lsls	r1, r1, #10
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	02c9      	lsls	r1, r1, #11
 8000cac:	430a      	orrs	r2, r1
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_GPIO_Init+0xa8>)
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	02db      	lsls	r3, r3, #11
 8000cb8:	4013      	ands	r3, r2
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <MX_GPIO_Init+0xac>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f000 fcca 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	0212      	lsls	r2, r2, #8
 8000cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <MX_GPIO_Init+0xac>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f000 fb47 	bl	8001380 <HAL_GPIO_Init>

}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b009      	add	sp, #36	; 0x24
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48000400 	.word	0x48000400

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	699a      	ldr	r2, [r3, #24]
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	619a      	str	r2, [r3, #24]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	69da      	ldr	r2, [r3, #28]
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0549      	lsls	r1, r1, #21
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	61da      	str	r2, [r3, #28]
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	055b      	lsls	r3, r3, #21
 8000d44:	4013      	ands	r3, r2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b08d      	sub	sp, #52	; 0x34
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	241c      	movs	r4, #28
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f002 fc88 	bl	8003680 <memset>
  if(huart->Instance==USART1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a41      	ldr	r2, [pc, #260]	; (8000e7c <HAL_UART_MspInit+0x124>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d13c      	bne.n	8000df4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	01c9      	lsls	r1, r1, #7
 8000d84:	430a      	orrs	r2, r1
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	01db      	lsls	r3, r3, #7
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0289      	lsls	r1, r1, #10
 8000da0:	430a      	orrs	r2, r1
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000da6:	695a      	ldr	r2, [r3, #20]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	22c0      	movs	r2, #192	; 0xc0
 8000db6:	00d2      	lsls	r2, r2, #3
 8000db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	0021      	movs	r1, r4
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	2390      	movs	r3, #144	; 0x90
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 facf 	bl	8001380 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201b      	movs	r0, #27
 8000de8:	f000 fa1a 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dec:	201b      	movs	r0, #27
 8000dee:	f000 fa2c 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	e03f      	b.n	8000e74 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_UART_MspInit+0x12c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d13a      	bne.n	8000e74 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e00:	69da      	ldr	r2, [r3, #28]
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0289      	lsls	r1, r1, #10
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0289      	lsls	r1, r1, #10
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x128>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e36:	211c      	movs	r1, #28
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	2390      	movs	r3, #144	; 0x90
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fa8e 	bl	8001380 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	201c      	movs	r0, #28
 8000e6a:	f000 f9d9 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6e:	201c      	movs	r0, #28
 8000e70:	f000 f9eb 	bl	800124a <HAL_NVIC_EnableIRQ>
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b00d      	add	sp, #52	; 0x34
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40004400 	.word	0x40004400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TMR_IRQ();
 8000eac:	f7ff fd20 	bl	80008f0 <TMR_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 f8ca 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <USART1_IRQHandler+0x14>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 fa76 	bl	80023b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	20000150 	.word	0x20000150

08000ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <USART2_IRQHandler+0x14>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fa6a 	bl	80023b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	200001d4 	.word	0x200001d4

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f002 fb86 	bl	800362c <__errno>
 8000f20:	0003      	movs	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	425b      	negs	r3, r3
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	18d2      	adds	r2, r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b006      	add	sp, #24
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20002000 	.word	0x20002000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000144 	.word	0x20000144
 8000f54:	20000270 	.word	0x20000270

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f8e:	f7ff ffe3 	bl	8000f58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f92:	f002 fb51 	bl	8003638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fd8d 	bl	8000ab4 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000fa8:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8000fac:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000fb0:	2000026c 	.word	0x2000026c

08000fb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_Init+0x24>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_Init+0x24>)
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f809 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fe9f 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x5c>)
 8000fea:	681c      	ldr	r4, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x60>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	23fa      	movs	r3, #250	; 0xfa
 8000ff4:	0098      	lsls	r0, r3, #2
 8000ff6:	f7ff f899 	bl	800012c <__udivsi3>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	0020      	movs	r0, r4
 8001000:	f7ff f894 	bl	800012c <__udivsi3>
 8001004:	0003      	movs	r3, r0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f92f 	bl	800126a <HAL_SYSTICK_Config>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e00f      	b.n	8001034 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d80b      	bhi.n	8001032 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f8fc 	bl	8001220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_InitTick+0x64>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b003      	add	sp, #12
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000088 	.word	0x20000088
 8001040:	20000090 	.word	0x20000090
 8001044:	2000008c 	.word	0x2000008c

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	001a      	movs	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	18d2      	adds	r2, r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_IncTick+0x20>)
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	20000090 	.word	0x20000090
 8001068:	20000258 	.word	0x20000258

0800106c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	20000258 	.word	0x20000258

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff fff0 	bl	800106c <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001a      	movs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	f7ff ffe0 	bl	800106c <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000090 	.word	0x20000090

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b7f      	cmp	r3, #127	; 0x7f
 80010da:	d809      	bhi.n	80010f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	231f      	movs	r3, #31
 80010e4:	401a      	ands	r2, r3
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_EnableIRQ+0x30>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	4091      	lsls	r1, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
  }
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b7f      	cmp	r3, #127	; 0x7f
 8001110:	d828      	bhi.n	8001164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	33c0      	adds	r3, #192	; 0xc0
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	589b      	ldr	r3, [r3, r2]
 8001122:	1dfa      	adds	r2, r7, #7
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	0011      	movs	r1, r2
 8001128:	2203      	movs	r2, #3
 800112a:	400a      	ands	r2, r1
 800112c:	00d2      	lsls	r2, r2, #3
 800112e:	21ff      	movs	r1, #255	; 0xff
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	43d2      	mvns	r2, r2
 8001136:	401a      	ands	r2, r3
 8001138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	401a      	ands	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	2303      	movs	r3, #3
 800114a:	4003      	ands	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	481f      	ldr	r0, [pc, #124]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	430a      	orrs	r2, r1
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001162:	e031      	b.n	80011c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0019      	movs	r1, r3
 800116c:	230f      	movs	r3, #15
 800116e:	400b      	ands	r3, r1
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3306      	adds	r3, #6
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001c      	movs	r4, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	4023      	ands	r3, r4
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	430a      	orrs	r2, r1
 80011be:	3306      	adds	r3, #6
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	18c3      	adds	r3, r0, r3
 80011c4:	3304      	adds	r3, #4
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d301      	bcc.n	80011f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ec:	2301      	movs	r3, #1
 80011ee:	e010      	b.n	8001212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SysTick_Config+0x44>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2103      	movs	r1, #3
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff7c 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x44>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	210f      	movs	r1, #15
 800122c:	187b      	adds	r3, r7, r1
 800122e:	1c02      	adds	r2, r0, #0
 8001230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	0002      	movs	r2, r0
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ff33 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ffaf 	bl	80011d8 <SysTick_Config>
 800127a:	0003      	movs	r3, r0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2221      	movs	r2, #33	; 0x21
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e020      	b.n	80012ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	210e      	movs	r1, #14
 80012b6:	438a      	bics	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	2101      	movs	r1, #1
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2221      	movs	r2, #33	; 0x21
 80012de:	2101      	movs	r1, #1
 80012e0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	210f      	movs	r1, #15
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2221      	movs	r2, #33	; 0x21
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d006      	beq.n	800131e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2204      	movs	r2, #4
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e028      	b.n	8001370 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	210e      	movs	r1, #14
 800132a:	438a      	bics	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	2101      	movs	r1, #1
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2221      	movs	r2, #33	; 0x21
 8001352:	2101      	movs	r1, #1
 8001354:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	0010      	movs	r0, r2
 800136e:	4798      	blx	r3
    } 
  }
  return status;
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	781b      	ldrb	r3, [r3, #0]
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b004      	add	sp, #16
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e14f      	b.n	8001630 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d100      	bne.n	80013a8 <HAL_GPIO_Init+0x28>
 80013a6:	e140      	b.n	800162a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	2201      	movs	r2, #1
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	4013      	ands	r3, r2
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2203      	movs	r2, #3
 8001464:	4013      	ands	r3, r2
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	58d3      	ldr	r3, [r2, r3]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2207      	movs	r2, #7
 800147c:	4013      	ands	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2107      	movs	r1, #7
 8001496:	400b      	ands	r3, r1
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	401a      	ands	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	029b      	lsls	r3, r3, #10
 80014ee:	4013      	ands	r3, r2
 80014f0:	d100      	bne.n	80014f4 <HAL_GPIO_Init+0x174>
 80014f2:	e09a      	b.n	800162a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_GPIO_Init+0x2cc>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	589b      	ldr	r3, [r3, r2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2203      	movs	r2, #3
 800151e:	4013      	ands	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	2390      	movs	r3, #144	; 0x90
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	429a      	cmp	r2, r3
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x1e2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a44      	ldr	r2, [pc, #272]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x1de>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_GPIO_Init+0x2d4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x1da>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a42      	ldr	r2, [pc, #264]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001552:	2303      	movs	r3, #3
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x1e4>
 8001556:	2305      	movs	r3, #5
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x1e4>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x1e4>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x1e4>
 8001562:	2300      	movs	r3, #0
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	2103      	movs	r1, #3
 8001568:	400a      	ands	r2, r1
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2cc>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	4013      	ands	r3, r2
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	035b      	lsls	r3, r3, #13
 80015ee:	4013      	ands	r3, r2
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43da      	mvns	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	039b      	lsls	r3, r3, #14
 8001618:	4013      	ands	r3, r2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	40da      	lsrs	r2, r3
 8001638:	1e13      	subs	r3, r2, #0
 800163a:	d000      	beq.n	800163e <HAL_GPIO_Init+0x2be>
 800163c:	e6a8      	b.n	8001390 <HAL_GPIO_Init+0x10>
  } 
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b006      	add	sp, #24
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	48000400 	.word	0x48000400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	0008      	movs	r0, r1
 800166a:	0011      	movs	r1, r2
 800166c:	1cbb      	adds	r3, r7, #2
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	1c7b      	adds	r3, r7, #1
 8001674:	1c0a      	adds	r2, r1, #0
 8001676:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001678:	1c7b      	adds	r3, r7, #1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001680:	1cbb      	adds	r3, r7, #2
 8001682:	881a      	ldrh	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	1cbb      	adds	r3, r7, #2
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	000a      	movs	r2, r1
 80016a4:	1cbb      	adds	r3, r7, #2
 80016a6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ae:	1cbb      	adds	r3, r7, #2
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	041a      	lsls	r2, r3, #16
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	1cb9      	adds	r1, r7, #2
 80016be:	8809      	ldrh	r1, [r1, #0]
 80016c0:	400b      	ands	r3, r1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e301      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x1e>
 80016ec:	e08d      	b.n	800180a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ee:	4bc3      	ldr	r3, [pc, #780]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	220c      	movs	r2, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00e      	beq.n	8001718 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fa:	4bc0      	ldr	r3, [pc, #768]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	220c      	movs	r2, #12
 8001700:	4013      	ands	r3, r2
 8001702:	2b08      	cmp	r3, #8
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x64>
 8001706:	4bbd      	ldr	r3, [pc, #756]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	401a      	ands	r2, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	025b      	lsls	r3, r3, #9
 8001714:	429a      	cmp	r2, r3
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	4bb8      	ldr	r3, [pc, #736]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	4013      	ands	r3, r2
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x56>
 8001724:	e070      	b.n	8001808 <HAL_RCC_OscConfig+0x138>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d000      	beq.n	8001730 <HAL_RCC_OscConfig+0x60>
 800172e:	e06b      	b.n	8001808 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e2d8      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x7c>
 800173c:	4baf      	ldr	r3, [pc, #700]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4bae      	ldr	r3, [pc, #696]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0249      	lsls	r1, r1, #9
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02f      	b.n	80017ac <HAL_RCC_OscConfig+0xdc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x9e>
 8001754:	4ba9      	ldr	r3, [pc, #676]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4ba8      	ldr	r3, [pc, #672]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800175a:	49a9      	ldr	r1, [pc, #676]	; (8001a00 <HAL_RCC_OscConfig+0x330>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	4ba6      	ldr	r3, [pc, #664]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4ba5      	ldr	r3, [pc, #660]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001766:	49a7      	ldr	r1, [pc, #668]	; (8001a04 <HAL_RCC_OscConfig+0x334>)
 8001768:	400a      	ands	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e01e      	b.n	80017ac <HAL_RCC_OscConfig+0xdc>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10e      	bne.n	8001794 <HAL_RCC_OscConfig+0xc4>
 8001776:	4ba1      	ldr	r3, [pc, #644]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4ba0      	ldr	r3, [pc, #640]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	02c9      	lsls	r1, r1, #11
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	0249      	lsls	r1, r1, #9
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xdc>
 8001794:	4b99      	ldr	r3, [pc, #612]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b98      	ldr	r3, [pc, #608]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800179a:	4999      	ldr	r1, [pc, #612]	; (8001a00 <HAL_RCC_OscConfig+0x330>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b95      	ldr	r3, [pc, #596]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80017a6:	4997      	ldr	r1, [pc, #604]	; (8001a04 <HAL_RCC_OscConfig+0x334>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc5a 	bl	800106c <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017be:	f7ff fc55 	bl	800106c <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	; 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e28a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	029b      	lsls	r3, r3, #10
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0xee>
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fc45 	bl	800106c <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc40 	bl	800106c <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e275      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b80      	ldr	r3, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x118>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x146>
 8001814:	e069      	b.n	80018ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001816:	4b79      	ldr	r3, [pc, #484]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	d00b      	beq.n	8001838 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b08      	cmp	r3, #8
 800182a:	d11c      	bne.n	8001866 <HAL_RCC_OscConfig+0x196>
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	22f8      	movs	r2, #248	; 0xf8
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	00da      	lsls	r2, r3, #3
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001864:	e041      	b.n	80018ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fbf7 	bl	800106c <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fbf2 	bl	800106c <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e227      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d0f1      	beq.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b56      	ldr	r3, [pc, #344]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	22f8      	movs	r2, #248	; 0xf8
 80018a6:	4393      	bics	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00da      	lsls	r2, r3, #3
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbd2 	bl	800106c <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff fbcd 	bl	800106c <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e202      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d1f1      	bne.n	80018ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2208      	movs	r2, #8
 80018f0:	4013      	ands	r3, r2
 80018f2:	d036      	beq.n	8001962 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d019      	beq.n	8001930 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80018fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fbb0 	bl	800106c <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff fbab 	bl	800106c <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1e0      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d0f1      	beq.n	8001912 <HAL_RCC_OscConfig+0x242>
 800192e:	e018      	b.n	8001962 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fb96 	bl	800106c <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fb91 	bl	800106c <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1c6      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2202      	movs	r2, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d1f1      	bne.n	8001946 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x29e>
 800196c:	e0b4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	201f      	movs	r0, #31
 8001970:	183b      	adds	r3, r7, r0
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	055b      	lsls	r3, r3, #21
 800197e:	4013      	ands	r3, r2
 8001980:	d110      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0549      	lsls	r1, r1, #21
 800198c:	430a      	orrs	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_RCC_OscConfig+0x338>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	d11a      	bne.n	80019e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_RCC_OscConfig+0x338>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_RCC_OscConfig+0x338>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0049      	lsls	r1, r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb55 	bl	800106c <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fb50 	bl	800106c <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e185      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x338>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x33c>
 80019ee:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	4b02      	ldr	r3, [pc, #8]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	621a      	str	r2, [r3, #32]
 80019fa:	e035      	b.n	8001a68 <HAL_RCC_OscConfig+0x398>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	fffeffff 	.word	0xfffeffff
 8001a04:	fffbffff 	.word	0xfffbffff
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x35e>
 8001a14:	4bb6      	ldr	r3, [pc, #728]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a16:	6a1a      	ldr	r2, [r3, #32]
 8001a18:	4bb5      	ldr	r3, [pc, #724]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	621a      	str	r2, [r3, #32]
 8001a20:	4bb3      	ldr	r3, [pc, #716]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	4bb2      	ldr	r3, [pc, #712]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a26:	2104      	movs	r1, #4
 8001a28:	438a      	bics	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x398>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x380>
 8001a36:	4bae      	ldr	r3, [pc, #696]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a38:	6a1a      	ldr	r2, [r3, #32]
 8001a3a:	4bad      	ldr	r3, [pc, #692]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	621a      	str	r2, [r3, #32]
 8001a42:	4bab      	ldr	r3, [pc, #684]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	4baa      	ldr	r3, [pc, #680]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	621a      	str	r2, [r3, #32]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x398>
 8001a50:	4ba7      	ldr	r3, [pc, #668]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	4ba6      	ldr	r3, [pc, #664]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	438a      	bics	r2, r1
 8001a5a:	621a      	str	r2, [r3, #32]
 8001a5c:	4ba4      	ldr	r3, [pc, #656]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4ba3      	ldr	r3, [pc, #652]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a62:	2104      	movs	r1, #4
 8001a64:	438a      	bics	r2, r1
 8001a66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d014      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fafc 	bl	800106c <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff faf7 	bl	800106c <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a9b      	ldr	r2, [pc, #620]	; (8001cf4 <HAL_RCC_OscConfig+0x624>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e12b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
 8001a98:	e013      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fae7 	bl	800106c <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e009      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fae2 	bl	800106c <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	4a91      	ldr	r2, [pc, #580]	; (8001cf4 <HAL_RCC_OscConfig+0x624>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e116      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b8d      	ldr	r3, [pc, #564]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac2:	231f      	movs	r3, #31
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001ace:	69da      	ldr	r2, [r3, #28]
 8001ad0:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	4989      	ldr	r1, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x628>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d12a      	bne.n	8001b40 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aea:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aee:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001af0:	2104      	movs	r1, #4
 8001af2:	430a      	orrs	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001af6:	4b7e      	ldr	r3, [pc, #504]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afa:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001afc:	2101      	movs	r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fab3 	bl	800106c <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b0c:	f7ff faae 	bl	800106c <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0e3      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b1e:	4b74      	ldr	r3, [pc, #464]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d0f1      	beq.n	8001b0c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b28:	4b71      	ldr	r3, [pc, #452]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	22f8      	movs	r2, #248	; 0xf8
 8001b2e:	4393      	bics	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	00da      	lsls	r2, r3, #3
 8001b38:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3e:	e034      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	3305      	adds	r3, #5
 8001b46:	d111      	bne.n	8001b6c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	438a      	bics	r2, r1
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	22f8      	movs	r2, #248	; 0xf8
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	00da      	lsls	r2, r3, #3
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6a:	e01e      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b70:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b72:	2104      	movs	r1, #4
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	438a      	bics	r2, r1
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fa72 	bl	800106c <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b8e:	f7ff fa6d 	bl	800106c <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0a2      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d1f1      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d100      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4e4>
 8001bb2:	e097      	b.n	8001ce4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d100      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
 8001bc0:	e06b      	b.n	8001c9a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d14c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001bd0:	494a      	ldr	r1, [pc, #296]	; (8001cfc <HAL_RCC_OscConfig+0x62c>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa49 	bl	800106c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fa44 	bl	800106c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e079      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	049b      	lsls	r3, r3, #18
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	220f      	movs	r2, #15
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a3a      	ldr	r2, [pc, #232]	; (8001d00 <HAL_RCC_OscConfig+0x630>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	431a      	orrs	r2, r3
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	0449      	lsls	r1, r1, #17
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fa17 	bl	800106c <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff fa12 	bl	800106c <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e047      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	049b      	lsls	r3, r3, #18
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x574>
 8001c62:	e03f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	4924      	ldr	r1, [pc, #144]	; (8001cfc <HAL_RCC_OscConfig+0x62c>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff f9fc 	bl	800106c <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f9f7 	bl	800106c <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e02c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	049b      	lsls	r3, r3, #18
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5aa>
 8001c98:	e024      	b.n	8001ce4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e01f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0x620>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	23f0      	movs	r3, #240	; 0xf0
 8001cd4:	039b      	lsls	r3, r3, #14
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b008      	add	sp, #32
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	00001388 	.word	0x00001388
 8001cf8:	efffffff 	.word	0xefffffff
 8001cfc:	feffffff 	.word	0xfeffffff
 8001d00:	ffc2ffff 	.word	0xffc2ffff

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b3      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d911      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e09a      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d015      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d006      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001d64:	21e0      	movs	r1, #224	; 0xe0
 8001d66:	00c9      	lsls	r1, r1, #3
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	22f0      	movs	r2, #240	; 0xf0
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d040      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d114      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06e      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	049b      	lsls	r3, r3, #18
 8001db2:	4013      	ands	r3, r2
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e062      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e05b      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff f946 	bl	800106c <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff f941 	bl	800106c <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <HAL_RCC_ClockConfig+0x18c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e042      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	220c      	movs	r2, #12
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1ec      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d211      	bcs.n	8001e3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x184>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e020      	b.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2204      	movs	r2, #4
 8001e44:	4013      	ands	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <HAL_RCC_ClockConfig+0x190>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e5c:	f000 f820 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e60:	0001      	movs	r1, r0
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x188>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	220f      	movs	r2, #15
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x194>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	000a      	movs	r2, r1
 8001e72:	40da      	lsrs	r2, r3
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x198>)
 8001e76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f7ff f8b1 	bl	8000fe0 <HAL_InitTick>
  
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	00001388 	.word	0x00001388
 8001e94:	fffff8ff 	.word	0xfffff8ff
 8001e98:	0800432c 	.word	0x0800432c
 8001e9c:	20000088 	.word	0x20000088

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08f      	sub	sp, #60	; 0x3c
 8001ea4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eae:	c313      	stmia	r3!, {r0, r1, r4}
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eba:	c313      	stmia	r3!, {r0, r1, r4}
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	220c      	movs	r2, #12
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d002      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x4a>
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x50>
 8001ee8:	e02d      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eee:	e02d      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	0c9b      	lsrs	r3, r3, #18
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2214      	movs	r2, #20
 8001efa:	18ba      	adds	r2, r7, r2
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	220f      	movs	r2, #15
 8001f06:	4013      	ands	r3, r2
 8001f08:	1d3a      	adds	r2, r7, #4
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f1c:	f7fe f906 	bl	800012c <__udivsi3>
 8001f20:	0003      	movs	r3, r0
 8001f22:	001a      	movs	r2, r3
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	4353      	muls	r3, r2
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	000a      	movs	r2, r1
 8001f30:	0152      	lsls	r2, r2, #5
 8001f32:	1a52      	subs	r2, r2, r1
 8001f34:	0193      	lsls	r3, r2, #6
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	185b      	adds	r3, r3, r1
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f44:	e002      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b00f      	add	sp, #60	; 0x3c
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	08004300 	.word	0x08004300
 8001f5c:	08004310 	.word	0x08004310
 8001f60:	40021000 	.word	0x40021000
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	20000088 	.word	0x20000088

08001f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f84:	f7ff fff2 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	2207      	movs	r2, #7
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	40d9      	lsrs	r1, r3
 8001f9a:	000b      	movs	r3, r1
}    
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	0800433c 	.word	0x0800433c

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fc8:	e08e      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2017      	movs	r0, #23
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	055b      	lsls	r3, r3, #21
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d110      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d11a      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	0049      	lsls	r1, r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff f827 	bl	800106c <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	e008      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7ff f822 	bl	800106c <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e077      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4013      	ands	r3, r2
 8002040:	d0f0      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	23c0      	movs	r3, #192	; 0xc0
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d034      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	23c0      	movs	r3, #192	; 0xc0
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d02c      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a33      	ldr	r2, [pc, #204]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	430a      	orrs	r2, r1
 800207a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002082:	492e      	ldr	r1, [pc, #184]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002084:	400a      	ands	r2, r1
 8002086:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe ffe9 	bl	800106c <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe ffe4 	bl	800106c <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	4a25      	ldr	r2, [pc, #148]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e038      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d2:	2317      	movs	r3, #23
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e2:	4918      	ldr	r1, [pc, #96]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	2203      	movs	r2, #3
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2220      	movs	r2, #32
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	2210      	movs	r2, #16
 8002116:	4393      	bics	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002120:	430a      	orrs	r2, r1
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b006      	add	sp, #24
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	fffffcff 	.word	0xfffffcff
 800213c:	fffeffff 	.word	0xfffeffff
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff

08002148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e044      	b.n	80021e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800215e:	2b00      	cmp	r3, #0
 8002160:	d107      	bne.n	8002172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2274      	movs	r2, #116	; 0x74
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fdf3 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2224      	movs	r2, #36	; 0x24
 8002176:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fbee 	bl	800296c <UART_SetConfig>
 8002190:	0003      	movs	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e024      	b.n	80021e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 fd21 	bl	8002bec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	490d      	ldr	r1, [pc, #52]	; (80021ec <HAL_UART_Init+0xa4>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2108      	movs	r1, #8
 80021c6:	438a      	bics	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 fdb9 	bl	8002d54 <UART_CheckIdleState>
 80021e2:	0003      	movs	r3, r0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	fffff7ff 	.word	0xfffff7ff

080021f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	1dbb      	adds	r3, r7, #6
 80021fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002202:	2b20      	cmp	r3, #32
 8002204:	d000      	beq.n	8002208 <HAL_UART_Transmit_IT+0x18>
 8002206:	e06a      	b.n	80022de <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_Transmit_IT+0x26>
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e062      	b.n	80022e0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	015b      	lsls	r3, r3, #5
 8002222:	429a      	cmp	r2, r3
 8002224:	d109      	bne.n	800223a <HAL_UART_Transmit_IT+0x4a>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d001      	beq.n	800223a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e052      	b.n	80022e0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2274      	movs	r2, #116	; 0x74
 800223e:	5c9b      	ldrb	r3, [r3, r2]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_UART_Transmit_IT+0x58>
 8002244:	2302      	movs	r3, #2
 8002246:	e04b      	b.n	80022e0 <HAL_UART_Transmit_IT+0xf0>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2274      	movs	r2, #116	; 0x74
 800224c:	2101      	movs	r1, #1
 800224e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1dba      	adds	r2, r7, #6
 800225a:	2150      	movs	r1, #80	; 0x50
 800225c:	8812      	ldrh	r2, [r2, #0]
 800225e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1dba      	adds	r2, r7, #6
 8002264:	2152      	movs	r1, #82	; 0x52
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	2100      	movs	r1, #0
 8002276:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2221      	movs	r2, #33	; 0x21
 800227c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <HAL_UART_Transmit_IT+0xaa>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_UART_Transmit_IT+0xf8>)
 8002296:	669a      	str	r2, [r3, #104]	; 0x68
 8002298:	e002      	b.n	80022a0 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_UART_Transmit_IT+0xfc>)
 800229e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2274      	movs	r2, #116	; 0x74
 80022a4:	2100      	movs	r1, #0
 80022a6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a8:	f3ef 8310 	mrs	r3, PRIMASK
 80022ac:	613b      	str	r3, [r7, #16]
  return(result);
 80022ae:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f383 8810 	msr	PRIMASK, r3
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f383 8810 	msr	PRIMASK, r3
}
 80022d8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
  }
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b008      	add	sp, #32
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	0800324b 	.word	0x0800324b
 80022ec:	08003197 	.word	0x08003197

080022f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	1dbb      	adds	r3, r7, #6
 80022fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002302:	2b20      	cmp	r3, #32
 8002304:	d150      	bne.n	80023a8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_UART_Receive_IT+0x24>
 800230c:	1dbb      	adds	r3, r7, #6
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e048      	b.n	80023aa <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	429a      	cmp	r2, r3
 8002322:	d109      	bne.n	8002338 <HAL_UART_Receive_IT+0x48>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d001      	beq.n	8002338 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e038      	b.n	80023aa <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2274      	movs	r2, #116	; 0x74
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_UART_Receive_IT+0x56>
 8002342:	2302      	movs	r3, #2
 8002344:	e031      	b.n	80023aa <HAL_UART_Receive_IT+0xba>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2274      	movs	r2, #116	; 0x74
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	4013      	ands	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002362:	f3ef 8310 	mrs	r3, PRIMASK
 8002366:	613b      	str	r3, [r7, #16]
  return(result);
 8002368:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f383 8810 	msr	PRIMASK, r3
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	04c9      	lsls	r1, r1, #19
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f383 8810 	msr	PRIMASK, r3
}
 8002394:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fde4 	bl	8002f6c <UART_Start_Receive_IT>
 80023a4:	0003      	movs	r3, r0
 80023a6:	e000      	b.n	80023aa <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b008      	add	sp, #32
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b0ab      	sub	sp, #172	; 0xac
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	22a4      	movs	r2, #164	; 0xa4
 80023c4:	18b9      	adds	r1, r7, r2
 80023c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	20a0      	movs	r0, #160	; 0xa0
 80023d0:	1839      	adds	r1, r7, r0
 80023d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	219c      	movs	r1, #156	; 0x9c
 80023dc:	1879      	adds	r1, r7, r1
 80023de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023e0:	0011      	movs	r1, r2
 80023e2:	18bb      	adds	r3, r7, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a99      	ldr	r2, [pc, #612]	; (800264c <HAL_UART_IRQHandler+0x298>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	2298      	movs	r2, #152	; 0x98
 80023ec:	18bc      	adds	r4, r7, r2
 80023ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80023f0:	18bb      	adds	r3, r7, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2220      	movs	r2, #32
 80023fe:	4013      	ands	r3, r2
 8002400:	d00f      	beq.n	8002422 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002402:	183b      	adds	r3, r7, r0
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2220      	movs	r2, #32
 8002408:	4013      	ands	r3, r2
 800240a:	d00a      	beq.n	8002422 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002410:	2b00      	cmp	r3, #0
 8002412:	d100      	bne.n	8002416 <HAL_UART_IRQHandler+0x62>
 8002414:	e27e      	b.n	8002914 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	0010      	movs	r0, r2
 800241e:	4798      	blx	r3
      }
      return;
 8002420:	e278      	b.n	8002914 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002422:	2398      	movs	r3, #152	; 0x98
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_UART_IRQHandler+0x7a>
 800242c:	e114      	b.n	8002658 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800242e:	239c      	movs	r3, #156	; 0x9c
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d106      	bne.n	8002448 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800243a:	23a0      	movs	r3, #160	; 0xa0
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a83      	ldr	r2, [pc, #524]	; (8002650 <HAL_UART_IRQHandler+0x29c>)
 8002442:	4013      	ands	r3, r2
 8002444:	d100      	bne.n	8002448 <HAL_UART_IRQHandler+0x94>
 8002446:	e107      	b.n	8002658 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002448:	23a4      	movs	r3, #164	; 0xa4
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d012      	beq.n	800247a <HAL_UART_IRQHandler+0xc6>
 8002454:	23a0      	movs	r3, #160	; 0xa0
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4013      	ands	r3, r2
 8002460:	d00b      	beq.n	800247a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	589b      	ldr	r3, [r3, r2]
 8002470:	2201      	movs	r2, #1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800247a:	23a4      	movs	r3, #164	; 0xa4
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d011      	beq.n	80024aa <HAL_UART_IRQHandler+0xf6>
 8002486:	239c      	movs	r3, #156	; 0x9c
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	d00b      	beq.n	80024aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2202      	movs	r2, #2
 8002498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	589b      	ldr	r3, [r3, r2]
 80024a0:	2204      	movs	r2, #4
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024aa:	23a4      	movs	r3, #164	; 0xa4
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2204      	movs	r2, #4
 80024b2:	4013      	ands	r3, r2
 80024b4:	d011      	beq.n	80024da <HAL_UART_IRQHandler+0x126>
 80024b6:	239c      	movs	r3, #156	; 0x9c
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2204      	movs	r2, #4
 80024c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	2202      	movs	r2, #2
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024da:	23a4      	movs	r3, #164	; 0xa4
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2208      	movs	r2, #8
 80024e2:	4013      	ands	r3, r2
 80024e4:	d017      	beq.n	8002516 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024e6:	23a0      	movs	r3, #160	; 0xa0
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	4013      	ands	r3, r2
 80024f0:	d105      	bne.n	80024fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024f2:	239c      	movs	r3, #156	; 0x9c
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024fc:	d00b      	beq.n	8002516 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2208      	movs	r2, #8
 8002504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	589b      	ldr	r3, [r3, r2]
 800250c:	2208      	movs	r2, #8
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002516:	23a4      	movs	r3, #164	; 0xa4
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_UART_IRQHandler+0x198>
 8002524:	23a0      	movs	r3, #160	; 0xa0
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	04db      	lsls	r3, r3, #19
 800252e:	4013      	ands	r3, r2
 8002530:	d00c      	beq.n	800254c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	589b      	ldr	r3, [r3, r2]
 8002542:	2220      	movs	r2, #32
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	589b      	ldr	r3, [r3, r2]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d100      	bne.n	8002558 <HAL_UART_IRQHandler+0x1a4>
 8002556:	e1df      	b.n	8002918 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002558:	23a4      	movs	r3, #164	; 0xa4
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2220      	movs	r2, #32
 8002560:	4013      	ands	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002564:	23a0      	movs	r3, #160	; 0xa0
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	4013      	ands	r3, r2
 800256e:	d008      	beq.n	8002582 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	0010      	movs	r0, r2
 8002580:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	589b      	ldr	r3, [r3, r2]
 8002588:	2194      	movs	r1, #148	; 0x94
 800258a:	187a      	adds	r2, r7, r1
 800258c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	4013      	ands	r3, r2
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d004      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800259c:	187b      	adds	r3, r7, r1
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2228      	movs	r2, #40	; 0x28
 80025a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025a4:	d047      	beq.n	8002636 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 fd7b 	bl	80030a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d137      	bne.n	800262c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025bc:	f3ef 8310 	mrs	r3, PRIMASK
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c4:	2090      	movs	r0, #144	; 0x90
 80025c6:	183a      	adds	r2, r7, r0
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d0:	f383 8810 	msr	PRIMASK, r3
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2140      	movs	r1, #64	; 0x40
 80025e2:	438a      	bics	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_UART_IRQHandler+0x2a0>)
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	0018      	movs	r0, r3
 800260a:	f7fe fe73 	bl	80012f4 <HAL_DMA_Abort_IT>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d01a      	beq.n	8002648 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	0018      	movs	r0, r3
 800261e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	e012      	b.n	8002648 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f98d 	bl	8002944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262a:	e00d      	b.n	8002648 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f988 	bl	8002944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e008      	b.n	8002648 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f983 	bl	8002944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	2100      	movs	r1, #0
 8002644:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002646:	e167      	b.n	8002918 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	46c0      	nop			; (mov r8, r8)
    return;
 800264a:	e165      	b.n	8002918 <HAL_UART_IRQHandler+0x564>
 800264c:	0000080f 	.word	0x0000080f
 8002650:	04000120 	.word	0x04000120
 8002654:	08003169 	.word	0x08003169

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265c:	2b01      	cmp	r3, #1
 800265e:	d000      	beq.n	8002662 <HAL_UART_IRQHandler+0x2ae>
 8002660:	e131      	b.n	80028c6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002662:	23a4      	movs	r3, #164	; 0xa4
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_UART_IRQHandler+0x2bc>
 800266e:	e12a      	b.n	80028c6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002670:	23a0      	movs	r3, #160	; 0xa0
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2210      	movs	r2, #16
 8002678:	4013      	ands	r3, r2
 800267a:	d100      	bne.n	800267e <HAL_UART_IRQHandler+0x2ca>
 800267c:	e123      	b.n	80028c6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d000      	beq.n	8002696 <HAL_UART_IRQHandler+0x2e2>
 8002694:	e09b      	b.n	80027ce <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	217e      	movs	r1, #126	; 0x7e
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <HAL_UART_IRQHandler+0x2fa>
 80026ac:	e136      	b.n	800291c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2258      	movs	r2, #88	; 0x58
 80026b2:	5a9b      	ldrh	r3, [r3, r2]
 80026b4:	187a      	adds	r2, r7, r1
 80026b6:	8812      	ldrh	r2, [r2, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d300      	bcc.n	80026be <HAL_UART_IRQHandler+0x30a>
 80026bc:	e12e      	b.n	800291c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	187a      	adds	r2, r7, r1
 80026c2:	215a      	movs	r1, #90	; 0x5a
 80026c4:	8812      	ldrh	r2, [r2, #0]
 80026c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d06e      	beq.n	80027b0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d2:	f3ef 8310 	mrs	r3, PRIMASK
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026da:	67bb      	str	r3, [r7, #120]	; 0x78
 80026dc:	2301      	movs	r3, #1
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	498e      	ldr	r1, [pc, #568]	; (800292c <HAL_UART_IRQHandler+0x578>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	f383 8810 	msr	PRIMASK, r3
}
 8002702:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002704:	f3ef 8310 	mrs	r3, PRIMASK
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270c:	677b      	str	r3, [r7, #116]	; 0x74
 800270e:	2301      	movs	r3, #1
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	438a      	bics	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	f383 8810 	msr	PRIMASK, r3
}
 8002734:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002736:	f3ef 8310 	mrs	r3, PRIMASK
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800273c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	673b      	str	r3, [r7, #112]	; 0x70
 8002740:	2301      	movs	r3, #1
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	438a      	bics	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002774:	f3ef 8310 	mrs	r3, PRIMASK
 8002778:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800277e:	2301      	movs	r3, #1
 8002780:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2110      	movs	r1, #16
 8002796:	438a      	bics	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fe fd6a 	bl	8001284 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2258      	movs	r2, #88	; 0x58
 80027b4:	5a9a      	ldrh	r2, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	215a      	movs	r1, #90	; 0x5a
 80027ba:	5a5b      	ldrh	r3, [r3, r1]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0011      	movs	r1, r2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f8c4 	bl	8002954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027cc:	e0a6      	b.n	800291c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2258      	movs	r2, #88	; 0x58
 80027d2:	5a99      	ldrh	r1, [r3, r2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	225a      	movs	r2, #90	; 0x5a
 80027d8:	5a9b      	ldrh	r3, [r3, r2]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	208e      	movs	r0, #142	; 0x8e
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	1a8a      	subs	r2, r1, r2
 80027e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	225a      	movs	r2, #90	; 0x5a
 80027e8:	5a9b      	ldrh	r3, [r3, r2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d100      	bne.n	80027f2 <HAL_UART_IRQHandler+0x43e>
 80027f0:	e096      	b.n	8002920 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d100      	bne.n	80027fc <HAL_UART_IRQHandler+0x448>
 80027fa:	e091      	b.n	8002920 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002800:	60fb      	str	r3, [r7, #12]
  return(result);
 8002802:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002804:	2488      	movs	r4, #136	; 0x88
 8002806:	193a      	adds	r2, r7, r4
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4943      	ldr	r1, [pc, #268]	; (8002930 <HAL_UART_IRQHandler+0x57c>)
 8002822:	400a      	ands	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	193b      	adds	r3, r7, r4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f383 8810 	msr	PRIMASK, r3
}
 8002832:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002834:	f3ef 8310 	mrs	r3, PRIMASK
 8002838:	61bb      	str	r3, [r7, #24]
  return(result);
 800283a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283c:	2484      	movs	r4, #132	; 0x84
 800283e:	193a      	adds	r2, r7, r4
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f383 8810 	msr	PRIMASK, r3
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	438a      	bics	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	193b      	adds	r3, r7, r4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f383 8810 	msr	PRIMASK, r3
}
 800286a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287e:	f3ef 8310 	mrs	r3, PRIMASK
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002886:	2480      	movs	r4, #128	; 0x80
 8002888:	193a      	adds	r2, r7, r4
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	2301      	movs	r3, #1
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2110      	movs	r1, #16
 80028a4:	438a      	bics	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	f383 8810 	msr	PRIMASK, r3
}
 80028b4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f848 	bl	8002954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028c4:	e02c      	b.n	8002920 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80028c6:	23a4      	movs	r3, #164	; 0xa4
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	4013      	ands	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028d2:	23a0      	movs	r3, #160	; 0xa0
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01e      	beq.n	8002924 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	0010      	movs	r0, r2
 80028ee:	4798      	blx	r3
    }
    return;
 80028f0:	e018      	b.n	8002924 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028f2:	23a4      	movs	r3, #164	; 0xa4
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	4013      	ands	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_UART_IRQHandler+0x572>
 80028fe:	23a0      	movs	r3, #160	; 0xa0
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	4013      	ands	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fcfa 	bl	8003306 <UART_EndTransmit_IT>
    return;
 8002912:	e008      	b.n	8002926 <HAL_UART_IRQHandler+0x572>
      return;
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	e006      	b.n	8002926 <HAL_UART_IRQHandler+0x572>
    return;
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	e004      	b.n	8002926 <HAL_UART_IRQHandler+0x572>
      return;
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	e002      	b.n	8002926 <HAL_UART_IRQHandler+0x572>
      return;
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	e000      	b.n	8002926 <HAL_UART_IRQHandler+0x572>
    return;
 8002924:	46c0      	nop			; (mov r8, r8)
  }

}
 8002926:	46bd      	mov	sp, r7
 8002928:	b02b      	add	sp, #172	; 0xac
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	fffffeff 	.word	0xfffffeff
 8002930:	fffffedf 	.word	0xfffffedf

08002934 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	000a      	movs	r2, r1
 800295e:	1cbb      	adds	r3, r7, #2
 8002960:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002974:	231e      	movs	r3, #30
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8d      	ldr	r2, [pc, #564]	; (8002bd0 <UART_SetConfig+0x264>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a88      	ldr	r2, [pc, #544]	; (8002bd4 <UART_SetConfig+0x268>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <UART_SetConfig+0x26c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <UART_SetConfig+0x270>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d127      	bne.n	8002a42 <UART_SetConfig+0xd6>
 80029f2:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <UART_SetConfig+0x274>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2203      	movs	r2, #3
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d00d      	beq.n	8002a1a <UART_SetConfig+0xae>
 80029fe:	d81b      	bhi.n	8002a38 <UART_SetConfig+0xcc>
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d014      	beq.n	8002a2e <UART_SetConfig+0xc2>
 8002a04:	d818      	bhi.n	8002a38 <UART_SetConfig+0xcc>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <UART_SetConfig+0xa4>
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d00a      	beq.n	8002a24 <UART_SetConfig+0xb8>
 8002a0e:	e013      	b.n	8002a38 <UART_SetConfig+0xcc>
 8002a10:	231f      	movs	r3, #31
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e021      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e01c      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a24:	231f      	movs	r3, #31
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2204      	movs	r2, #4
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e017      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e012      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a38:	231f      	movs	r3, #31
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e00d      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a67      	ldr	r2, [pc, #412]	; (8002be4 <UART_SetConfig+0x278>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d104      	bne.n	8002a56 <UART_SetConfig+0xea>
 8002a4c:	231f      	movs	r3, #31
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e003      	b.n	8002a5e <UART_SetConfig+0xf2>
 8002a56:	231f      	movs	r3, #31
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d15d      	bne.n	8002b26 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d015      	beq.n	8002aa0 <UART_SetConfig+0x134>
 8002a74:	dc18      	bgt.n	8002aa8 <UART_SetConfig+0x13c>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00d      	beq.n	8002a96 <UART_SetConfig+0x12a>
 8002a7a:	dc15      	bgt.n	8002aa8 <UART_SetConfig+0x13c>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <UART_SetConfig+0x11a>
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d005      	beq.n	8002a90 <UART_SetConfig+0x124>
 8002a84:	e010      	b.n	8002aa8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a86:	f7ff fa7b 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
        break;
 8002a8e:	e012      	b.n	8002ab6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a90:	4b55      	ldr	r3, [pc, #340]	; (8002be8 <UART_SetConfig+0x27c>)
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e00f      	b.n	8002ab6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a96:	f7ff fa03 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	61bb      	str	r3, [r7, #24]
        break;
 8002a9e:	e00a      	b.n	8002ab6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	61bb      	str	r3, [r7, #24]
        break;
 8002aa6:	e006      	b.n	8002ab6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aac:	231e      	movs	r3, #30
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
        break;
 8002ab4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d100      	bne.n	8002abe <UART_SetConfig+0x152>
 8002abc:	e07b      	b.n	8002bb6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	005a      	lsls	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	18d2      	adds	r2, r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0019      	movs	r1, r3
 8002ad0:	0010      	movs	r0, r2
 8002ad2:	f7fd fb2b 	bl	800012c <__udivsi3>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d91c      	bls.n	8002b1c <UART_SetConfig+0x1b0>
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d217      	bcs.n	8002b1c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	200e      	movs	r0, #14
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	210f      	movs	r1, #15
 8002af6:	438a      	bics	r2, r1
 8002af8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2207      	movs	r2, #7
 8002b02:	4013      	ands	r3, r2
 8002b04:	b299      	uxth	r1, r3
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	183a      	adds	r2, r7, r0
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	183a      	adds	r2, r7, r0
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e04c      	b.n	8002bb6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002b1c:	231e      	movs	r3, #30
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e047      	b.n	8002bb6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b26:	231f      	movs	r3, #31
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d015      	beq.n	8002b5c <UART_SetConfig+0x1f0>
 8002b30:	dc18      	bgt.n	8002b64 <UART_SetConfig+0x1f8>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00d      	beq.n	8002b52 <UART_SetConfig+0x1e6>
 8002b36:	dc15      	bgt.n	8002b64 <UART_SetConfig+0x1f8>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <UART_SetConfig+0x1d6>
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d005      	beq.n	8002b4c <UART_SetConfig+0x1e0>
 8002b40:	e010      	b.n	8002b64 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b42:	f7ff fa1d 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002b46:	0003      	movs	r3, r0
 8002b48:	61bb      	str	r3, [r7, #24]
        break;
 8002b4a:	e012      	b.n	8002b72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <UART_SetConfig+0x27c>)
 8002b4e:	61bb      	str	r3, [r7, #24]
        break;
 8002b50:	e00f      	b.n	8002b72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b52:	f7ff f9a5 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8002b56:	0003      	movs	r3, r0
 8002b58:	61bb      	str	r3, [r7, #24]
        break;
 8002b5a:	e00a      	b.n	8002b72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	61bb      	str	r3, [r7, #24]
        break;
 8002b62:	e006      	b.n	8002b72 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b68:	231e      	movs	r3, #30
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
        break;
 8002b70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01e      	beq.n	8002bb6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	085a      	lsrs	r2, r3, #1
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	18d2      	adds	r2, r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f7fd facf 	bl	800012c <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d909      	bls.n	8002bae <UART_SetConfig+0x242>
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	025b      	lsls	r3, r3, #9
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d204      	bcs.n	8002bae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	e003      	b.n	8002bb6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002bae:	231e      	movs	r3, #30
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002bc2:	231e      	movs	r3, #30
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b008      	add	sp, #32
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	ffff69f3 	.word	0xffff69f3
 8002bd4:	ffffcfff 	.word	0xffffcfff
 8002bd8:	fffff4ff 	.word	0xfffff4ff
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40004400 	.word	0x40004400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a4a      	ldr	r2, [pc, #296]	; (8002d30 <UART_AdvFeatureConfig+0x144>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a43      	ldr	r2, [pc, #268]	; (8002d34 <UART_AdvFeatureConfig+0x148>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <UART_AdvFeatureConfig+0x14c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <UART_AdvFeatureConfig+0x150>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2210      	movs	r2, #16
 8002c82:	4013      	ands	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <UART_AdvFeatureConfig+0x154>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <UART_AdvFeatureConfig+0x158>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <UART_AdvFeatureConfig+0x15c>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	035b      	lsls	r3, r3, #13
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d10b      	bne.n	8002d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <UART_AdvFeatureConfig+0x160>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <UART_AdvFeatureConfig+0x164>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	fffdffff 	.word	0xfffdffff
 8002d34:	fffeffff 	.word	0xfffeffff
 8002d38:	fffbffff 	.word	0xfffbffff
 8002d3c:	ffff7fff 	.word	0xffff7fff
 8002d40:	ffffefff 	.word	0xffffefff
 8002d44:	ffffdfff 	.word	0xffffdfff
 8002d48:	ffefffff 	.word	0xffefffff
 8002d4c:	ff9fffff 	.word	0xff9fffff
 8002d50:	fff7ffff 	.word	0xfff7ffff

08002d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	2100      	movs	r1, #0
 8002d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d64:	f7fe f982 	bl	800106c <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2208      	movs	r2, #8
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d10c      	bne.n	8002d94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0391      	lsls	r1, r2, #14
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <UART_CheckIdleState+0x8c>)
 8002d84:	9200      	str	r2, [sp, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f000 f82c 	bl	8002de4 <UART_WaitOnFlagUntilTimeout>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d001      	beq.n	8002d94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e021      	b.n	8002dd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d10c      	bne.n	8002dbc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	03d1      	lsls	r1, r2, #15
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <UART_CheckIdleState+0x8c>)
 8002dac:	9200      	str	r2, [sp, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f000 f818 	bl	8002de4 <UART_WaitOnFlagUntilTimeout>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e00d      	b.n	8002dd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2274      	movs	r2, #116	; 0x74
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	01ffffff 	.word	0x01ffffff

08002de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b094      	sub	sp, #80	; 0x50
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df4:	e0a3      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df8:	3301      	adds	r3, #1
 8002dfa:	d100      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x1a>
 8002dfc:	e09f      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe f935 	bl	800106c <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13d      	bne.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e14:	f3ef 8310 	mrs	r3, PRIMASK
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1e:	2301      	movs	r3, #1
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	494c      	ldr	r1, [pc, #304]	; (8002f68 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e50:	2301      	movs	r3, #1
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2274      	movs	r2, #116	; 0x74
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e067      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2204      	movs	r2, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d050      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d146      	bne.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eba:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebe:	613b      	str	r3, [r7, #16]
  return(result);
 8002ec0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4923      	ldr	r1, [pc, #140]	; (8002f68 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ef2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	438a      	bics	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	2120      	movs	r1, #32
 8002f30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2274      	movs	r2, #116	; 0x74
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e010      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	425a      	negs	r2, r3
 8002f4e:	4153      	adcs	r3, r2
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	001a      	movs	r2, r3
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d100      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002f5c:	e74b      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b014      	add	sp, #80	; 0x50
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	fffffe5f 	.word	0xfffffe5f

08002f6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	1dbb      	adds	r3, r7, #6
 8002f78:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1dba      	adds	r2, r7, #6
 8002f84:	2158      	movs	r1, #88	; 0x58
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1dba      	adds	r2, r7, #6
 8002f8e:	215a      	movs	r1, #90	; 0x5a
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10d      	bne.n	8002fc2 <UART_Start_Receive_IT+0x56>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <UART_Start_Receive_IT+0x4c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	225c      	movs	r2, #92	; 0x5c
 8002fb2:	4939      	ldr	r1, [pc, #228]	; (8003098 <UART_Start_Receive_IT+0x12c>)
 8002fb4:	5299      	strh	r1, [r3, r2]
 8002fb6:	e01a      	b.n	8002fee <UART_Start_Receive_IT+0x82>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	225c      	movs	r2, #92	; 0x5c
 8002fbc:	21ff      	movs	r1, #255	; 0xff
 8002fbe:	5299      	strh	r1, [r3, r2]
 8002fc0:	e015      	b.n	8002fee <UART_Start_Receive_IT+0x82>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <UART_Start_Receive_IT+0x7a>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <UART_Start_Receive_IT+0x70>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	225c      	movs	r2, #92	; 0x5c
 8002fd6:	21ff      	movs	r1, #255	; 0xff
 8002fd8:	5299      	strh	r1, [r3, r2]
 8002fda:	e008      	b.n	8002fee <UART_Start_Receive_IT+0x82>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	225c      	movs	r2, #92	; 0x5c
 8002fe0:	217f      	movs	r1, #127	; 0x7f
 8002fe2:	5299      	strh	r1, [r3, r2]
 8002fe4:	e003      	b.n	8002fee <UART_Start_Receive_IT+0x82>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	225c      	movs	r2, #92	; 0x5c
 8002fea:	2100      	movs	r1, #0
 8002fec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2222      	movs	r2, #34	; 0x22
 8002ffa:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	61fb      	str	r3, [r7, #28]
  return(result);
 8003002:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	2301      	movs	r3, #1
 8003008:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	015b      	lsls	r3, r3, #5
 8003036:	429a      	cmp	r2, r3
 8003038:	d107      	bne.n	800304a <UART_Start_Receive_IT+0xde>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <UART_Start_Receive_IT+0x130>)
 8003046:	665a      	str	r2, [r3, #100]	; 0x64
 8003048:	e002      	b.n	8003050 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <UART_Start_Receive_IT+0x134>)
 800304e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2274      	movs	r2, #116	; 0x74
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	613b      	str	r3, [r7, #16]
  return(result);
 800305e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2190      	movs	r1, #144	; 0x90
 800307a:	0049      	lsls	r1, r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b00c      	add	sp, #48	; 0x30
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	000001ff 	.word	0x000001ff
 800309c:	080034c5 	.word	0x080034c5
 80030a0:	0800335d 	.word	0x0800335d

080030a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08e      	sub	sp, #56	; 0x38
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	617b      	str	r3, [r7, #20]
  return(result);
 80030b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4925      	ldr	r1, [pc, #148]	; (8003164 <UART_EndRxTransfer+0xc0>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	623b      	str	r3, [r7, #32]
  return(result);
 80030e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
 80030e8:	2301      	movs	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	438a      	bics	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	2b01      	cmp	r3, #1
 8003116:	d118      	bne.n	800314a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003118:	f3ef 8310 	mrs	r3, PRIMASK
 800311c:	60bb      	str	r3, [r7, #8]
  return(result);
 800311e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	2301      	movs	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f383 8810 	msr	PRIMASK, r3
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2110      	movs	r1, #16
 800313a:	438a      	bics	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b00e      	add	sp, #56	; 0x38
 8003162:	bd80      	pop	{r7, pc}
 8003164:	fffffedf 	.word	0xfffffedf

08003168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	225a      	movs	r2, #90	; 0x5a
 800317a:	2100      	movs	r1, #0
 800317c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2252      	movs	r2, #82	; 0x52
 8003182:	2100      	movs	r1, #0
 8003184:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fbdb 	bl	8002944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08a      	sub	sp, #40	; 0x28
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a2:	2b21      	cmp	r3, #33	; 0x21
 80031a4:	d14d      	bne.n	8003242 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2252      	movs	r2, #82	; 0x52
 80031aa:	5a9b      	ldrh	r3, [r3, r2]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d132      	bne.n	8003218 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80031b8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	2301      	movs	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	438a      	bics	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003216:	e014      	b.n	8003242 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b292      	uxth	r2, r2
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2252      	movs	r2, #82	; 0x52
 8003234:	5a9b      	ldrh	r3, [r3, r2]
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b299      	uxth	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2252      	movs	r2, #82	; 0x52
 8003240:	5299      	strh	r1, [r3, r2]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b00a      	add	sp, #40	; 0x28
 8003248:	bd80      	pop	{r7, pc}

0800324a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08c      	sub	sp, #48	; 0x30
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	2b21      	cmp	r3, #33	; 0x21
 8003258:	d151      	bne.n	80032fe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2252      	movs	r2, #82	; 0x52
 800325e:	5a9b      	ldrh	r3, [r3, r2]
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d132      	bne.n	80032cc <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003266:	f3ef 8310 	mrs	r3, PRIMASK
 800326a:	60fb      	str	r3, [r7, #12]
  return(result);
 800326c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2180      	movs	r1, #128	; 0x80
 8003288:	438a      	bics	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003298:	f3ef 8310 	mrs	r3, PRIMASK
 800329c:	61bb      	str	r3, [r7, #24]
  return(result);
 800329e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2301      	movs	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80032ca:	e018      	b.n	80032fe <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	05d2      	lsls	r2, r2, #23
 80032dc:	0dd2      	lsrs	r2, r2, #23
 80032de:	b292      	uxth	r2, r2
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2252      	movs	r2, #82	; 0x52
 80032f0:	5a9b      	ldrh	r3, [r3, r2]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b299      	uxth	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2252      	movs	r2, #82	; 0x52
 80032fc:	5299      	strh	r1, [r3, r2]
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b00c      	add	sp, #48	; 0x30
 8003304:	bd80      	pop	{r7, pc}

08003306 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330e:	f3ef 8310 	mrs	r3, PRIMASK
 8003312:	60bb      	str	r3, [r7, #8]
  return(result);
 8003314:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	2301      	movs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	438a      	bics	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f383 8810 	msr	PRIMASK, r3
}
 800333e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff faf0 	bl	8002934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b006      	add	sp, #24
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003364:	203e      	movs	r0, #62	; 0x3e
 8003366:	183b      	adds	r3, r7, r0
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	215c      	movs	r1, #92	; 0x5c
 800336c:	5a52      	ldrh	r2, [r2, r1]
 800336e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	2b22      	cmp	r3, #34	; 0x22
 8003376:	d000      	beq.n	800337a <UART_RxISR_8BIT+0x1e>
 8003378:	e095      	b.n	80034a6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	213c      	movs	r1, #60	; 0x3c
 8003380:	187b      	adds	r3, r7, r1
 8003382:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003384:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003386:	187b      	adds	r3, r7, r1
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	183b      	adds	r3, r7, r0
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b2d9      	uxtb	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	400a      	ands	r2, r1
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	225a      	movs	r2, #90	; 0x5a
 80033aa:	5a9b      	ldrh	r3, [r3, r2]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b299      	uxth	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	225a      	movs	r2, #90	; 0x5a
 80033b6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	225a      	movs	r2, #90	; 0x5a
 80033bc:	5a9b      	ldrh	r3, [r3, r2]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d178      	bne.n	80034b6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80033ca:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4936      	ldr	r1, [pc, #216]	; (80034c0 <UART_RxISR_8BIT+0x164>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003400:	2301      	movs	r3, #1
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	438a      	bics	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	2b01      	cmp	r3, #1
 800343a:	d12f      	bne.n	800349c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	60fb      	str	r3, [r7, #12]
  return(result);
 8003448:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2110      	movs	r1, #16
 8003464:	438a      	bics	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	2210      	movs	r2, #16
 800347c:	4013      	ands	r3, r2
 800347e:	2b10      	cmp	r3, #16
 8003480:	d103      	bne.n	800348a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2210      	movs	r2, #16
 8003488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2258      	movs	r2, #88	; 0x58
 800348e:	5a9a      	ldrh	r2, [r3, r2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0011      	movs	r1, r2
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff fa5d 	bl	8002954 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800349a:	e00c      	b.n	80034b6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc ff40 	bl	8000324 <HAL_UART_RxCpltCallback>
}
 80034a4:	e007      	b.n	80034b6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2108      	movs	r1, #8
 80034b2:	430a      	orrs	r2, r1
 80034b4:	619a      	str	r2, [r3, #24]
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b010      	add	sp, #64	; 0x40
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	fffffedf 	.word	0xfffffedf

080034c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b090      	sub	sp, #64	; 0x40
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80034cc:	203e      	movs	r0, #62	; 0x3e
 80034ce:	183b      	adds	r3, r7, r0
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	215c      	movs	r1, #92	; 0x5c
 80034d4:	5a52      	ldrh	r2, [r2, r1]
 80034d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034dc:	2b22      	cmp	r3, #34	; 0x22
 80034de:	d000      	beq.n	80034e2 <UART_RxISR_16BIT+0x1e>
 80034e0:	e095      	b.n	800360e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	213c      	movs	r1, #60	; 0x3c
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80034ec:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	183a      	adds	r2, r7, r0
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	225a      	movs	r2, #90	; 0x5a
 8003512:	5a9b      	ldrh	r3, [r3, r2]
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b299      	uxth	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	225a      	movs	r2, #90	; 0x5a
 800351e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	225a      	movs	r2, #90	; 0x5a
 8003524:	5a9b      	ldrh	r3, [r3, r2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d178      	bne.n	800361e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352c:	f3ef 8310 	mrs	r3, PRIMASK
 8003530:	617b      	str	r3, [r7, #20]
  return(result);
 8003532:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4936      	ldr	r1, [pc, #216]	; (8003628 <UART_RxISR_16BIT+0x164>)
 800354e:	400a      	ands	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	623b      	str	r3, [r7, #32]
  return(result);
 8003564:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	438a      	bics	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d12f      	bne.n	8003604 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
 80035ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b4:	2301      	movs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2110      	movs	r1, #16
 80035cc:	438a      	bics	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	2210      	movs	r2, #16
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d103      	bne.n	80035f2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2210      	movs	r2, #16
 80035f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2258      	movs	r2, #88	; 0x58
 80035f6:	5a9a      	ldrh	r2, [r3, r2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff f9a9 	bl	8002954 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003602:	e00c      	b.n	800361e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f7fc fe8c 	bl	8000324 <HAL_UART_RxCpltCallback>
}
 800360c:	e007      	b.n	800361e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2108      	movs	r1, #8
 800361a:	430a      	orrs	r2, r1
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b010      	add	sp, #64	; 0x40
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	fffffedf 	.word	0xfffffedf

0800362c <__errno>:
 800362c:	4b01      	ldr	r3, [pc, #4]	; (8003634 <__errno+0x8>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	4770      	bx	lr
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000094 	.word	0x20000094

08003638 <__libc_init_array>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	2600      	movs	r6, #0
 800363c:	4d0c      	ldr	r5, [pc, #48]	; (8003670 <__libc_init_array+0x38>)
 800363e:	4c0d      	ldr	r4, [pc, #52]	; (8003674 <__libc_init_array+0x3c>)
 8003640:	1b64      	subs	r4, r4, r5
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	42a6      	cmp	r6, r4
 8003646:	d109      	bne.n	800365c <__libc_init_array+0x24>
 8003648:	2600      	movs	r6, #0
 800364a:	f000 fe2b 	bl	80042a4 <_init>
 800364e:	4d0a      	ldr	r5, [pc, #40]	; (8003678 <__libc_init_array+0x40>)
 8003650:	4c0a      	ldr	r4, [pc, #40]	; (800367c <__libc_init_array+0x44>)
 8003652:	1b64      	subs	r4, r4, r5
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	42a6      	cmp	r6, r4
 8003658:	d105      	bne.n	8003666 <__libc_init_array+0x2e>
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	00b3      	lsls	r3, r6, #2
 800365e:	58eb      	ldr	r3, [r5, r3]
 8003660:	4798      	blx	r3
 8003662:	3601      	adds	r6, #1
 8003664:	e7ee      	b.n	8003644 <__libc_init_array+0xc>
 8003666:	00b3      	lsls	r3, r6, #2
 8003668:	58eb      	ldr	r3, [r5, r3]
 800366a:	4798      	blx	r3
 800366c:	3601      	adds	r6, #1
 800366e:	e7f2      	b.n	8003656 <__libc_init_array+0x1e>
 8003670:	080044c4 	.word	0x080044c4
 8003674:	080044c4 	.word	0x080044c4
 8003678:	080044c4 	.word	0x080044c4
 800367c:	080044c8 	.word	0x080044c8

08003680 <memset>:
 8003680:	0003      	movs	r3, r0
 8003682:	1882      	adds	r2, r0, r2
 8003684:	4293      	cmp	r3, r2
 8003686:	d100      	bne.n	800368a <memset+0xa>
 8003688:	4770      	bx	lr
 800368a:	7019      	strb	r1, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	e7f9      	b.n	8003684 <memset+0x4>

08003690 <siscanf>:
 8003690:	b40e      	push	{r1, r2, r3}
 8003692:	b530      	push	{r4, r5, lr}
 8003694:	2381      	movs	r3, #129	; 0x81
 8003696:	b09c      	sub	sp, #112	; 0x70
 8003698:	466a      	mov	r2, sp
 800369a:	ac1f      	add	r4, sp, #124	; 0x7c
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	cc20      	ldmia	r4!, {r5}
 80036a0:	8293      	strh	r3, [r2, #20]
 80036a2:	9002      	str	r0, [sp, #8]
 80036a4:	9006      	str	r0, [sp, #24]
 80036a6:	f7fc fd2f 	bl	8000108 <strlen>
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <siscanf+0x48>)
 80036ac:	466a      	mov	r2, sp
 80036ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80036b0:	2300      	movs	r3, #0
 80036b2:	9003      	str	r0, [sp, #12]
 80036b4:	9007      	str	r0, [sp, #28]
 80036b6:	4809      	ldr	r0, [pc, #36]	; (80036dc <siscanf+0x4c>)
 80036b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80036ba:	9314      	str	r3, [sp, #80]	; 0x50
 80036bc:	3b01      	subs	r3, #1
 80036be:	82d3      	strh	r3, [r2, #22]
 80036c0:	a902      	add	r1, sp, #8
 80036c2:	0023      	movs	r3, r4
 80036c4:	002a      	movs	r2, r5
 80036c6:	6800      	ldr	r0, [r0, #0]
 80036c8:	9401      	str	r4, [sp, #4]
 80036ca:	f000 f867 	bl	800379c <__ssvfiscanf_r>
 80036ce:	b01c      	add	sp, #112	; 0x70
 80036d0:	bc30      	pop	{r4, r5}
 80036d2:	bc08      	pop	{r3}
 80036d4:	b003      	add	sp, #12
 80036d6:	4718      	bx	r3
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	20000094 	.word	0x20000094

080036e0 <__seofread>:
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr

080036e4 <_sungetc_r>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	0014      	movs	r4, r2
 80036e8:	1c4b      	adds	r3, r1, #1
 80036ea:	d103      	bne.n	80036f4 <_sungetc_r+0x10>
 80036ec:	2501      	movs	r5, #1
 80036ee:	426d      	negs	r5, r5
 80036f0:	0028      	movs	r0, r5
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	8993      	ldrh	r3, [r2, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	4393      	bics	r3, r2
 80036fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	b2ce      	uxtb	r6, r1
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	b2cd      	uxtb	r5, r1
 8003704:	2a00      	cmp	r2, #0
 8003706:	d010      	beq.n	800372a <_sungetc_r+0x46>
 8003708:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800370a:	429a      	cmp	r2, r3
 800370c:	dd07      	ble.n	800371e <_sungetc_r+0x3a>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	701e      	strb	r6, [r3, #0]
 8003716:	6863      	ldr	r3, [r4, #4]
 8003718:	3301      	adds	r3, #1
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	e7e8      	b.n	80036f0 <_sungetc_r+0xc>
 800371e:	0021      	movs	r1, r4
 8003720:	f000 fc74 	bl	800400c <__submore>
 8003724:	2800      	cmp	r0, #0
 8003726:	d0f2      	beq.n	800370e <_sungetc_r+0x2a>
 8003728:	e7e0      	b.n	80036ec <_sungetc_r+0x8>
 800372a:	6921      	ldr	r1, [r4, #16]
 800372c:	6822      	ldr	r2, [r4, #0]
 800372e:	2900      	cmp	r1, #0
 8003730:	d007      	beq.n	8003742 <_sungetc_r+0x5e>
 8003732:	4291      	cmp	r1, r2
 8003734:	d205      	bcs.n	8003742 <_sungetc_r+0x5e>
 8003736:	1e51      	subs	r1, r2, #1
 8003738:	7808      	ldrb	r0, [r1, #0]
 800373a:	42a8      	cmp	r0, r5
 800373c:	d101      	bne.n	8003742 <_sungetc_r+0x5e>
 800373e:	6021      	str	r1, [r4, #0]
 8003740:	e7ea      	b.n	8003718 <_sungetc_r+0x34>
 8003742:	6423      	str	r3, [r4, #64]	; 0x40
 8003744:	0023      	movs	r3, r4
 8003746:	3344      	adds	r3, #68	; 0x44
 8003748:	6363      	str	r3, [r4, #52]	; 0x34
 800374a:	2303      	movs	r3, #3
 800374c:	63a3      	str	r3, [r4, #56]	; 0x38
 800374e:	0023      	movs	r3, r4
 8003750:	3346      	adds	r3, #70	; 0x46
 8003752:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003754:	701e      	strb	r6, [r3, #0]
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	2301      	movs	r3, #1
 800375a:	e7de      	b.n	800371a <_sungetc_r+0x36>

0800375c <__ssrefill_r>:
 800375c:	b510      	push	{r4, lr}
 800375e:	000c      	movs	r4, r1
 8003760:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003762:	2900      	cmp	r1, #0
 8003764:	d00e      	beq.n	8003784 <__ssrefill_r+0x28>
 8003766:	0023      	movs	r3, r4
 8003768:	3344      	adds	r3, #68	; 0x44
 800376a:	4299      	cmp	r1, r3
 800376c:	d001      	beq.n	8003772 <__ssrefill_r+0x16>
 800376e:	f000 fca1 	bl	80040b4 <_free_r>
 8003772:	2000      	movs	r0, #0
 8003774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003776:	6360      	str	r0, [r4, #52]	; 0x34
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	4283      	cmp	r3, r0
 800377c:	d002      	beq.n	8003784 <__ssrefill_r+0x28>
 800377e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	bd10      	pop	{r4, pc}
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	2001      	movs	r0, #1
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	2300      	movs	r3, #0
 800378c:	89a2      	ldrh	r2, [r4, #12]
 800378e:	6063      	str	r3, [r4, #4]
 8003790:	3320      	adds	r3, #32
 8003792:	4313      	orrs	r3, r2
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	4240      	negs	r0, r0
 8003798:	e7f3      	b.n	8003782 <__ssrefill_r+0x26>
	...

0800379c <__ssvfiscanf_r>:
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	4cb5      	ldr	r4, [pc, #724]	; (8003a74 <__ssvfiscanf_r+0x2d8>)
 80037a0:	0005      	movs	r5, r0
 80037a2:	44a5      	add	sp, r4
 80037a4:	000c      	movs	r4, r1
 80037a6:	2100      	movs	r1, #0
 80037a8:	9148      	str	r1, [sp, #288]	; 0x120
 80037aa:	9149      	str	r1, [sp, #292]	; 0x124
 80037ac:	a905      	add	r1, sp, #20
 80037ae:	914a      	str	r1, [sp, #296]	; 0x128
 80037b0:	21be      	movs	r1, #190	; 0xbe
 80037b2:	48b1      	ldr	r0, [pc, #708]	; (8003a78 <__ssvfiscanf_r+0x2dc>)
 80037b4:	0049      	lsls	r1, r1, #1
 80037b6:	ae45      	add	r6, sp, #276	; 0x114
 80037b8:	5070      	str	r0, [r6, r1]
 80037ba:	48b0      	ldr	r0, [pc, #704]	; (8003a7c <__ssvfiscanf_r+0x2e0>)
 80037bc:	3104      	adds	r1, #4
 80037be:	ae45      	add	r6, sp, #276	; 0x114
 80037c0:	5070      	str	r0, [r6, r1]
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	9101      	str	r1, [sp, #4]
 80037c6:	7813      	ldrb	r3, [r2, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <__ssvfiscanf_r+0x34>
 80037ce:	e14f      	b.n	8003a70 <__ssvfiscanf_r+0x2d4>
 80037d0:	4fab      	ldr	r7, [pc, #684]	; (8003a80 <__ssvfiscanf_r+0x2e4>)
 80037d2:	2008      	movs	r0, #8
 80037d4:	5cf9      	ldrb	r1, [r7, r3]
 80037d6:	2308      	movs	r3, #8
 80037d8:	1c56      	adds	r6, r2, #1
 80037da:	400b      	ands	r3, r1
 80037dc:	4201      	tst	r1, r0
 80037de:	d01e      	beq.n	800381e <__ssvfiscanf_r+0x82>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dd11      	ble.n	800380a <__ssvfiscanf_r+0x6e>
 80037e6:	2108      	movs	r1, #8
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	5cba      	ldrb	r2, [r7, r2]
 80037ee:	420a      	tst	r2, r1
 80037f0:	d101      	bne.n	80037f6 <__ssvfiscanf_r+0x5a>
 80037f2:	0032      	movs	r2, r6
 80037f4:	e7e7      	b.n	80037c6 <__ssvfiscanf_r+0x2a>
 80037f6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80037f8:	3301      	adds	r3, #1
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	3201      	adds	r2, #1
 80037fe:	9249      	str	r2, [sp, #292]	; 0x124
 8003800:	6862      	ldr	r2, [r4, #4]
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	3a01      	subs	r2, #1
 8003806:	6062      	str	r2, [r4, #4]
 8003808:	e7ea      	b.n	80037e0 <__ssvfiscanf_r+0x44>
 800380a:	9a01      	ldr	r2, [sp, #4]
 800380c:	ab45      	add	r3, sp, #276	; 0x114
 800380e:	589b      	ldr	r3, [r3, r2]
 8003810:	0021      	movs	r1, r4
 8003812:	0028      	movs	r0, r5
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4798      	blx	r3
 8003818:	2800      	cmp	r0, #0
 800381a:	d0e4      	beq.n	80037e6 <__ssvfiscanf_r+0x4a>
 800381c:	e7e9      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 800381e:	9900      	ldr	r1, [sp, #0]
 8003820:	2925      	cmp	r1, #37	; 0x25
 8003822:	d164      	bne.n	80038ee <__ssvfiscanf_r+0x152>
 8003824:	9347      	str	r3, [sp, #284]	; 0x11c
 8003826:	9345      	str	r3, [sp, #276]	; 0x114
 8003828:	7853      	ldrb	r3, [r2, #1]
 800382a:	2b2a      	cmp	r3, #42	; 0x2a
 800382c:	d102      	bne.n	8003834 <__ssvfiscanf_r+0x98>
 800382e:	3b1a      	subs	r3, #26
 8003830:	9345      	str	r3, [sp, #276]	; 0x114
 8003832:	1c96      	adds	r6, r2, #2
 8003834:	0037      	movs	r7, r6
 8003836:	200a      	movs	r0, #10
 8003838:	7839      	ldrb	r1, [r7, #0]
 800383a:	1c7b      	adds	r3, r7, #1
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	000b      	movs	r3, r1
 8003840:	3b30      	subs	r3, #48	; 0x30
 8003842:	2b09      	cmp	r3, #9
 8003844:	d91f      	bls.n	8003886 <__ssvfiscanf_r+0xea>
 8003846:	4e8f      	ldr	r6, [pc, #572]	; (8003a84 <__ssvfiscanf_r+0x2e8>)
 8003848:	2203      	movs	r2, #3
 800384a:	0030      	movs	r0, r6
 800384c:	f000 fc1e 	bl	800408c <memchr>
 8003850:	2800      	cmp	r0, #0
 8003852:	d007      	beq.n	8003864 <__ssvfiscanf_r+0xc8>
 8003854:	2301      	movs	r3, #1
 8003856:	1b80      	subs	r0, r0, r6
 8003858:	4083      	lsls	r3, r0
 800385a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800385c:	9f02      	ldr	r7, [sp, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	9203      	str	r2, [sp, #12]
 8003862:	9345      	str	r3, [sp, #276]	; 0x114
 8003864:	783b      	ldrb	r3, [r7, #0]
 8003866:	1c7e      	adds	r6, r7, #1
 8003868:	2b78      	cmp	r3, #120	; 0x78
 800386a:	d807      	bhi.n	800387c <__ssvfiscanf_r+0xe0>
 800386c:	2b57      	cmp	r3, #87	; 0x57
 800386e:	d812      	bhi.n	8003896 <__ssvfiscanf_r+0xfa>
 8003870:	2b25      	cmp	r3, #37	; 0x25
 8003872:	d03c      	beq.n	80038ee <__ssvfiscanf_r+0x152>
 8003874:	d836      	bhi.n	80038e4 <__ssvfiscanf_r+0x148>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d100      	bne.n	800387c <__ssvfiscanf_r+0xe0>
 800387a:	e0f6      	b.n	8003a6a <__ssvfiscanf_r+0x2ce>
 800387c:	2303      	movs	r3, #3
 800387e:	934b      	str	r3, [sp, #300]	; 0x12c
 8003880:	3307      	adds	r3, #7
 8003882:	9346      	str	r3, [sp, #280]	; 0x118
 8003884:	e076      	b.n	8003974 <__ssvfiscanf_r+0x1d8>
 8003886:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003888:	9f02      	ldr	r7, [sp, #8]
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	4343      	muls	r3, r0
 800388e:	3b30      	subs	r3, #48	; 0x30
 8003890:	185b      	adds	r3, r3, r1
 8003892:	9347      	str	r3, [sp, #284]	; 0x11c
 8003894:	e7d0      	b.n	8003838 <__ssvfiscanf_r+0x9c>
 8003896:	0018      	movs	r0, r3
 8003898:	3858      	subs	r0, #88	; 0x58
 800389a:	2820      	cmp	r0, #32
 800389c:	d8ee      	bhi.n	800387c <__ssvfiscanf_r+0xe0>
 800389e:	f7fc fc3b 	bl	8000118 <__gnu_thumb1_case_shi>
 80038a2:	0051      	.short	0x0051
 80038a4:	ffedffed 	.word	0xffedffed
 80038a8:	ffed0086 	.word	0xffed0086
 80038ac:	ffedffed 	.word	0xffedffed
 80038b0:	ffedffed 	.word	0xffedffed
 80038b4:	ffedffed 	.word	0xffedffed
 80038b8:	00600093 	.word	0x00600093
 80038bc:	00240024 	.word	0x00240024
 80038c0:	ffed0024 	.word	0xffed0024
 80038c4:	ffed0062 	.word	0xffed0062
 80038c8:	ffedffed 	.word	0xffedffed
 80038cc:	009dffed 	.word	0x009dffed
 80038d0:	004b0065 	.word	0x004b0065
 80038d4:	ffedffed 	.word	0xffedffed
 80038d8:	ffed009b 	.word	0xffed009b
 80038dc:	ffed0060 	.word	0xffed0060
 80038e0:	0051ffed 	.word	0x0051ffed
 80038e4:	3b45      	subs	r3, #69	; 0x45
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d8c8      	bhi.n	800387c <__ssvfiscanf_r+0xe0>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e041      	b.n	8003972 <__ssvfiscanf_r+0x1d6>
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dd0f      	ble.n	8003914 <__ssvfiscanf_r+0x178>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	9900      	ldr	r1, [sp, #0]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	428a      	cmp	r2, r1
 80038fc:	d000      	beq.n	8003900 <__ssvfiscanf_r+0x164>
 80038fe:	e0b7      	b.n	8003a70 <__ssvfiscanf_r+0x2d4>
 8003900:	3301      	adds	r3, #1
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003908:	3a01      	subs	r2, #1
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	6062      	str	r2, [r4, #4]
 8003910:	9349      	str	r3, [sp, #292]	; 0x124
 8003912:	e76e      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 8003914:	9a01      	ldr	r2, [sp, #4]
 8003916:	ab45      	add	r3, sp, #276	; 0x114
 8003918:	589b      	ldr	r3, [r3, r2]
 800391a:	0021      	movs	r1, r4
 800391c:	0028      	movs	r0, r5
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	4798      	blx	r3
 8003922:	2800      	cmp	r0, #0
 8003924:	d0e6      	beq.n	80038f4 <__ssvfiscanf_r+0x158>
 8003926:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003928:	2800      	cmp	r0, #0
 800392a:	d000      	beq.n	800392e <__ssvfiscanf_r+0x192>
 800392c:	e099      	b.n	8003a62 <__ssvfiscanf_r+0x2c6>
 800392e:	3801      	subs	r0, #1
 8003930:	23a7      	movs	r3, #167	; 0xa7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	449d      	add	sp, r3
 8003936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003938:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800393a:	9200      	str	r2, [sp, #0]
 800393c:	2220      	movs	r2, #32
 800393e:	9900      	ldr	r1, [sp, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	9245      	str	r2, [sp, #276]	; 0x114
 8003944:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003946:	9200      	str	r2, [sp, #0]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	9900      	ldr	r1, [sp, #0]
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	430a      	orrs	r2, r1
 8003950:	9245      	str	r2, [sp, #276]	; 0x114
 8003952:	2210      	movs	r2, #16
 8003954:	9246      	str	r2, [sp, #280]	; 0x118
 8003956:	226e      	movs	r2, #110	; 0x6e
 8003958:	429a      	cmp	r2, r3
 800395a:	419b      	sbcs	r3, r3
 800395c:	425b      	negs	r3, r3
 800395e:	3303      	adds	r3, #3
 8003960:	e007      	b.n	8003972 <__ssvfiscanf_r+0x1d6>
 8003962:	220a      	movs	r2, #10
 8003964:	e7f6      	b.n	8003954 <__ssvfiscanf_r+0x1b8>
 8003966:	2300      	movs	r3, #0
 8003968:	9346      	str	r3, [sp, #280]	; 0x118
 800396a:	e7f8      	b.n	800395e <__ssvfiscanf_r+0x1c2>
 800396c:	2308      	movs	r3, #8
 800396e:	9346      	str	r3, [sp, #280]	; 0x118
 8003970:	3b04      	subs	r3, #4
 8003972:	934b      	str	r3, [sp, #300]	; 0x12c
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	dd3f      	ble.n	80039fa <__ssvfiscanf_r+0x25e>
 800397a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	065b      	lsls	r3, r3, #25
 8003980:	d406      	bmi.n	8003990 <__ssvfiscanf_r+0x1f4>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	493e      	ldr	r1, [pc, #248]	; (8003a80 <__ssvfiscanf_r+0x2e4>)
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	5c8a      	ldrb	r2, [r1, r2]
 800398a:	2108      	movs	r1, #8
 800398c:	420a      	tst	r2, r1
 800398e:	d13e      	bne.n	8003a0e <__ssvfiscanf_r+0x272>
 8003990:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003992:	2b02      	cmp	r3, #2
 8003994:	dc51      	bgt.n	8003a3a <__ssvfiscanf_r+0x29e>
 8003996:	0022      	movs	r2, r4
 8003998:	0028      	movs	r0, r5
 800399a:	ab04      	add	r3, sp, #16
 800399c:	a945      	add	r1, sp, #276	; 0x114
 800399e:	f000 f875 	bl	8003a8c <_scanf_chars>
 80039a2:	2801      	cmp	r0, #1
 80039a4:	d064      	beq.n	8003a70 <__ssvfiscanf_r+0x2d4>
 80039a6:	2802      	cmp	r0, #2
 80039a8:	d000      	beq.n	80039ac <__ssvfiscanf_r+0x210>
 80039aa:	e722      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 80039ac:	e7bb      	b.n	8003926 <__ssvfiscanf_r+0x18a>
 80039ae:	0031      	movs	r1, r6
 80039b0:	a805      	add	r0, sp, #20
 80039b2:	f000 f9cd 	bl	8003d50 <__sccl>
 80039b6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80039b8:	0006      	movs	r6, r0
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2340      	movs	r3, #64	; 0x40
 80039be:	9a00      	ldr	r2, [sp, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	9345      	str	r3, [sp, #276]	; 0x114
 80039c4:	2301      	movs	r3, #1
 80039c6:	e7d4      	b.n	8003972 <__ssvfiscanf_r+0x1d6>
 80039c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	9a00      	ldr	r2, [sp, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	9345      	str	r3, [sp, #276]	; 0x114
 80039d4:	2300      	movs	r3, #0
 80039d6:	e7cc      	b.n	8003972 <__ssvfiscanf_r+0x1d6>
 80039d8:	2302      	movs	r3, #2
 80039da:	e7ca      	b.n	8003972 <__ssvfiscanf_r+0x1d6>
 80039dc:	9845      	ldr	r0, [sp, #276]	; 0x114
 80039de:	06c3      	lsls	r3, r0, #27
 80039e0:	d500      	bpl.n	80039e4 <__ssvfiscanf_r+0x248>
 80039e2:	e706      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 80039e4:	9b04      	ldr	r3, [sp, #16]
 80039e6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	9104      	str	r1, [sp, #16]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	07c7      	lsls	r7, r0, #31
 80039f0:	d501      	bpl.n	80039f6 <__ssvfiscanf_r+0x25a>
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	e6fd      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e6fb      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 80039fa:	9a01      	ldr	r2, [sp, #4]
 80039fc:	ab45      	add	r3, sp, #276	; 0x114
 80039fe:	589b      	ldr	r3, [r3, r2]
 8003a00:	0021      	movs	r1, r4
 8003a02:	0028      	movs	r0, r5
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	4798      	blx	r3
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0b6      	beq.n	800397a <__ssvfiscanf_r+0x1de>
 8003a0c:	e78b      	b.n	8003926 <__ssvfiscanf_r+0x18a>
 8003a0e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	3201      	adds	r2, #1
 8003a14:	9249      	str	r2, [sp, #292]	; 0x124
 8003a16:	6862      	ldr	r2, [r4, #4]
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	6062      	str	r2, [r4, #4]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	dd02      	ble.n	8003a26 <__ssvfiscanf_r+0x28a>
 8003a20:	3301      	adds	r3, #1
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	e7ad      	b.n	8003982 <__ssvfiscanf_r+0x1e6>
 8003a26:	9a01      	ldr	r2, [sp, #4]
 8003a28:	ab45      	add	r3, sp, #276	; 0x114
 8003a2a:	589b      	ldr	r3, [r3, r2]
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	0028      	movs	r0, r5
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4798      	blx	r3
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d0a4      	beq.n	8003982 <__ssvfiscanf_r+0x1e6>
 8003a38:	e775      	b.n	8003926 <__ssvfiscanf_r+0x18a>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	dc06      	bgt.n	8003a4c <__ssvfiscanf_r+0x2b0>
 8003a3e:	0022      	movs	r2, r4
 8003a40:	0028      	movs	r0, r5
 8003a42:	ab04      	add	r3, sp, #16
 8003a44:	a945      	add	r1, sp, #276	; 0x114
 8003a46:	f000 f87f 	bl	8003b48 <_scanf_i>
 8003a4a:	e7aa      	b.n	80039a2 <__ssvfiscanf_r+0x206>
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <__ssvfiscanf_r+0x2ec>)
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d100      	bne.n	8003a54 <__ssvfiscanf_r+0x2b8>
 8003a52:	e6ce      	b.n	80037f2 <__ssvfiscanf_r+0x56>
 8003a54:	0022      	movs	r2, r4
 8003a56:	0028      	movs	r0, r5
 8003a58:	ab04      	add	r3, sp, #16
 8003a5a:	a945      	add	r1, sp, #276	; 0x114
 8003a5c:	e000      	b.n	8003a60 <__ssvfiscanf_r+0x2c4>
 8003a5e:	bf00      	nop
 8003a60:	e79f      	b.n	80039a2 <__ssvfiscanf_r+0x206>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	065b      	lsls	r3, r3, #25
 8003a66:	d400      	bmi.n	8003a6a <__ssvfiscanf_r+0x2ce>
 8003a68:	e762      	b.n	8003930 <__ssvfiscanf_r+0x194>
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	4240      	negs	r0, r0
 8003a6e:	e75f      	b.n	8003930 <__ssvfiscanf_r+0x194>
 8003a70:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003a72:	e75d      	b.n	8003930 <__ssvfiscanf_r+0x194>
 8003a74:	fffffd64 	.word	0xfffffd64
 8003a78:	080036e5 	.word	0x080036e5
 8003a7c:	0800375d 	.word	0x0800375d
 8003a80:	08004364 	.word	0x08004364
 8003a84:	08004344 	.word	0x08004344
 8003a88:	00000000 	.word	0x00000000

08003a8c <_scanf_chars>:
 8003a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a8e:	0015      	movs	r5, r2
 8003a90:	688a      	ldr	r2, [r1, #8]
 8003a92:	000c      	movs	r4, r1
 8003a94:	9001      	str	r0, [sp, #4]
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	d105      	bne.n	8003aa6 <_scanf_chars+0x1a>
 8003a9a:	6989      	ldr	r1, [r1, #24]
 8003a9c:	3201      	adds	r2, #1
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d000      	beq.n	8003aa4 <_scanf_chars+0x18>
 8003aa2:	3a02      	subs	r2, #2
 8003aa4:	60a2      	str	r2, [r4, #8]
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	06d2      	lsls	r2, r2, #27
 8003aaa:	d403      	bmi.n	8003ab4 <_scanf_chars+0x28>
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	1d11      	adds	r1, r2, #4
 8003ab0:	6019      	str	r1, [r3, #0]
 8003ab2:	6817      	ldr	r7, [r2, #0]
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	69a0      	ldr	r0, [r4, #24]
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d013      	beq.n	8003ae4 <_scanf_chars+0x58>
 8003abc:	2801      	cmp	r0, #1
 8003abe:	d108      	bne.n	8003ad2 <_scanf_chars+0x46>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	6962      	ldr	r2, [r4, #20]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <_scanf_chars+0x58>
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	d127      	bne.n	8003b20 <_scanf_chars+0x94>
 8003ad0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ad2:	2802      	cmp	r0, #2
 8003ad4:	d124      	bne.n	8003b20 <_scanf_chars+0x94>
 8003ad6:	682b      	ldr	r3, [r5, #0]
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <_scanf_chars+0xb8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4213      	tst	r3, r2
 8003ae2:	d11d      	bne.n	8003b20 <_scanf_chars+0x94>
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	3601      	adds	r6, #1
 8003aea:	4213      	tst	r3, r2
 8003aec:	d103      	bne.n	8003af6 <_scanf_chars+0x6a>
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	703b      	strb	r3, [r7, #0]
 8003af4:	3701      	adds	r7, #1
 8003af6:	682a      	ldr	r2, [r5, #0]
 8003af8:	686b      	ldr	r3, [r5, #4]
 8003afa:	3201      	adds	r2, #1
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	68a2      	ldr	r2, [r4, #8]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	606b      	str	r3, [r5, #4]
 8003b06:	60a2      	str	r2, [r4, #8]
 8003b08:	2a00      	cmp	r2, #0
 8003b0a:	d009      	beq.n	8003b20 <_scanf_chars+0x94>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	dcd2      	bgt.n	8003ab6 <_scanf_chars+0x2a>
 8003b10:	23c0      	movs	r3, #192	; 0xc0
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	0029      	movs	r1, r5
 8003b16:	58e3      	ldr	r3, [r4, r3]
 8003b18:	9801      	ldr	r0, [sp, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d0ca      	beq.n	8003ab6 <_scanf_chars+0x2a>
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	2310      	movs	r3, #16
 8003b24:	0011      	movs	r1, r2
 8003b26:	4019      	ands	r1, r3
 8003b28:	421a      	tst	r2, r3
 8003b2a:	d106      	bne.n	8003b3a <_scanf_chars+0xae>
 8003b2c:	68e3      	ldr	r3, [r4, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60e3      	str	r3, [r4, #12]
 8003b32:	69a3      	ldr	r3, [r4, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d000      	beq.n	8003b3a <_scanf_chars+0xae>
 8003b38:	7039      	strb	r1, [r7, #0]
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	199e      	adds	r6, r3, r6
 8003b40:	6126      	str	r6, [r4, #16]
 8003b42:	e7c5      	b.n	8003ad0 <_scanf_chars+0x44>
 8003b44:	08004364 	.word	0x08004364

08003b48 <_scanf_i>:
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	000c      	movs	r4, r1
 8003b4c:	b08d      	sub	sp, #52	; 0x34
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	4b79      	ldr	r3, [pc, #484]	; (8003d38 <_scanf_i+0x1f0>)
 8003b52:	0016      	movs	r6, r2
 8003b54:	9005      	str	r0, [sp, #20]
 8003b56:	aa09      	add	r2, sp, #36	; 0x24
 8003b58:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003b5a:	c223      	stmia	r2!, {r0, r1, r5}
 8003b5c:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <_scanf_i+0x1f4>)
 8003b5e:	9306      	str	r3, [sp, #24]
 8003b60:	69a3      	ldr	r3, [r4, #24]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d001      	beq.n	8003b6a <_scanf_i+0x22>
 8003b66:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <_scanf_i+0x1f8>)
 8003b68:	9306      	str	r3, [sp, #24]
 8003b6a:	22ae      	movs	r2, #174	; 0xae
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	0052      	lsls	r2, r2, #1
 8003b72:	1e59      	subs	r1, r3, #1
 8003b74:	9004      	str	r0, [sp, #16]
 8003b76:	4291      	cmp	r1, r2
 8003b78:	d905      	bls.n	8003b86 <_scanf_i+0x3e>
 8003b7a:	3b5e      	subs	r3, #94	; 0x5e
 8003b7c:	3bff      	subs	r3, #255	; 0xff
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	235e      	movs	r3, #94	; 0x5e
 8003b82:	33ff      	adds	r3, #255	; 0xff
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	0023      	movs	r3, r4
 8003b88:	331c      	adds	r3, #28
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	23d0      	movs	r3, #208	; 0xd0
 8003b8e:	2700      	movs	r7, #0
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	4313      	orrs	r3, r2
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	a809      	add	r0, sp, #36	; 0x24
 8003ba0:	7819      	ldrb	r1, [r3, #0]
 8003ba2:	00bb      	lsls	r3, r7, #2
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	5818      	ldr	r0, [r3, r0]
 8003ba8:	f000 fa70 	bl	800408c <memchr>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d02b      	beq.n	8003c08 <_scanf_i+0xc0>
 8003bb0:	2f01      	cmp	r7, #1
 8003bb2:	d162      	bne.n	8003c7a <_scanf_i+0x132>
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <_scanf_i+0x80>
 8003bba:	3308      	adds	r3, #8
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	33f9      	adds	r3, #249	; 0xf9
 8003bc2:	33ff      	adds	r3, #255	; 0xff
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <_scanf_i+0x1fc>)
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	6023      	str	r3, [r4, #0]
 8003bd0:	68a3      	ldr	r3, [r4, #8]
 8003bd2:	1e5a      	subs	r2, r3, #1
 8003bd4:	60a2      	str	r2, [r4, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <_scanf_i+0xc0>
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	6032      	str	r2, [r6, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	9a03      	ldr	r2, [sp, #12]
 8003be4:	7013      	strb	r3, [r2, #0]
 8003be6:	6873      	ldr	r3, [r6, #4]
 8003be8:	1c55      	adds	r5, r2, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6073      	str	r3, [r6, #4]
 8003bee:	9503      	str	r5, [sp, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	dc09      	bgt.n	8003c08 <_scanf_i+0xc0>
 8003bf4:	23c0      	movs	r3, #192	; 0xc0
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	58e3      	ldr	r3, [r4, r3]
 8003bfa:	0031      	movs	r1, r6
 8003bfc:	9805      	ldr	r0, [sp, #20]
 8003bfe:	9307      	str	r3, [sp, #28]
 8003c00:	4798      	blx	r3
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d000      	beq.n	8003c08 <_scanf_i+0xc0>
 8003c06:	e081      	b.n	8003d0c <_scanf_i+0x1c4>
 8003c08:	3701      	adds	r7, #1
 8003c0a:	2f03      	cmp	r7, #3
 8003c0c:	d1c6      	bne.n	8003b9c <_scanf_i+0x54>
 8003c0e:	6863      	ldr	r3, [r4, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <_scanf_i+0xd0>
 8003c14:	330a      	adds	r3, #10
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	2110      	movs	r1, #16
 8003c1a:	2700      	movs	r7, #0
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	1ac9      	subs	r1, r1, r3
 8003c22:	4b49      	ldr	r3, [pc, #292]	; (8003d48 <_scanf_i+0x200>)
 8003c24:	18c9      	adds	r1, r1, r3
 8003c26:	f000 f893 	bl	8003d50 <__sccl>
 8003c2a:	9d03      	ldr	r5, [sp, #12]
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d041      	beq.n	8003cba <_scanf_i+0x172>
 8003c36:	6831      	ldr	r1, [r6, #0]
 8003c38:	6963      	ldr	r3, [r4, #20]
 8003c3a:	7808      	ldrb	r0, [r1, #0]
 8003c3c:	5c1b      	ldrb	r3, [r3, r0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d03b      	beq.n	8003cba <_scanf_i+0x172>
 8003c42:	2830      	cmp	r0, #48	; 0x30
 8003c44:	d129      	bne.n	8003c9a <_scanf_i+0x152>
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	421a      	tst	r2, r3
 8003c4c:	d025      	beq.n	8003c9a <_scanf_i+0x152>
 8003c4e:	9b04      	ldr	r3, [sp, #16]
 8003c50:	3701      	adds	r7, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <_scanf_i+0x11a>
 8003c56:	001a      	movs	r2, r3
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	3a01      	subs	r2, #1
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	9204      	str	r2, [sp, #16]
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	6873      	ldr	r3, [r6, #4]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	6073      	str	r3, [r6, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	dd1d      	ble.n	8003ca8 <_scanf_i+0x160>
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60a3      	str	r3, [r4, #8]
 8003c78:	e7d8      	b.n	8003c2c <_scanf_i+0xe4>
 8003c7a:	2f02      	cmp	r7, #2
 8003c7c:	d1a8      	bne.n	8003bd0 <_scanf_i+0x88>
 8003c7e:	21c0      	movs	r1, #192	; 0xc0
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	00c9      	lsls	r1, r1, #3
 8003c86:	4011      	ands	r1, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d1bf      	bne.n	8003c0e <_scanf_i+0xc6>
 8003c8e:	3bf1      	subs	r3, #241	; 0xf1
 8003c90:	3bff      	subs	r3, #255	; 0xff
 8003c92:	6063      	str	r3, [r4, #4]
 8003c94:	33f0      	adds	r3, #240	; 0xf0
 8003c96:	4313      	orrs	r3, r2
 8003c98:	e799      	b.n	8003bce <_scanf_i+0x86>
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <_scanf_i+0x204>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	780b      	ldrb	r3, [r1, #0]
 8003ca2:	702b      	strb	r3, [r5, #0]
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	e7dc      	b.n	8003c62 <_scanf_i+0x11a>
 8003ca8:	23c0      	movs	r3, #192	; 0xc0
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	58e3      	ldr	r3, [r4, r3]
 8003cae:	0031      	movs	r1, r6
 8003cb0:	9805      	ldr	r0, [sp, #20]
 8003cb2:	9303      	str	r3, [sp, #12]
 8003cb4:	4798      	blx	r3
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d0db      	beq.n	8003c72 <_scanf_i+0x12a>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	05db      	lsls	r3, r3, #23
 8003cbe:	d50e      	bpl.n	8003cde <_scanf_i+0x196>
 8003cc0:	9b01      	ldr	r3, [sp, #4]
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	d907      	bls.n	8003cd6 <_scanf_i+0x18e>
 8003cc6:	23be      	movs	r3, #190	; 0xbe
 8003cc8:	3d01      	subs	r5, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	0032      	movs	r2, r6
 8003cce:	7829      	ldrb	r1, [r5, #0]
 8003cd0:	58e3      	ldr	r3, [r4, r3]
 8003cd2:	9805      	ldr	r0, [sp, #20]
 8003cd4:	4798      	blx	r3
 8003cd6:	9b01      	ldr	r3, [sp, #4]
 8003cd8:	2001      	movs	r0, #1
 8003cda:	429d      	cmp	r5, r3
 8003cdc:	d029      	beq.n	8003d32 <_scanf_i+0x1ea>
 8003cde:	6821      	ldr	r1, [r4, #0]
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	000a      	movs	r2, r1
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	4219      	tst	r1, r3
 8003ce8:	d11c      	bne.n	8003d24 <_scanf_i+0x1dc>
 8003cea:	702a      	strb	r2, [r5, #0]
 8003cec:	6863      	ldr	r3, [r4, #4]
 8003cee:	9901      	ldr	r1, [sp, #4]
 8003cf0:	9805      	ldr	r0, [sp, #20]
 8003cf2:	9e06      	ldr	r6, [sp, #24]
 8003cf4:	47b0      	blx	r6
 8003cf6:	9b02      	ldr	r3, [sp, #8]
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	068a      	lsls	r2, r1, #26
 8003cfe:	d507      	bpl.n	8003d10 <_scanf_i+0x1c8>
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	9902      	ldr	r1, [sp, #8]
 8003d04:	600a      	str	r2, [r1, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6018      	str	r0, [r3, #0]
 8003d0a:	e008      	b.n	8003d1e <_scanf_i+0x1d6>
 8003d0c:	2700      	movs	r7, #0
 8003d0e:	e7d4      	b.n	8003cba <_scanf_i+0x172>
 8003d10:	1d1a      	adds	r2, r3, #4
 8003d12:	07ce      	lsls	r6, r1, #31
 8003d14:	d5f5      	bpl.n	8003d02 <_scanf_i+0x1ba>
 8003d16:	9902      	ldr	r1, [sp, #8]
 8003d18:	600a      	str	r2, [r1, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	8018      	strh	r0, [r3, #0]
 8003d1e:	68e3      	ldr	r3, [r4, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60e3      	str	r3, [r4, #12]
 8003d24:	2000      	movs	r0, #0
 8003d26:	9b01      	ldr	r3, [sp, #4]
 8003d28:	1aed      	subs	r5, r5, r3
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	19ef      	adds	r7, r5, r7
 8003d2e:	19df      	adds	r7, r3, r7
 8003d30:	6127      	str	r7, [r4, #16]
 8003d32:	b00d      	add	sp, #52	; 0x34
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	08004320 	.word	0x08004320
 8003d3c:	08003ee5 	.word	0x08003ee5
 8003d40:	08004005 	.word	0x08004005
 8003d44:	fffffaff 	.word	0xfffffaff
 8003d48:	08004351 	.word	0x08004351
 8003d4c:	fffff6ff 	.word	0xfffff6ff

08003d50 <__sccl>:
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	780b      	ldrb	r3, [r1, #0]
 8003d54:	0004      	movs	r4, r0
 8003d56:	2b5e      	cmp	r3, #94	; 0x5e
 8003d58:	d00c      	beq.n	8003d74 <__sccl+0x24>
 8003d5a:	1c48      	adds	r0, r1, #1
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	0022      	movs	r2, r4
 8003d60:	1c65      	adds	r5, r4, #1
 8003d62:	35ff      	adds	r5, #255	; 0xff
 8003d64:	7011      	strb	r1, [r2, #0]
 8003d66:	3201      	adds	r2, #1
 8003d68:	42aa      	cmp	r2, r5
 8003d6a:	d1fb      	bne.n	8003d64 <__sccl+0x14>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <__sccl+0x2c>
 8003d70:	3801      	subs	r0, #1
 8003d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d74:	784b      	ldrb	r3, [r1, #1]
 8003d76:	1c88      	adds	r0, r1, #2
 8003d78:	2101      	movs	r1, #1
 8003d7a:	e7f0      	b.n	8003d5e <__sccl+0xe>
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	262d      	movs	r6, #45	; 0x2d
 8003d80:	4051      	eors	r1, r2
 8003d82:	0002      	movs	r2, r0
 8003d84:	54e1      	strb	r1, [r4, r3]
 8003d86:	7815      	ldrb	r5, [r2, #0]
 8003d88:	1c50      	adds	r0, r2, #1
 8003d8a:	2d2d      	cmp	r5, #45	; 0x2d
 8003d8c:	d009      	beq.n	8003da2 <__sccl+0x52>
 8003d8e:	2d5d      	cmp	r5, #93	; 0x5d
 8003d90:	d0ef      	beq.n	8003d72 <__sccl+0x22>
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	d101      	bne.n	8003d9a <__sccl+0x4a>
 8003d96:	0010      	movs	r0, r2
 8003d98:	e7eb      	b.n	8003d72 <__sccl+0x22>
 8003d9a:	002b      	movs	r3, r5
 8003d9c:	e7f1      	b.n	8003d82 <__sccl+0x32>
 8003d9e:	0033      	movs	r3, r6
 8003da0:	e7ef      	b.n	8003d82 <__sccl+0x32>
 8003da2:	7855      	ldrb	r5, [r2, #1]
 8003da4:	2d5d      	cmp	r5, #93	; 0x5d
 8003da6:	d0fa      	beq.n	8003d9e <__sccl+0x4e>
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	dcf8      	bgt.n	8003d9e <__sccl+0x4e>
 8003dac:	0018      	movs	r0, r3
 8003dae:	3202      	adds	r2, #2
 8003db0:	3001      	adds	r0, #1
 8003db2:	5421      	strb	r1, [r4, r0]
 8003db4:	4285      	cmp	r5, r0
 8003db6:	dcfb      	bgt.n	8003db0 <__sccl+0x60>
 8003db8:	2000      	movs	r0, #0
 8003dba:	1c5f      	adds	r7, r3, #1
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	da01      	bge.n	8003dc4 <__sccl+0x74>
 8003dc0:	1ae8      	subs	r0, r5, r3
 8003dc2:	3801      	subs	r0, #1
 8003dc4:	183b      	adds	r3, r7, r0
 8003dc6:	e7de      	b.n	8003d86 <__sccl+0x36>

08003dc8 <_strtol_l.isra.0>:
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	001e      	movs	r6, r3
 8003dce:	9005      	str	r0, [sp, #20]
 8003dd0:	9101      	str	r1, [sp, #4]
 8003dd2:	9202      	str	r2, [sp, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d045      	beq.n	8003e64 <_strtol_l.isra.0+0x9c>
 8003dd8:	0008      	movs	r0, r1
 8003dda:	2b24      	cmp	r3, #36	; 0x24
 8003ddc:	d842      	bhi.n	8003e64 <_strtol_l.isra.0+0x9c>
 8003dde:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <_strtol_l.isra.0+0x114>)
 8003de0:	2208      	movs	r2, #8
 8003de2:	469c      	mov	ip, r3
 8003de4:	0003      	movs	r3, r0
 8003de6:	4661      	mov	r1, ip
 8003de8:	781c      	ldrb	r4, [r3, #0]
 8003dea:	1c45      	adds	r5, r0, #1
 8003dec:	5d09      	ldrb	r1, [r1, r4]
 8003dee:	0028      	movs	r0, r5
 8003df0:	000f      	movs	r7, r1
 8003df2:	4017      	ands	r7, r2
 8003df4:	4211      	tst	r1, r2
 8003df6:	d1f5      	bne.n	8003de4 <_strtol_l.isra.0+0x1c>
 8003df8:	2c2d      	cmp	r4, #45	; 0x2d
 8003dfa:	d13a      	bne.n	8003e72 <_strtol_l.isra.0+0xaa>
 8003dfc:	2701      	movs	r7, #1
 8003dfe:	782c      	ldrb	r4, [r5, #0]
 8003e00:	1c9d      	adds	r5, r3, #2
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	d065      	beq.n	8003ed2 <_strtol_l.isra.0+0x10a>
 8003e06:	2e10      	cmp	r6, #16
 8003e08:	d109      	bne.n	8003e1e <_strtol_l.isra.0+0x56>
 8003e0a:	2c30      	cmp	r4, #48	; 0x30
 8003e0c:	d107      	bne.n	8003e1e <_strtol_l.isra.0+0x56>
 8003e0e:	2220      	movs	r2, #32
 8003e10:	782b      	ldrb	r3, [r5, #0]
 8003e12:	4393      	bics	r3, r2
 8003e14:	2b58      	cmp	r3, #88	; 0x58
 8003e16:	d157      	bne.n	8003ec8 <_strtol_l.isra.0+0x100>
 8003e18:	2610      	movs	r6, #16
 8003e1a:	786c      	ldrb	r4, [r5, #1]
 8003e1c:	3502      	adds	r5, #2
 8003e1e:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <_strtol_l.isra.0+0x118>)
 8003e20:	0031      	movs	r1, r6
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	0018      	movs	r0, r3
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	f7fc fa06 	bl	8000238 <__aeabi_uidivmod>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4684      	mov	ip, r0
 8003e32:	0018      	movs	r0, r3
 8003e34:	9104      	str	r1, [sp, #16]
 8003e36:	4252      	negs	r2, r2
 8003e38:	0021      	movs	r1, r4
 8003e3a:	3930      	subs	r1, #48	; 0x30
 8003e3c:	2909      	cmp	r1, #9
 8003e3e:	d81d      	bhi.n	8003e7c <_strtol_l.isra.0+0xb4>
 8003e40:	000c      	movs	r4, r1
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	dd28      	ble.n	8003e98 <_strtol_l.isra.0+0xd0>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db24      	blt.n	8003e94 <_strtol_l.isra.0+0xcc>
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	4584      	cmp	ip, r0
 8003e4e:	d306      	bcc.n	8003e5e <_strtol_l.isra.0+0x96>
 8003e50:	d102      	bne.n	8003e58 <_strtol_l.isra.0+0x90>
 8003e52:	9904      	ldr	r1, [sp, #16]
 8003e54:	42a1      	cmp	r1, r4
 8003e56:	db02      	blt.n	8003e5e <_strtol_l.isra.0+0x96>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4370      	muls	r0, r6
 8003e5c:	1820      	adds	r0, r4, r0
 8003e5e:	782c      	ldrb	r4, [r5, #0]
 8003e60:	3501      	adds	r5, #1
 8003e62:	e7e9      	b.n	8003e38 <_strtol_l.isra.0+0x70>
 8003e64:	f7ff fbe2 	bl	800362c <__errno>
 8003e68:	2316      	movs	r3, #22
 8003e6a:	6003      	str	r3, [r0, #0]
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	b007      	add	sp, #28
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e72:	2c2b      	cmp	r4, #43	; 0x2b
 8003e74:	d1c5      	bne.n	8003e02 <_strtol_l.isra.0+0x3a>
 8003e76:	782c      	ldrb	r4, [r5, #0]
 8003e78:	1c9d      	adds	r5, r3, #2
 8003e7a:	e7c2      	b.n	8003e02 <_strtol_l.isra.0+0x3a>
 8003e7c:	0021      	movs	r1, r4
 8003e7e:	3941      	subs	r1, #65	; 0x41
 8003e80:	2919      	cmp	r1, #25
 8003e82:	d801      	bhi.n	8003e88 <_strtol_l.isra.0+0xc0>
 8003e84:	3c37      	subs	r4, #55	; 0x37
 8003e86:	e7dc      	b.n	8003e42 <_strtol_l.isra.0+0x7a>
 8003e88:	0021      	movs	r1, r4
 8003e8a:	3961      	subs	r1, #97	; 0x61
 8003e8c:	2919      	cmp	r1, #25
 8003e8e:	d803      	bhi.n	8003e98 <_strtol_l.isra.0+0xd0>
 8003e90:	3c57      	subs	r4, #87	; 0x57
 8003e92:	e7d6      	b.n	8003e42 <_strtol_l.isra.0+0x7a>
 8003e94:	0013      	movs	r3, r2
 8003e96:	e7e2      	b.n	8003e5e <_strtol_l.isra.0+0x96>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da09      	bge.n	8003eb0 <_strtol_l.isra.0+0xe8>
 8003e9c:	2322      	movs	r3, #34	; 0x22
 8003e9e:	9a05      	ldr	r2, [sp, #20]
 8003ea0:	9803      	ldr	r0, [sp, #12]
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	9b02      	ldr	r3, [sp, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0e1      	beq.n	8003e6e <_strtol_l.isra.0+0xa6>
 8003eaa:	1e6b      	subs	r3, r5, #1
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	e007      	b.n	8003ec0 <_strtol_l.isra.0+0xf8>
 8003eb0:	2f00      	cmp	r7, #0
 8003eb2:	d000      	beq.n	8003eb6 <_strtol_l.isra.0+0xee>
 8003eb4:	4240      	negs	r0, r0
 8003eb6:	9a02      	ldr	r2, [sp, #8]
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	d0d8      	beq.n	8003e6e <_strtol_l.isra.0+0xa6>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f4      	bne.n	8003eaa <_strtol_l.isra.0+0xe2>
 8003ec0:	9b02      	ldr	r3, [sp, #8]
 8003ec2:	9a01      	ldr	r2, [sp, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e7d2      	b.n	8003e6e <_strtol_l.isra.0+0xa6>
 8003ec8:	2430      	movs	r4, #48	; 0x30
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	d1a7      	bne.n	8003e1e <_strtol_l.isra.0+0x56>
 8003ece:	3608      	adds	r6, #8
 8003ed0:	e7a5      	b.n	8003e1e <_strtol_l.isra.0+0x56>
 8003ed2:	2c30      	cmp	r4, #48	; 0x30
 8003ed4:	d09b      	beq.n	8003e0e <_strtol_l.isra.0+0x46>
 8003ed6:	260a      	movs	r6, #10
 8003ed8:	e7a1      	b.n	8003e1e <_strtol_l.isra.0+0x56>
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	08004364 	.word	0x08004364
 8003ee0:	7fffffff 	.word	0x7fffffff

08003ee4 <_strtol_r>:
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	f7ff ff6f 	bl	8003dc8 <_strtol_l.isra.0>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <_strtoul_l.isra.0>:
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	001e      	movs	r6, r3
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <_strtoul_l.isra.0+0x114>)
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	000f      	movs	r7, r1
 8003ef6:	9101      	str	r1, [sp, #4]
 8003ef8:	469c      	mov	ip, r3
 8003efa:	2108      	movs	r1, #8
 8003efc:	9005      	str	r0, [sp, #20]
 8003efe:	9202      	str	r2, [sp, #8]
 8003f00:	003b      	movs	r3, r7
 8003f02:	4662      	mov	r2, ip
 8003f04:	781c      	ldrb	r4, [r3, #0]
 8003f06:	1c7d      	adds	r5, r7, #1
 8003f08:	5d10      	ldrb	r0, [r2, r4]
 8003f0a:	002f      	movs	r7, r5
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	400a      	ands	r2, r1
 8003f10:	4208      	tst	r0, r1
 8003f12:	d1f5      	bne.n	8003f00 <_strtoul_l.isra.0+0x14>
 8003f14:	2c2d      	cmp	r4, #45	; 0x2d
 8003f16:	d13a      	bne.n	8003f8e <_strtoul_l.isra.0+0xa2>
 8003f18:	2701      	movs	r7, #1
 8003f1a:	782c      	ldrb	r4, [r5, #0]
 8003f1c:	1c9d      	adds	r5, r3, #2
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d069      	beq.n	8003ff6 <_strtoul_l.isra.0+0x10a>
 8003f22:	2e10      	cmp	r6, #16
 8003f24:	d109      	bne.n	8003f3a <_strtoul_l.isra.0+0x4e>
 8003f26:	2c30      	cmp	r4, #48	; 0x30
 8003f28:	d107      	bne.n	8003f3a <_strtoul_l.isra.0+0x4e>
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	782b      	ldrb	r3, [r5, #0]
 8003f2e:	4393      	bics	r3, r2
 8003f30:	2b58      	cmp	r3, #88	; 0x58
 8003f32:	d15b      	bne.n	8003fec <_strtoul_l.isra.0+0x100>
 8003f34:	2610      	movs	r6, #16
 8003f36:	786c      	ldrb	r4, [r5, #1]
 8003f38:	3502      	adds	r5, #2
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	0031      	movs	r1, r6
 8003f3e:	4240      	negs	r0, r0
 8003f40:	f7fc f8f4 	bl	800012c <__udivsi3>
 8003f44:	9003      	str	r0, [sp, #12]
 8003f46:	2001      	movs	r0, #1
 8003f48:	0031      	movs	r1, r6
 8003f4a:	4240      	negs	r0, r0
 8003f4c:	f7fc f974 	bl	8000238 <__aeabi_uidivmod>
 8003f50:	2300      	movs	r3, #0
 8003f52:	9104      	str	r1, [sp, #16]
 8003f54:	2101      	movs	r1, #1
 8003f56:	2201      	movs	r2, #1
 8003f58:	0018      	movs	r0, r3
 8003f5a:	468c      	mov	ip, r1
 8003f5c:	4252      	negs	r2, r2
 8003f5e:	0021      	movs	r1, r4
 8003f60:	3930      	subs	r1, #48	; 0x30
 8003f62:	2909      	cmp	r1, #9
 8003f64:	d81a      	bhi.n	8003f9c <_strtoul_l.isra.0+0xb0>
 8003f66:	000c      	movs	r4, r1
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	dd25      	ble.n	8003fb8 <_strtoul_l.isra.0+0xcc>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db21      	blt.n	8003fb4 <_strtoul_l.isra.0+0xc8>
 8003f70:	9903      	ldr	r1, [sp, #12]
 8003f72:	0013      	movs	r3, r2
 8003f74:	4281      	cmp	r1, r0
 8003f76:	d307      	bcc.n	8003f88 <_strtoul_l.isra.0+0x9c>
 8003f78:	d103      	bne.n	8003f82 <_strtoul_l.isra.0+0x96>
 8003f7a:	9904      	ldr	r1, [sp, #16]
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	42a1      	cmp	r1, r4
 8003f80:	db02      	blt.n	8003f88 <_strtoul_l.isra.0+0x9c>
 8003f82:	4663      	mov	r3, ip
 8003f84:	4370      	muls	r0, r6
 8003f86:	1820      	adds	r0, r4, r0
 8003f88:	782c      	ldrb	r4, [r5, #0]
 8003f8a:	3501      	adds	r5, #1
 8003f8c:	e7e7      	b.n	8003f5e <_strtoul_l.isra.0+0x72>
 8003f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8003f90:	d001      	beq.n	8003f96 <_strtoul_l.isra.0+0xaa>
 8003f92:	0017      	movs	r7, r2
 8003f94:	e7c3      	b.n	8003f1e <_strtoul_l.isra.0+0x32>
 8003f96:	782c      	ldrb	r4, [r5, #0]
 8003f98:	1c9d      	adds	r5, r3, #2
 8003f9a:	e7fa      	b.n	8003f92 <_strtoul_l.isra.0+0xa6>
 8003f9c:	0021      	movs	r1, r4
 8003f9e:	3941      	subs	r1, #65	; 0x41
 8003fa0:	2919      	cmp	r1, #25
 8003fa2:	d801      	bhi.n	8003fa8 <_strtoul_l.isra.0+0xbc>
 8003fa4:	3c37      	subs	r4, #55	; 0x37
 8003fa6:	e7df      	b.n	8003f68 <_strtoul_l.isra.0+0x7c>
 8003fa8:	0021      	movs	r1, r4
 8003faa:	3961      	subs	r1, #97	; 0x61
 8003fac:	2919      	cmp	r1, #25
 8003fae:	d803      	bhi.n	8003fb8 <_strtoul_l.isra.0+0xcc>
 8003fb0:	3c57      	subs	r4, #87	; 0x57
 8003fb2:	e7d9      	b.n	8003f68 <_strtoul_l.isra.0+0x7c>
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	e7e7      	b.n	8003f88 <_strtoul_l.isra.0+0x9c>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da09      	bge.n	8003fd0 <_strtoul_l.isra.0+0xe4>
 8003fbc:	2322      	movs	r3, #34	; 0x22
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	9a05      	ldr	r2, [sp, #20]
 8003fc2:	4240      	negs	r0, r0
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	9b02      	ldr	r3, [sp, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <_strtoul_l.isra.0+0xf4>
 8003fcc:	b007      	add	sp, #28
 8003fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	d000      	beq.n	8003fd6 <_strtoul_l.isra.0+0xea>
 8003fd4:	4240      	negs	r0, r0
 8003fd6:	9a02      	ldr	r2, [sp, #8]
 8003fd8:	2a00      	cmp	r2, #0
 8003fda:	d0f7      	beq.n	8003fcc <_strtoul_l.isra.0+0xe0>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <_strtoul_l.isra.0+0xf8>
 8003fe0:	1e6b      	subs	r3, r5, #1
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	9b02      	ldr	r3, [sp, #8]
 8003fe6:	9a01      	ldr	r2, [sp, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e7ef      	b.n	8003fcc <_strtoul_l.isra.0+0xe0>
 8003fec:	2430      	movs	r4, #48	; 0x30
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d1a3      	bne.n	8003f3a <_strtoul_l.isra.0+0x4e>
 8003ff2:	3608      	adds	r6, #8
 8003ff4:	e7a1      	b.n	8003f3a <_strtoul_l.isra.0+0x4e>
 8003ff6:	2c30      	cmp	r4, #48	; 0x30
 8003ff8:	d097      	beq.n	8003f2a <_strtoul_l.isra.0+0x3e>
 8003ffa:	260a      	movs	r6, #10
 8003ffc:	e79d      	b.n	8003f3a <_strtoul_l.isra.0+0x4e>
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	08004364 	.word	0x08004364

08004004 <_strtoul_r>:
 8004004:	b510      	push	{r4, lr}
 8004006:	f7ff ff71 	bl	8003eec <_strtoul_l.isra.0>
 800400a:	bd10      	pop	{r4, pc}

0800400c <__submore>:
 800400c:	000b      	movs	r3, r1
 800400e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004010:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004012:	3344      	adds	r3, #68	; 0x44
 8004014:	000c      	movs	r4, r1
 8004016:	429d      	cmp	r5, r3
 8004018:	d11c      	bne.n	8004054 <__submore+0x48>
 800401a:	2680      	movs	r6, #128	; 0x80
 800401c:	00f6      	lsls	r6, r6, #3
 800401e:	0031      	movs	r1, r6
 8004020:	f000 f892 	bl	8004148 <_malloc_r>
 8004024:	2800      	cmp	r0, #0
 8004026:	d102      	bne.n	800402e <__submore+0x22>
 8004028:	2001      	movs	r0, #1
 800402a:	4240      	negs	r0, r0
 800402c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800402e:	0023      	movs	r3, r4
 8004030:	6360      	str	r0, [r4, #52]	; 0x34
 8004032:	63a6      	str	r6, [r4, #56]	; 0x38
 8004034:	3346      	adds	r3, #70	; 0x46
 8004036:	781a      	ldrb	r2, [r3, #0]
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <__submore+0x70>)
 800403a:	54c2      	strb	r2, [r0, r3]
 800403c:	0023      	movs	r3, r4
 800403e:	3345      	adds	r3, #69	; 0x45
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <__submore+0x74>)
 8004044:	54c2      	strb	r2, [r0, r3]
 8004046:	782a      	ldrb	r2, [r5, #0]
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <__submore+0x78>)
 800404a:	54c2      	strb	r2, [r0, r3]
 800404c:	18c0      	adds	r0, r0, r3
 800404e:	6020      	str	r0, [r4, #0]
 8004050:	2000      	movs	r0, #0
 8004052:	e7eb      	b.n	800402c <__submore+0x20>
 8004054:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8004056:	0029      	movs	r1, r5
 8004058:	0073      	lsls	r3, r6, #1
 800405a:	001a      	movs	r2, r3
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	f000 f8d1 	bl	8004204 <_realloc_r>
 8004062:	1e05      	subs	r5, r0, #0
 8004064:	d0e0      	beq.n	8004028 <__submore+0x1c>
 8004066:	1987      	adds	r7, r0, r6
 8004068:	0001      	movs	r1, r0
 800406a:	0032      	movs	r2, r6
 800406c:	0038      	movs	r0, r7
 800406e:	f000 f818 	bl	80040a2 <memcpy>
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	6027      	str	r7, [r4, #0]
 8004076:	6365      	str	r5, [r4, #52]	; 0x34
 8004078:	63a3      	str	r3, [r4, #56]	; 0x38
 800407a:	e7e9      	b.n	8004050 <__submore+0x44>
 800407c:	000003ff 	.word	0x000003ff
 8004080:	000003fe 	.word	0x000003fe
 8004084:	000003fd 	.word	0x000003fd

08004088 <__retarget_lock_acquire_recursive>:
 8004088:	4770      	bx	lr

0800408a <__retarget_lock_release_recursive>:
 800408a:	4770      	bx	lr

0800408c <memchr>:
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	1882      	adds	r2, r0, r2
 8004090:	4290      	cmp	r0, r2
 8004092:	d101      	bne.n	8004098 <memchr+0xc>
 8004094:	2000      	movs	r0, #0
 8004096:	4770      	bx	lr
 8004098:	7803      	ldrb	r3, [r0, #0]
 800409a:	428b      	cmp	r3, r1
 800409c:	d0fb      	beq.n	8004096 <memchr+0xa>
 800409e:	3001      	adds	r0, #1
 80040a0:	e7f6      	b.n	8004090 <memchr+0x4>

080040a2 <memcpy>:
 80040a2:	2300      	movs	r3, #0
 80040a4:	b510      	push	{r4, lr}
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d100      	bne.n	80040ac <memcpy+0xa>
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	5ccc      	ldrb	r4, [r1, r3]
 80040ae:	54c4      	strb	r4, [r0, r3]
 80040b0:	3301      	adds	r3, #1
 80040b2:	e7f8      	b.n	80040a6 <memcpy+0x4>

080040b4 <_free_r>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	0005      	movs	r5, r0
 80040b8:	2900      	cmp	r1, #0
 80040ba:	d010      	beq.n	80040de <_free_r+0x2a>
 80040bc:	1f0c      	subs	r4, r1, #4
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da00      	bge.n	80040c6 <_free_r+0x12>
 80040c4:	18e4      	adds	r4, r4, r3
 80040c6:	0028      	movs	r0, r5
 80040c8:	f000 f8d4 	bl	8004274 <__malloc_lock>
 80040cc:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <_free_r+0x90>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <_free_r+0x2c>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	0028      	movs	r0, r5
 80040da:	f000 f8d3 	bl	8004284 <__malloc_unlock>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d908      	bls.n	80040f6 <_free_r+0x42>
 80040e4:	6821      	ldr	r1, [r4, #0]
 80040e6:	1860      	adds	r0, r4, r1
 80040e8:	4283      	cmp	r3, r0
 80040ea:	d1f3      	bne.n	80040d4 <_free_r+0x20>
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	1841      	adds	r1, r0, r1
 80040f2:	6021      	str	r1, [r4, #0]
 80040f4:	e7ee      	b.n	80040d4 <_free_r+0x20>
 80040f6:	001a      	movs	r2, r3
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <_free_r+0x4e>
 80040fe:	42a3      	cmp	r3, r4
 8004100:	d9f9      	bls.n	80040f6 <_free_r+0x42>
 8004102:	6811      	ldr	r1, [r2, #0]
 8004104:	1850      	adds	r0, r2, r1
 8004106:	42a0      	cmp	r0, r4
 8004108:	d10b      	bne.n	8004122 <_free_r+0x6e>
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	1809      	adds	r1, r1, r0
 800410e:	1850      	adds	r0, r2, r1
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	4283      	cmp	r3, r0
 8004114:	d1e0      	bne.n	80040d8 <_free_r+0x24>
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	1841      	adds	r1, r0, r1
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	6053      	str	r3, [r2, #4]
 8004120:	e7da      	b.n	80040d8 <_free_r+0x24>
 8004122:	42a0      	cmp	r0, r4
 8004124:	d902      	bls.n	800412c <_free_r+0x78>
 8004126:	230c      	movs	r3, #12
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	e7d5      	b.n	80040d8 <_free_r+0x24>
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	1860      	adds	r0, r4, r1
 8004130:	4283      	cmp	r3, r0
 8004132:	d103      	bne.n	800413c <_free_r+0x88>
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	1841      	adds	r1, r0, r1
 800413a:	6021      	str	r1, [r4, #0]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6054      	str	r4, [r2, #4]
 8004140:	e7ca      	b.n	80040d8 <_free_r+0x24>
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	20000148 	.word	0x20000148

08004148 <_malloc_r>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	2303      	movs	r3, #3
 800414c:	1ccd      	adds	r5, r1, #3
 800414e:	439d      	bics	r5, r3
 8004150:	3508      	adds	r5, #8
 8004152:	0006      	movs	r6, r0
 8004154:	2d0c      	cmp	r5, #12
 8004156:	d21f      	bcs.n	8004198 <_malloc_r+0x50>
 8004158:	250c      	movs	r5, #12
 800415a:	42a9      	cmp	r1, r5
 800415c:	d81e      	bhi.n	800419c <_malloc_r+0x54>
 800415e:	0030      	movs	r0, r6
 8004160:	f000 f888 	bl	8004274 <__malloc_lock>
 8004164:	4925      	ldr	r1, [pc, #148]	; (80041fc <_malloc_r+0xb4>)
 8004166:	680a      	ldr	r2, [r1, #0]
 8004168:	0014      	movs	r4, r2
 800416a:	2c00      	cmp	r4, #0
 800416c:	d11a      	bne.n	80041a4 <_malloc_r+0x5c>
 800416e:	4f24      	ldr	r7, [pc, #144]	; (8004200 <_malloc_r+0xb8>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <_malloc_r+0x38>
 8004176:	0021      	movs	r1, r4
 8004178:	0030      	movs	r0, r6
 800417a:	f000 f869 	bl	8004250 <_sbrk_r>
 800417e:	6038      	str	r0, [r7, #0]
 8004180:	0029      	movs	r1, r5
 8004182:	0030      	movs	r0, r6
 8004184:	f000 f864 	bl	8004250 <_sbrk_r>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d12b      	bne.n	80041e4 <_malloc_r+0x9c>
 800418c:	230c      	movs	r3, #12
 800418e:	0030      	movs	r0, r6
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	f000 f877 	bl	8004284 <__malloc_unlock>
 8004196:	e003      	b.n	80041a0 <_malloc_r+0x58>
 8004198:	2d00      	cmp	r5, #0
 800419a:	dade      	bge.n	800415a <_malloc_r+0x12>
 800419c:	230c      	movs	r3, #12
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	2000      	movs	r0, #0
 80041a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	1b5b      	subs	r3, r3, r5
 80041a8:	d419      	bmi.n	80041de <_malloc_r+0x96>
 80041aa:	2b0b      	cmp	r3, #11
 80041ac:	d903      	bls.n	80041b6 <_malloc_r+0x6e>
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	18e4      	adds	r4, r4, r3
 80041b2:	6025      	str	r5, [r4, #0]
 80041b4:	e003      	b.n	80041be <_malloc_r+0x76>
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	42a2      	cmp	r2, r4
 80041ba:	d10e      	bne.n	80041da <_malloc_r+0x92>
 80041bc:	600b      	str	r3, [r1, #0]
 80041be:	0030      	movs	r0, r6
 80041c0:	f000 f860 	bl	8004284 <__malloc_unlock>
 80041c4:	0020      	movs	r0, r4
 80041c6:	2207      	movs	r2, #7
 80041c8:	300b      	adds	r0, #11
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	4390      	bics	r0, r2
 80041ce:	1ac2      	subs	r2, r0, r3
 80041d0:	4298      	cmp	r0, r3
 80041d2:	d0e6      	beq.n	80041a2 <_malloc_r+0x5a>
 80041d4:	1a1b      	subs	r3, r3, r0
 80041d6:	50a3      	str	r3, [r4, r2]
 80041d8:	e7e3      	b.n	80041a2 <_malloc_r+0x5a>
 80041da:	6053      	str	r3, [r2, #4]
 80041dc:	e7ef      	b.n	80041be <_malloc_r+0x76>
 80041de:	0022      	movs	r2, r4
 80041e0:	6864      	ldr	r4, [r4, #4]
 80041e2:	e7c2      	b.n	800416a <_malloc_r+0x22>
 80041e4:	2303      	movs	r3, #3
 80041e6:	1cc4      	adds	r4, r0, #3
 80041e8:	439c      	bics	r4, r3
 80041ea:	42a0      	cmp	r0, r4
 80041ec:	d0e1      	beq.n	80041b2 <_malloc_r+0x6a>
 80041ee:	1a21      	subs	r1, r4, r0
 80041f0:	0030      	movs	r0, r6
 80041f2:	f000 f82d 	bl	8004250 <_sbrk_r>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	d1db      	bne.n	80041b2 <_malloc_r+0x6a>
 80041fa:	e7c7      	b.n	800418c <_malloc_r+0x44>
 80041fc:	20000148 	.word	0x20000148
 8004200:	2000014c 	.word	0x2000014c

08004204 <_realloc_r>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	0007      	movs	r7, r0
 8004208:	000d      	movs	r5, r1
 800420a:	0016      	movs	r6, r2
 800420c:	2900      	cmp	r1, #0
 800420e:	d105      	bne.n	800421c <_realloc_r+0x18>
 8004210:	0011      	movs	r1, r2
 8004212:	f7ff ff99 	bl	8004148 <_malloc_r>
 8004216:	0004      	movs	r4, r0
 8004218:	0020      	movs	r0, r4
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421c:	2a00      	cmp	r2, #0
 800421e:	d103      	bne.n	8004228 <_realloc_r+0x24>
 8004220:	f7ff ff48 	bl	80040b4 <_free_r>
 8004224:	0034      	movs	r4, r6
 8004226:	e7f7      	b.n	8004218 <_realloc_r+0x14>
 8004228:	f000 f834 	bl	8004294 <_malloc_usable_size_r>
 800422c:	002c      	movs	r4, r5
 800422e:	42b0      	cmp	r0, r6
 8004230:	d2f2      	bcs.n	8004218 <_realloc_r+0x14>
 8004232:	0031      	movs	r1, r6
 8004234:	0038      	movs	r0, r7
 8004236:	f7ff ff87 	bl	8004148 <_malloc_r>
 800423a:	1e04      	subs	r4, r0, #0
 800423c:	d0ec      	beq.n	8004218 <_realloc_r+0x14>
 800423e:	0029      	movs	r1, r5
 8004240:	0032      	movs	r2, r6
 8004242:	f7ff ff2e 	bl	80040a2 <memcpy>
 8004246:	0029      	movs	r1, r5
 8004248:	0038      	movs	r0, r7
 800424a:	f7ff ff33 	bl	80040b4 <_free_r>
 800424e:	e7e3      	b.n	8004218 <_realloc_r+0x14>

08004250 <_sbrk_r>:
 8004250:	2300      	movs	r3, #0
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	4d06      	ldr	r5, [pc, #24]	; (8004270 <_sbrk_r+0x20>)
 8004256:	0004      	movs	r4, r0
 8004258:	0008      	movs	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fc fe46 	bl	8000eec <_sbrk>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d103      	bne.n	800426c <_sbrk_r+0x1c>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d000      	beq.n	800426c <_sbrk_r+0x1c>
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	2000025c 	.word	0x2000025c

08004274 <__malloc_lock>:
 8004274:	b510      	push	{r4, lr}
 8004276:	4802      	ldr	r0, [pc, #8]	; (8004280 <__malloc_lock+0xc>)
 8004278:	f7ff ff06 	bl	8004088 <__retarget_lock_acquire_recursive>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	20000264 	.word	0x20000264

08004284 <__malloc_unlock>:
 8004284:	b510      	push	{r4, lr}
 8004286:	4802      	ldr	r0, [pc, #8]	; (8004290 <__malloc_unlock+0xc>)
 8004288:	f7ff feff 	bl	800408a <__retarget_lock_release_recursive>
 800428c:	bd10      	pop	{r4, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	20000264 	.word	0x20000264

08004294 <_malloc_usable_size_r>:
 8004294:	1f0b      	subs	r3, r1, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	1f18      	subs	r0, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	da01      	bge.n	80042a2 <_malloc_usable_size_r+0xe>
 800429e:	580b      	ldr	r3, [r1, r0]
 80042a0:	18c0      	adds	r0, r0, r3
 80042a2:	4770      	bx	lr

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
